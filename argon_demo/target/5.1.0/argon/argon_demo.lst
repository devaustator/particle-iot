
/Users/elv/particle-iot/argon_demo/target/5.1.0/argon/argon_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006280  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000ba2a0  000ba2a0  0000a2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .note.gnu.build-id 00000024  000ba2a8  000ba2a8  0000a2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000204  2003e404  000ba2cc  0000e404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001e8  2003e608  2003e608  0001e608  2**2
                  ALLOC
  7 .backup       00000004  2003f400  000ba4d0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_product 00000006  000ba4d4  000ba4d4  0001a4d4  2**0
                  ALLOC
  9 .module_info_suffix 00000024  000ba4da  000ba4da  0001a4da  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .module_info_crc 00000004  000ba4fe  000ba4fe  0001a4fe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_info   0012d8a4  00000000  00000000  0001a502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0001478a  00000000  00000000  00147da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0003c4f4  00000000  00000000  0015c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d00  00000000  00000000  00198a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000a490  00000000  00000000  0019b724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cbe4  00000000  00000000  001a5bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00044563  00000000  00000000  001e2798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00138f9e  00000000  00000000  00226cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000850c  00000000  00000000  0035fc9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <__aeabi_frsub>:
   b4a28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b4a2c:	e002      	b.n	b4a34 <__addsf3>
   b4a2e:	bf00      	nop

000b4a30 <__aeabi_fsub>:
   b4a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b4a34 <__addsf3>:
   b4a34:	0042      	lsls	r2, r0, #1
   b4a36:	bf1f      	itttt	ne
   b4a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b4a3c:	ea92 0f03 	teqne	r2, r3
   b4a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b4a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b4a48:	d06a      	beq.n	b4b20 <__addsf3+0xec>
   b4a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b4a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b4a52:	bfc1      	itttt	gt
   b4a54:	18d2      	addgt	r2, r2, r3
   b4a56:	4041      	eorgt	r1, r0
   b4a58:	4048      	eorgt	r0, r1
   b4a5a:	4041      	eorgt	r1, r0
   b4a5c:	bfb8      	it	lt
   b4a5e:	425b      	neglt	r3, r3
   b4a60:	2b19      	cmp	r3, #25
   b4a62:	bf88      	it	hi
   b4a64:	4770      	bxhi	lr
   b4a66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b4a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b4a72:	bf18      	it	ne
   b4a74:	4240      	negne	r0, r0
   b4a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4a7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b4a7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b4a82:	bf18      	it	ne
   b4a84:	4249      	negne	r1, r1
   b4a86:	ea92 0f03 	teq	r2, r3
   b4a8a:	d03f      	beq.n	b4b0c <__addsf3+0xd8>
   b4a8c:	f1a2 0201 	sub.w	r2, r2, #1
   b4a90:	fa41 fc03 	asr.w	ip, r1, r3
   b4a94:	eb10 000c 	adds.w	r0, r0, ip
   b4a98:	f1c3 0320 	rsb	r3, r3, #32
   b4a9c:	fa01 f103 	lsl.w	r1, r1, r3
   b4aa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4aa4:	d502      	bpl.n	b4aac <__addsf3+0x78>
   b4aa6:	4249      	negs	r1, r1
   b4aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b4aac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4ab0:	d313      	bcc.n	b4ada <__addsf3+0xa6>
   b4ab2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b4ab6:	d306      	bcc.n	b4ac6 <__addsf3+0x92>
   b4ab8:	0840      	lsrs	r0, r0, #1
   b4aba:	ea4f 0131 	mov.w	r1, r1, rrx
   b4abe:	f102 0201 	add.w	r2, r2, #1
   b4ac2:	2afe      	cmp	r2, #254	; 0xfe
   b4ac4:	d251      	bcs.n	b4b6a <__addsf3+0x136>
   b4ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b4aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b4ace:	bf08      	it	eq
   b4ad0:	f020 0001 	biceq.w	r0, r0, #1
   b4ad4:	ea40 0003 	orr.w	r0, r0, r3
   b4ad8:	4770      	bx	lr
   b4ada:	0049      	lsls	r1, r1, #1
   b4adc:	eb40 0000 	adc.w	r0, r0, r0
   b4ae0:	3a01      	subs	r2, #1
   b4ae2:	bf28      	it	cs
   b4ae4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b4ae8:	d2ed      	bcs.n	b4ac6 <__addsf3+0x92>
   b4aea:	fab0 fc80 	clz	ip, r0
   b4aee:	f1ac 0c08 	sub.w	ip, ip, #8
   b4af2:	ebb2 020c 	subs.w	r2, r2, ip
   b4af6:	fa00 f00c 	lsl.w	r0, r0, ip
   b4afa:	bfaa      	itet	ge
   b4afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b4b00:	4252      	neglt	r2, r2
   b4b02:	4318      	orrge	r0, r3
   b4b04:	bfbc      	itt	lt
   b4b06:	40d0      	lsrlt	r0, r2
   b4b08:	4318      	orrlt	r0, r3
   b4b0a:	4770      	bx	lr
   b4b0c:	f092 0f00 	teq	r2, #0
   b4b10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b4b14:	bf06      	itte	eq
   b4b16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b4b1a:	3201      	addeq	r2, #1
   b4b1c:	3b01      	subne	r3, #1
   b4b1e:	e7b5      	b.n	b4a8c <__addsf3+0x58>
   b4b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b4b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b4b28:	bf18      	it	ne
   b4b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b4b2e:	d021      	beq.n	b4b74 <__addsf3+0x140>
   b4b30:	ea92 0f03 	teq	r2, r3
   b4b34:	d004      	beq.n	b4b40 <__addsf3+0x10c>
   b4b36:	f092 0f00 	teq	r2, #0
   b4b3a:	bf08      	it	eq
   b4b3c:	4608      	moveq	r0, r1
   b4b3e:	4770      	bx	lr
   b4b40:	ea90 0f01 	teq	r0, r1
   b4b44:	bf1c      	itt	ne
   b4b46:	2000      	movne	r0, #0
   b4b48:	4770      	bxne	lr
   b4b4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b4b4e:	d104      	bne.n	b4b5a <__addsf3+0x126>
   b4b50:	0040      	lsls	r0, r0, #1
   b4b52:	bf28      	it	cs
   b4b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b4b58:	4770      	bx	lr
   b4b5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b4b5e:	bf3c      	itt	cc
   b4b60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b4b64:	4770      	bxcc	lr
   b4b66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b4b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4b72:	4770      	bx	lr
   b4b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b4b78:	bf16      	itet	ne
   b4b7a:	4608      	movne	r0, r1
   b4b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b4b80:	4601      	movne	r1, r0
   b4b82:	0242      	lsls	r2, r0, #9
   b4b84:	bf06      	itte	eq
   b4b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b4b8a:	ea90 0f01 	teqeq	r0, r1
   b4b8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b4b92:	4770      	bx	lr

000b4b94 <__aeabi_ui2f>:
   b4b94:	f04f 0300 	mov.w	r3, #0
   b4b98:	e004      	b.n	b4ba4 <__aeabi_i2f+0x8>
   b4b9a:	bf00      	nop

000b4b9c <__aeabi_i2f>:
   b4b9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b4ba0:	bf48      	it	mi
   b4ba2:	4240      	negmi	r0, r0
   b4ba4:	ea5f 0c00 	movs.w	ip, r0
   b4ba8:	bf08      	it	eq
   b4baa:	4770      	bxeq	lr
   b4bac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b4bb0:	4601      	mov	r1, r0
   b4bb2:	f04f 0000 	mov.w	r0, #0
   b4bb6:	e01c      	b.n	b4bf2 <__aeabi_l2f+0x2a>

000b4bb8 <__aeabi_ul2f>:
   b4bb8:	ea50 0201 	orrs.w	r2, r0, r1
   b4bbc:	bf08      	it	eq
   b4bbe:	4770      	bxeq	lr
   b4bc0:	f04f 0300 	mov.w	r3, #0
   b4bc4:	e00a      	b.n	b4bdc <__aeabi_l2f+0x14>
   b4bc6:	bf00      	nop

000b4bc8 <__aeabi_l2f>:
   b4bc8:	ea50 0201 	orrs.w	r2, r0, r1
   b4bcc:	bf08      	it	eq
   b4bce:	4770      	bxeq	lr
   b4bd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b4bd4:	d502      	bpl.n	b4bdc <__aeabi_l2f+0x14>
   b4bd6:	4240      	negs	r0, r0
   b4bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4bdc:	ea5f 0c01 	movs.w	ip, r1
   b4be0:	bf02      	ittt	eq
   b4be2:	4684      	moveq	ip, r0
   b4be4:	4601      	moveq	r1, r0
   b4be6:	2000      	moveq	r0, #0
   b4be8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b4bec:	bf08      	it	eq
   b4bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b4bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b4bf6:	fabc f28c 	clz	r2, ip
   b4bfa:	3a08      	subs	r2, #8
   b4bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b4c00:	db10      	blt.n	b4c24 <__aeabi_l2f+0x5c>
   b4c02:	fa01 fc02 	lsl.w	ip, r1, r2
   b4c06:	4463      	add	r3, ip
   b4c08:	fa00 fc02 	lsl.w	ip, r0, r2
   b4c0c:	f1c2 0220 	rsb	r2, r2, #32
   b4c10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4c14:	fa20 f202 	lsr.w	r2, r0, r2
   b4c18:	eb43 0002 	adc.w	r0, r3, r2
   b4c1c:	bf08      	it	eq
   b4c1e:	f020 0001 	biceq.w	r0, r0, #1
   b4c22:	4770      	bx	lr
   b4c24:	f102 0220 	add.w	r2, r2, #32
   b4c28:	fa01 fc02 	lsl.w	ip, r1, r2
   b4c2c:	f1c2 0220 	rsb	r2, r2, #32
   b4c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b4c34:	fa21 f202 	lsr.w	r2, r1, r2
   b4c38:	eb43 0002 	adc.w	r0, r3, r2
   b4c3c:	bf08      	it	eq
   b4c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b4c42:	4770      	bx	lr

000b4c44 <__aeabi_ldivmod>:
   b4c44:	b97b      	cbnz	r3, b4c66 <__aeabi_ldivmod+0x22>
   b4c46:	b972      	cbnz	r2, b4c66 <__aeabi_ldivmod+0x22>
   b4c48:	2900      	cmp	r1, #0
   b4c4a:	bfbe      	ittt	lt
   b4c4c:	2000      	movlt	r0, #0
   b4c4e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b4c52:	e006      	blt.n	b4c62 <__aeabi_ldivmod+0x1e>
   b4c54:	bf08      	it	eq
   b4c56:	2800      	cmpeq	r0, #0
   b4c58:	bf1c      	itt	ne
   b4c5a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b4c5e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4c62:	f000 b9dd 	b.w	b5020 <__aeabi_idiv0>
   b4c66:	f1ad 0c08 	sub.w	ip, sp, #8
   b4c6a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b4c6e:	2900      	cmp	r1, #0
   b4c70:	db09      	blt.n	b4c86 <__aeabi_ldivmod+0x42>
   b4c72:	2b00      	cmp	r3, #0
   b4c74:	db1a      	blt.n	b4cac <__aeabi_ldivmod+0x68>
   b4c76:	f000 f86b 	bl	b4d50 <__udivmoddi4>
   b4c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c82:	b004      	add	sp, #16
   b4c84:	4770      	bx	lr
   b4c86:	4240      	negs	r0, r0
   b4c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4c8c:	2b00      	cmp	r3, #0
   b4c8e:	db1b      	blt.n	b4cc8 <__aeabi_ldivmod+0x84>
   b4c90:	f000 f85e 	bl	b4d50 <__udivmoddi4>
   b4c94:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c9c:	b004      	add	sp, #16
   b4c9e:	4240      	negs	r0, r0
   b4ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4ca4:	4252      	negs	r2, r2
   b4ca6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4caa:	4770      	bx	lr
   b4cac:	4252      	negs	r2, r2
   b4cae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4cb2:	f000 f84d 	bl	b4d50 <__udivmoddi4>
   b4cb6:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4cba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4cbe:	b004      	add	sp, #16
   b4cc0:	4240      	negs	r0, r0
   b4cc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4cc6:	4770      	bx	lr
   b4cc8:	4252      	negs	r2, r2
   b4cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4cce:	f000 f83f 	bl	b4d50 <__udivmoddi4>
   b4cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4cda:	b004      	add	sp, #16
   b4cdc:	4252      	negs	r2, r2
   b4cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4ce2:	4770      	bx	lr

000b4ce4 <__aeabi_uldivmod>:
   b4ce4:	b953      	cbnz	r3, b4cfc <__aeabi_uldivmod+0x18>
   b4ce6:	b94a      	cbnz	r2, b4cfc <__aeabi_uldivmod+0x18>
   b4ce8:	2900      	cmp	r1, #0
   b4cea:	bf08      	it	eq
   b4cec:	2800      	cmpeq	r0, #0
   b4cee:	bf1c      	itt	ne
   b4cf0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b4cf4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4cf8:	f000 b992 	b.w	b5020 <__aeabi_idiv0>
   b4cfc:	f1ad 0c08 	sub.w	ip, sp, #8
   b4d00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b4d04:	f000 f824 	bl	b4d50 <__udivmoddi4>
   b4d08:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4d10:	b004      	add	sp, #16
   b4d12:	4770      	bx	lr

000b4d14 <__aeabi_d2ulz>:
   b4d14:	b5d0      	push	{r4, r6, r7, lr}
   b4d16:	4b0c      	ldr	r3, [pc, #48]	; (b4d48 <__aeabi_d2ulz+0x34>)
   b4d18:	2200      	movs	r2, #0
   b4d1a:	4606      	mov	r6, r0
   b4d1c:	460f      	mov	r7, r1
   b4d1e:	f7ff fb3b 	bl	b4398 <__aeabi_dmul>
   b4d22:	f7ff fe11 	bl	b4948 <__aeabi_d2uiz>
   b4d26:	4604      	mov	r4, r0
   b4d28:	f7ff fabc 	bl	b42a4 <__aeabi_ui2d>
   b4d2c:	4b07      	ldr	r3, [pc, #28]	; (b4d4c <__aeabi_d2ulz+0x38>)
   b4d2e:	2200      	movs	r2, #0
   b4d30:	f7ff fb32 	bl	b4398 <__aeabi_dmul>
   b4d34:	4602      	mov	r2, r0
   b4d36:	460b      	mov	r3, r1
   b4d38:	4630      	mov	r0, r6
   b4d3a:	4639      	mov	r1, r7
   b4d3c:	f7ff f974 	bl	b4028 <__aeabi_dsub>
   b4d40:	f7ff fe02 	bl	b4948 <__aeabi_d2uiz>
   b4d44:	4621      	mov	r1, r4
   b4d46:	bdd0      	pop	{r4, r6, r7, pc}
   b4d48:	3df00000 	.word	0x3df00000
   b4d4c:	41f00000 	.word	0x41f00000

000b4d50 <__udivmoddi4>:
   b4d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4d54:	9d08      	ldr	r5, [sp, #32]
   b4d56:	4604      	mov	r4, r0
   b4d58:	468e      	mov	lr, r1
   b4d5a:	2b00      	cmp	r3, #0
   b4d5c:	d14d      	bne.n	b4dfa <__udivmoddi4+0xaa>
   b4d5e:	428a      	cmp	r2, r1
   b4d60:	4694      	mov	ip, r2
   b4d62:	d969      	bls.n	b4e38 <__udivmoddi4+0xe8>
   b4d64:	fab2 f282 	clz	r2, r2
   b4d68:	b152      	cbz	r2, b4d80 <__udivmoddi4+0x30>
   b4d6a:	fa01 f302 	lsl.w	r3, r1, r2
   b4d6e:	f1c2 0120 	rsb	r1, r2, #32
   b4d72:	fa20 f101 	lsr.w	r1, r0, r1
   b4d76:	fa0c fc02 	lsl.w	ip, ip, r2
   b4d7a:	ea41 0e03 	orr.w	lr, r1, r3
   b4d7e:	4094      	lsls	r4, r2
   b4d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b4d84:	0c21      	lsrs	r1, r4, #16
   b4d86:	fbbe f6f8 	udiv	r6, lr, r8
   b4d8a:	fa1f f78c 	uxth.w	r7, ip
   b4d8e:	fb08 e316 	mls	r3, r8, r6, lr
   b4d92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b4d96:	fb06 f107 	mul.w	r1, r6, r7
   b4d9a:	4299      	cmp	r1, r3
   b4d9c:	d90a      	bls.n	b4db4 <__udivmoddi4+0x64>
   b4d9e:	eb1c 0303 	adds.w	r3, ip, r3
   b4da2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b4da6:	f080 811f 	bcs.w	b4fe8 <__udivmoddi4+0x298>
   b4daa:	4299      	cmp	r1, r3
   b4dac:	f240 811c 	bls.w	b4fe8 <__udivmoddi4+0x298>
   b4db0:	3e02      	subs	r6, #2
   b4db2:	4463      	add	r3, ip
   b4db4:	1a5b      	subs	r3, r3, r1
   b4db6:	b2a4      	uxth	r4, r4
   b4db8:	fbb3 f0f8 	udiv	r0, r3, r8
   b4dbc:	fb08 3310 	mls	r3, r8, r0, r3
   b4dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b4dc4:	fb00 f707 	mul.w	r7, r0, r7
   b4dc8:	42a7      	cmp	r7, r4
   b4dca:	d90a      	bls.n	b4de2 <__udivmoddi4+0x92>
   b4dcc:	eb1c 0404 	adds.w	r4, ip, r4
   b4dd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b4dd4:	f080 810a 	bcs.w	b4fec <__udivmoddi4+0x29c>
   b4dd8:	42a7      	cmp	r7, r4
   b4dda:	f240 8107 	bls.w	b4fec <__udivmoddi4+0x29c>
   b4dde:	4464      	add	r4, ip
   b4de0:	3802      	subs	r0, #2
   b4de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b4de6:	1be4      	subs	r4, r4, r7
   b4de8:	2600      	movs	r6, #0
   b4dea:	b11d      	cbz	r5, b4df4 <__udivmoddi4+0xa4>
   b4dec:	40d4      	lsrs	r4, r2
   b4dee:	2300      	movs	r3, #0
   b4df0:	e9c5 4300 	strd	r4, r3, [r5]
   b4df4:	4631      	mov	r1, r6
   b4df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4dfa:	428b      	cmp	r3, r1
   b4dfc:	d909      	bls.n	b4e12 <__udivmoddi4+0xc2>
   b4dfe:	2d00      	cmp	r5, #0
   b4e00:	f000 80ef 	beq.w	b4fe2 <__udivmoddi4+0x292>
   b4e04:	2600      	movs	r6, #0
   b4e06:	e9c5 0100 	strd	r0, r1, [r5]
   b4e0a:	4630      	mov	r0, r6
   b4e0c:	4631      	mov	r1, r6
   b4e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4e12:	fab3 f683 	clz	r6, r3
   b4e16:	2e00      	cmp	r6, #0
   b4e18:	d14a      	bne.n	b4eb0 <__udivmoddi4+0x160>
   b4e1a:	428b      	cmp	r3, r1
   b4e1c:	d302      	bcc.n	b4e24 <__udivmoddi4+0xd4>
   b4e1e:	4282      	cmp	r2, r0
   b4e20:	f200 80f9 	bhi.w	b5016 <__udivmoddi4+0x2c6>
   b4e24:	1a84      	subs	r4, r0, r2
   b4e26:	eb61 0303 	sbc.w	r3, r1, r3
   b4e2a:	2001      	movs	r0, #1
   b4e2c:	469e      	mov	lr, r3
   b4e2e:	2d00      	cmp	r5, #0
   b4e30:	d0e0      	beq.n	b4df4 <__udivmoddi4+0xa4>
   b4e32:	e9c5 4e00 	strd	r4, lr, [r5]
   b4e36:	e7dd      	b.n	b4df4 <__udivmoddi4+0xa4>
   b4e38:	b902      	cbnz	r2, b4e3c <__udivmoddi4+0xec>
   b4e3a:	deff      	udf	#255	; 0xff
   b4e3c:	fab2 f282 	clz	r2, r2
   b4e40:	2a00      	cmp	r2, #0
   b4e42:	f040 8092 	bne.w	b4f6a <__udivmoddi4+0x21a>
   b4e46:	eba1 010c 	sub.w	r1, r1, ip
   b4e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4e4e:	fa1f fe8c 	uxth.w	lr, ip
   b4e52:	2601      	movs	r6, #1
   b4e54:	0c20      	lsrs	r0, r4, #16
   b4e56:	fbb1 f3f7 	udiv	r3, r1, r7
   b4e5a:	fb07 1113 	mls	r1, r7, r3, r1
   b4e5e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4e62:	fb0e f003 	mul.w	r0, lr, r3
   b4e66:	4288      	cmp	r0, r1
   b4e68:	d908      	bls.n	b4e7c <__udivmoddi4+0x12c>
   b4e6a:	eb1c 0101 	adds.w	r1, ip, r1
   b4e6e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b4e72:	d202      	bcs.n	b4e7a <__udivmoddi4+0x12a>
   b4e74:	4288      	cmp	r0, r1
   b4e76:	f200 80cb 	bhi.w	b5010 <__udivmoddi4+0x2c0>
   b4e7a:	4643      	mov	r3, r8
   b4e7c:	1a09      	subs	r1, r1, r0
   b4e7e:	b2a4      	uxth	r4, r4
   b4e80:	fbb1 f0f7 	udiv	r0, r1, r7
   b4e84:	fb07 1110 	mls	r1, r7, r0, r1
   b4e88:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b4e8c:	fb0e fe00 	mul.w	lr, lr, r0
   b4e90:	45a6      	cmp	lr, r4
   b4e92:	d908      	bls.n	b4ea6 <__udivmoddi4+0x156>
   b4e94:	eb1c 0404 	adds.w	r4, ip, r4
   b4e98:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b4e9c:	d202      	bcs.n	b4ea4 <__udivmoddi4+0x154>
   b4e9e:	45a6      	cmp	lr, r4
   b4ea0:	f200 80bb 	bhi.w	b501a <__udivmoddi4+0x2ca>
   b4ea4:	4608      	mov	r0, r1
   b4ea6:	eba4 040e 	sub.w	r4, r4, lr
   b4eaa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b4eae:	e79c      	b.n	b4dea <__udivmoddi4+0x9a>
   b4eb0:	f1c6 0720 	rsb	r7, r6, #32
   b4eb4:	40b3      	lsls	r3, r6
   b4eb6:	fa22 fc07 	lsr.w	ip, r2, r7
   b4eba:	ea4c 0c03 	orr.w	ip, ip, r3
   b4ebe:	fa20 f407 	lsr.w	r4, r0, r7
   b4ec2:	fa01 f306 	lsl.w	r3, r1, r6
   b4ec6:	431c      	orrs	r4, r3
   b4ec8:	40f9      	lsrs	r1, r7
   b4eca:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b4ece:	fa00 f306 	lsl.w	r3, r0, r6
   b4ed2:	fbb1 f8f9 	udiv	r8, r1, r9
   b4ed6:	0c20      	lsrs	r0, r4, #16
   b4ed8:	fa1f fe8c 	uxth.w	lr, ip
   b4edc:	fb09 1118 	mls	r1, r9, r8, r1
   b4ee0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4ee4:	fb08 f00e 	mul.w	r0, r8, lr
   b4ee8:	4288      	cmp	r0, r1
   b4eea:	fa02 f206 	lsl.w	r2, r2, r6
   b4eee:	d90b      	bls.n	b4f08 <__udivmoddi4+0x1b8>
   b4ef0:	eb1c 0101 	adds.w	r1, ip, r1
   b4ef4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b4ef8:	f080 8088 	bcs.w	b500c <__udivmoddi4+0x2bc>
   b4efc:	4288      	cmp	r0, r1
   b4efe:	f240 8085 	bls.w	b500c <__udivmoddi4+0x2bc>
   b4f02:	f1a8 0802 	sub.w	r8, r8, #2
   b4f06:	4461      	add	r1, ip
   b4f08:	1a09      	subs	r1, r1, r0
   b4f0a:	b2a4      	uxth	r4, r4
   b4f0c:	fbb1 f0f9 	udiv	r0, r1, r9
   b4f10:	fb09 1110 	mls	r1, r9, r0, r1
   b4f14:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b4f18:	fb00 fe0e 	mul.w	lr, r0, lr
   b4f1c:	458e      	cmp	lr, r1
   b4f1e:	d908      	bls.n	b4f32 <__udivmoddi4+0x1e2>
   b4f20:	eb1c 0101 	adds.w	r1, ip, r1
   b4f24:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b4f28:	d26c      	bcs.n	b5004 <__udivmoddi4+0x2b4>
   b4f2a:	458e      	cmp	lr, r1
   b4f2c:	d96a      	bls.n	b5004 <__udivmoddi4+0x2b4>
   b4f2e:	3802      	subs	r0, #2
   b4f30:	4461      	add	r1, ip
   b4f32:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b4f36:	fba0 9402 	umull	r9, r4, r0, r2
   b4f3a:	eba1 010e 	sub.w	r1, r1, lr
   b4f3e:	42a1      	cmp	r1, r4
   b4f40:	46c8      	mov	r8, r9
   b4f42:	46a6      	mov	lr, r4
   b4f44:	d356      	bcc.n	b4ff4 <__udivmoddi4+0x2a4>
   b4f46:	d053      	beq.n	b4ff0 <__udivmoddi4+0x2a0>
   b4f48:	b15d      	cbz	r5, b4f62 <__udivmoddi4+0x212>
   b4f4a:	ebb3 0208 	subs.w	r2, r3, r8
   b4f4e:	eb61 010e 	sbc.w	r1, r1, lr
   b4f52:	fa01 f707 	lsl.w	r7, r1, r7
   b4f56:	fa22 f306 	lsr.w	r3, r2, r6
   b4f5a:	40f1      	lsrs	r1, r6
   b4f5c:	431f      	orrs	r7, r3
   b4f5e:	e9c5 7100 	strd	r7, r1, [r5]
   b4f62:	2600      	movs	r6, #0
   b4f64:	4631      	mov	r1, r6
   b4f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4f6a:	f1c2 0320 	rsb	r3, r2, #32
   b4f6e:	40d8      	lsrs	r0, r3
   b4f70:	fa0c fc02 	lsl.w	ip, ip, r2
   b4f74:	fa21 f303 	lsr.w	r3, r1, r3
   b4f78:	4091      	lsls	r1, r2
   b4f7a:	4301      	orrs	r1, r0
   b4f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4f80:	fa1f fe8c 	uxth.w	lr, ip
   b4f84:	fbb3 f0f7 	udiv	r0, r3, r7
   b4f88:	fb07 3610 	mls	r6, r7, r0, r3
   b4f8c:	0c0b      	lsrs	r3, r1, #16
   b4f8e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4f92:	fb00 f60e 	mul.w	r6, r0, lr
   b4f96:	429e      	cmp	r6, r3
   b4f98:	fa04 f402 	lsl.w	r4, r4, r2
   b4f9c:	d908      	bls.n	b4fb0 <__udivmoddi4+0x260>
   b4f9e:	eb1c 0303 	adds.w	r3, ip, r3
   b4fa2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b4fa6:	d22f      	bcs.n	b5008 <__udivmoddi4+0x2b8>
   b4fa8:	429e      	cmp	r6, r3
   b4faa:	d92d      	bls.n	b5008 <__udivmoddi4+0x2b8>
   b4fac:	3802      	subs	r0, #2
   b4fae:	4463      	add	r3, ip
   b4fb0:	1b9b      	subs	r3, r3, r6
   b4fb2:	b289      	uxth	r1, r1
   b4fb4:	fbb3 f6f7 	udiv	r6, r3, r7
   b4fb8:	fb07 3316 	mls	r3, r7, r6, r3
   b4fbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b4fc0:	fb06 f30e 	mul.w	r3, r6, lr
   b4fc4:	428b      	cmp	r3, r1
   b4fc6:	d908      	bls.n	b4fda <__udivmoddi4+0x28a>
   b4fc8:	eb1c 0101 	adds.w	r1, ip, r1
   b4fcc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b4fd0:	d216      	bcs.n	b5000 <__udivmoddi4+0x2b0>
   b4fd2:	428b      	cmp	r3, r1
   b4fd4:	d914      	bls.n	b5000 <__udivmoddi4+0x2b0>
   b4fd6:	3e02      	subs	r6, #2
   b4fd8:	4461      	add	r1, ip
   b4fda:	1ac9      	subs	r1, r1, r3
   b4fdc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b4fe0:	e738      	b.n	b4e54 <__udivmoddi4+0x104>
   b4fe2:	462e      	mov	r6, r5
   b4fe4:	4628      	mov	r0, r5
   b4fe6:	e705      	b.n	b4df4 <__udivmoddi4+0xa4>
   b4fe8:	4606      	mov	r6, r0
   b4fea:	e6e3      	b.n	b4db4 <__udivmoddi4+0x64>
   b4fec:	4618      	mov	r0, r3
   b4fee:	e6f8      	b.n	b4de2 <__udivmoddi4+0x92>
   b4ff0:	454b      	cmp	r3, r9
   b4ff2:	d2a9      	bcs.n	b4f48 <__udivmoddi4+0x1f8>
   b4ff4:	ebb9 0802 	subs.w	r8, r9, r2
   b4ff8:	eb64 0e0c 	sbc.w	lr, r4, ip
   b4ffc:	3801      	subs	r0, #1
   b4ffe:	e7a3      	b.n	b4f48 <__udivmoddi4+0x1f8>
   b5000:	4646      	mov	r6, r8
   b5002:	e7ea      	b.n	b4fda <__udivmoddi4+0x28a>
   b5004:	4620      	mov	r0, r4
   b5006:	e794      	b.n	b4f32 <__udivmoddi4+0x1e2>
   b5008:	4640      	mov	r0, r8
   b500a:	e7d1      	b.n	b4fb0 <__udivmoddi4+0x260>
   b500c:	46d0      	mov	r8, sl
   b500e:	e77b      	b.n	b4f08 <__udivmoddi4+0x1b8>
   b5010:	3b02      	subs	r3, #2
   b5012:	4461      	add	r1, ip
   b5014:	e732      	b.n	b4e7c <__udivmoddi4+0x12c>
   b5016:	4630      	mov	r0, r6
   b5018:	e709      	b.n	b4e2e <__udivmoddi4+0xde>
   b501a:	4464      	add	r4, ip
   b501c:	3802      	subs	r0, #2
   b501e:	e742      	b.n	b4ea6 <__udivmoddi4+0x156>

000b5020 <__aeabi_idiv0>:
   b5020:	4770      	bx	lr
   b5022:	bf00      	nop

000b5024 <strlen>:
   b5024:	4603      	mov	r3, r0
   b5026:	f813 2b01 	ldrb.w	r2, [r3], #1
   b502a:	2a00      	cmp	r2, #0
   b502c:	d1fb      	bne.n	b5026 <strlen+0x2>
   b502e:	1a18      	subs	r0, r3, r0
   b5030:	3801      	subs	r0, #1
   b5032:	4770      	bx	lr

000b5034 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b5034:	4809      	ldr	r0, [pc, #36]	; (b505c <module_user_pre_init+0x28>)
   b5036:	490a      	ldr	r1, [pc, #40]	; (b5060 <module_user_pre_init+0x2c>)
   b5038:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b503a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b503c:	d005      	beq.n	b504a <module_user_pre_init+0x16>
   b503e:	4a09      	ldr	r2, [pc, #36]	; (b5064 <module_user_pre_init+0x30>)
   b5040:	4282      	cmp	r2, r0
   b5042:	d002      	beq.n	b504a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b5044:	1a12      	subs	r2, r2, r0
   b5046:	f003 ff2b 	bl	b8ea0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b504a:	4807      	ldr	r0, [pc, #28]	; (b5068 <module_user_pre_init+0x34>)
   b504c:	4a07      	ldr	r2, [pc, #28]	; (b506c <module_user_pre_init+0x38>)
   b504e:	2100      	movs	r1, #0
   b5050:	1a12      	subs	r2, r2, r0
   b5052:	f003 ff33 	bl	b8ebc <memset>
    return &link_global_data_start;
}
   b5056:	4801      	ldr	r0, [pc, #4]	; (b505c <module_user_pre_init+0x28>)
   b5058:	bd08      	pop	{r3, pc}
   b505a:	bf00      	nop
   b505c:	2003e404 	.word	0x2003e404
   b5060:	000ba2cc 	.word	0x000ba2cc
   b5064:	2003e608 	.word	0x2003e608
   b5068:	2003e608 	.word	0x2003e608
   b506c:	2003e7f0 	.word	0x2003e7f0

000b5070 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b5070:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b5072:	4e07      	ldr	r6, [pc, #28]	; (b5090 <module_user_init+0x20>)
   b5074:	4c07      	ldr	r4, [pc, #28]	; (b5094 <module_user_init+0x24>)
    module_user_init_hook();
   b5076:	f002 fd53 	bl	b7b20 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b507a:	1ba4      	subs	r4, r4, r6
   b507c:	08a4      	lsrs	r4, r4, #2
   b507e:	2500      	movs	r5, #0
   b5080:	42ac      	cmp	r4, r5
   b5082:	d100      	bne.n	b5086 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b5084:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b5086:	f856 3b04 	ldr.w	r3, [r6], #4
   b508a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b508c:	3501      	adds	r5, #1
   b508e:	e7f7      	b.n	b5080 <module_user_init+0x10>
   b5090:	000ba278 	.word	0x000ba278
   b5094:	000ba2a0 	.word	0x000ba2a0

000b5098 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b5098:	f000 b824 	b.w	b50e4 <setup>

000b509c <module_user_loop>:
}

void module_user_loop() {
   b509c:	b508      	push	{r3, lr}
    loop();
   b509e:	f000 f85f 	bl	b5160 <loop>
    _post_loop();
}
   b50a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b50a6:	f002 bcf3 	b.w	b7a90 <_post_loop>

000b50aa <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b50aa:	f001 ba67 	b.w	b657c <malloc>

000b50ae <_Znaj>:
   b50ae:	f001 ba65 	b.w	b657c <malloc>

000b50b2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b50b2:	f001 ba6b 	b.w	b658c <free>

000b50b6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b50b6:	7800      	ldrb	r0, [r0, #0]
   b50b8:	fab0 f080 	clz	r0, r0
   b50bc:	0940      	lsrs	r0, r0, #5
   b50be:	4770      	bx	lr

000b50c0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b50c0:	2301      	movs	r3, #1
   b50c2:	7003      	strb	r3, [r0, #0]
   b50c4:	4770      	bx	lr
	...

000b50c8 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b50c8:	b513      	push	{r0, r1, r4, lr}
   b50ca:	4b05      	ldr	r3, [pc, #20]	; (b50e0 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b50cc:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b50ce:	f88d 3000 	strb.w	r3, [sp]
   b50d2:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b50d4:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b50d6:	f001 fbff 	bl	b68d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b50da:	4620      	mov	r0, r4
   b50dc:	b002      	add	sp, #8
   b50de:	bd10      	pop	{r4, pc}
   b50e0:	2003e60c 	.word	0x2003e60c

000b50e4 <setup>:

unsigned long prevlightms = 0;
const long  lightInterval = 60000;
unsigned long lightms;
// setup() runs once, when the device is first turned on.
void setup() {
   b50e4:	b538      	push	{r3, r4, r5, lr}
  // Put initialization like pinMode and begin functions here.

  light = false;
   b50e6:	4b0f      	ldr	r3, [pc, #60]	; (b5124 <setup+0x40>)
  bme.begin();
  oled.begin();
   b50e8:	4c0f      	ldr	r4, [pc, #60]	; (b5128 <setup+0x44>)
  bme.begin();
   b50ea:	4810      	ldr	r0, [pc, #64]	; (b512c <setup+0x48>)
  light = false;
   b50ec:	2500      	movs	r5, #0
   b50ee:	701d      	strb	r5, [r3, #0]
  bme.begin();
   b50f0:	f000 fefc 	bl	b5eec <_ZN6BME2805beginEv>
  oled.begin();
   b50f4:	4620      	mov	r0, r4
   b50f6:	f000 fa6b 	bl	b55d0 <_ZN9MicroOLED5beginEv>

    //oled.pixel(LCDWIDTH/2, LCDHEIGHT/2); // Add a pixel to the display buffer.
  oled.display(); // Draw whatever is in the display buffer.
   b50fa:	4620      	mov	r0, r4
   b50fc:	f000 f9f2 	bl	b54e4 <_ZN9MicroOLED7displayEv>
  delay(3000);
   b5100:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5104:	f001 fa82 	bl	b660c <delay>
  oled.clear(PAGE);
   b5108:	4629      	mov	r1, r5
   b510a:	4620      	mov	r0, r4
   b510c:	f000 f9c8 	bl	b54a0 <_ZN9MicroOLED5clearEh>
  oled.clear(ALL);
   b5110:	4620      	mov	r0, r4
   b5112:	2101      	movs	r1, #1
   b5114:	f000 f9c4 	bl	b54a0 <_ZN9MicroOLED5clearEh>
  oled.setFontType(0);
   b5118:	4629      	mov	r1, r5
   b511a:	4620      	mov	r0, r4

}
   b511c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  oled.setFontType(0);
   b5120:	f000 ba32 	b.w	b5588 <_ZN9MicroOLED11setFontTypeEh>
   b5124:	2003e648 	.word	0x2003e648
   b5128:	2003e650 	.word	0x2003e650
   b512c:	2003e614 	.word	0x2003e614

000b5130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5130:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5132:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5134:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5136:	b17c      	cbz	r4, b5158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5138:	6863      	ldr	r3, [r4, #4]
   b513a:	3b01      	subs	r3, #1
   b513c:	6063      	str	r3, [r4, #4]
   b513e:	b95b      	cbnz	r3, b5158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5140:	6823      	ldr	r3, [r4, #0]
   b5142:	4620      	mov	r0, r4
   b5144:	689b      	ldr	r3, [r3, #8]
   b5146:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5148:	68a3      	ldr	r3, [r4, #8]
   b514a:	3b01      	subs	r3, #1
   b514c:	60a3      	str	r3, [r4, #8]
   b514e:	b91b      	cbnz	r3, b5158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5150:	6823      	ldr	r3, [r4, #0]
   b5152:	4620      	mov	r0, r4
   b5154:	68db      	ldr	r3, [r3, #12]
   b5156:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5158:	4628      	mov	r0, r5
   b515a:	bd38      	pop	{r3, r4, r5, pc}
   b515c:	0000      	movs	r0, r0
	...

000b5160 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b5160:	b530      	push	{r4, r5, lr}
   b5162:	b099      	sub	sp, #100	; 0x64

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5164:	f000 fff6 	bl	b6154 <HAL_Timer_Get_Milli_Seconds>
  // The core of your code will likely live here.


    lightms = millis();
   b5168:	4b71      	ldr	r3, [pc, #452]	; (b5330 <loop+0x1d0>)
    if(lightms - prevlightms >= lightInterval) {
   b516a:	4a72      	ldr	r2, [pc, #456]	; (b5334 <loop+0x1d4>)
    lightms = millis();
   b516c:	6018      	str	r0, [r3, #0]
    if(lightms - prevlightms >= lightInterval) {
   b516e:	6813      	ldr	r3, [r2, #0]
   b5170:	f64e 215f 	movw	r1, #59999	; 0xea5f
   b5174:	1ac3      	subs	r3, r0, r3
   b5176:	428b      	cmp	r3, r1
   b5178:	d95c      	bls.n	b5234 <loop+0xd4>
        //digitalWrite(LED_PIN, HIGH);
        prevlightms = lightms;
        analogvalue = analogRead(photosensor);
   b517a:	4b6f      	ldr	r3, [pc, #444]	; (b5338 <loop+0x1d8>)
        prevlightms = lightms;
   b517c:	6010      	str	r0, [r2, #0]
        analogvalue = analogRead(photosensor);
   b517e:	8818      	ldrh	r0, [r3, #0]
   b5180:	4d6e      	ldr	r5, [pc, #440]	; (b533c <loop+0x1dc>)
   b5182:	4c6f      	ldr	r4, [pc, #444]	; (b5340 <loop+0x1e0>)
   b5184:	f002 fd66 	bl	b7c54 <analogRead>
        if (analogvalue>100 && light == false) {
   b5188:	2864      	cmp	r0, #100	; 0x64
   b518a:	7823      	ldrb	r3, [r4, #0]
        analogvalue = analogRead(photosensor);
   b518c:	6028      	str	r0, [r5, #0]
        if (analogvalue>100 && light == false) {
   b518e:	f340 80b9 	ble.w	b5304 <loop+0x1a4>
   b5192:	b94b      	cbnz	r3, b51a8 <loop+0x48>
        
           Particle.publish("Lights", "ON");
   b5194:	4a6b      	ldr	r2, [pc, #428]	; (b5344 <loop+0x1e4>)
   b5196:	496c      	ldr	r1, [pc, #432]	; (b5348 <loop+0x1e8>)
   b5198:	a814      	add	r0, sp, #80	; 0x50
   b519a:	f7ff ff95 	bl	b50c8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b519e:	a815      	add	r0, sp, #84	; 0x54
   b51a0:	f7ff ffc6 	bl	b5130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
           light = true;
   b51a4:	2301      	movs	r3, #1
        }
        else if (analogvalue<=100 && light == true){
           Particle.publish("Lights", "OFF");
           light = false;
   b51a6:	7023      	strb	r3, [r4, #0]
        }

        Particle.publish("Level", String(analogvalue));
   b51a8:	6829      	ldr	r1, [r5, #0]
        voltage = analogRead(BATT) * 0.0011224 * 0.89;
   b51aa:	4c68      	ldr	r4, [pc, #416]	; (b534c <loop+0x1ec>)
        Particle.publish("Level", String(analogvalue));
   b51ac:	220a      	movs	r2, #10
   b51ae:	a814      	add	r0, sp, #80	; 0x50
   b51b0:	f002 fa6f 	bl	b7692 <_ZN6StringC1Eih>
   b51b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b51b6:	4966      	ldr	r1, [pc, #408]	; (b5350 <loop+0x1f0>)
   b51b8:	a810      	add	r0, sp, #64	; 0x40
   b51ba:	f7ff ff85 	bl	b50c8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b51be:	a811      	add	r0, sp, #68	; 0x44
   b51c0:	f7ff ffb6 	bl	b5130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b51c4:	a814      	add	r0, sp, #80	; 0x50
   b51c6:	f002 f9d9 	bl	b757c <_ZN6StringD1Ev>
        voltage = analogRead(BATT) * 0.0011224 * 0.89;
   b51ca:	2021      	movs	r0, #33	; 0x21
   b51cc:	f002 fd42 	bl	b7c54 <analogRead>
   b51d0:	f7ff f878 	bl	b42c4 <__aeabi_i2d>
   b51d4:	a352      	add	r3, pc, #328	; (adr r3, b5320 <loop+0x1c0>)
   b51d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b51da:	f7ff f8dd 	bl	b4398 <__aeabi_dmul>
   b51de:	a352      	add	r3, pc, #328	; (adr r3, b5328 <loop+0x1c8>)
   b51e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b51e4:	f7ff f8d8 	bl	b4398 <__aeabi_dmul>
   b51e8:	f7ff fbce 	bl	b4988 <__aeabi_d2f>

        Particle.publish("Batt", String(voltage));
   b51ec:	2106      	movs	r1, #6
        voltage = analogRead(BATT) * 0.0011224 * 0.89;
   b51ee:	ee00 0a10 	vmov	s0, r0
   b51f2:	6020      	str	r0, [r4, #0]
        Particle.publish("Batt", String(voltage));
   b51f4:	a814      	add	r0, sp, #80	; 0x50
   b51f6:	f002 fa5f 	bl	b76b8 <_ZN6StringC1Efi>
   b51fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b51fc:	4955      	ldr	r1, [pc, #340]	; (b5354 <loop+0x1f4>)
   b51fe:	a810      	add	r0, sp, #64	; 0x40
   b5200:	f7ff ff62 	bl	b50c8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b5204:	a811      	add	r0, sp, #68	; 0x44
   b5206:	f7ff ff93 	bl	b5130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b520a:	a814      	add	r0, sp, #80	; 0x50
   b520c:	f002 f9b6 	bl	b757c <_ZN6StringD1Ev>
        oled.clear(PAGE);
   b5210:	4851      	ldr	r0, [pc, #324]	; (b5358 <loop+0x1f8>)
   b5212:	2100      	movs	r1, #0
   b5214:	f000 f944 	bl	b54a0 <_ZN9MicroOLED5clearEh>
        oled.setCursor(0, 0);
   b5218:	2200      	movs	r2, #0
   b521a:	4611      	mov	r1, r2
   b521c:	484e      	ldr	r0, [pc, #312]	; (b5358 <loop+0x1f8>)
   b521e:	f000 f983 	bl	b5528 <_ZN9MicroOLED9setCursorEhh>
        oled.print(voltage);
   b5222:	ed94 0a00 	vldr	s0, [r4]
   b5226:	484c      	ldr	r0, [pc, #304]	; (b5358 <loop+0x1f8>)
   b5228:	2102      	movs	r1, #2
   b522a:	f001 ffcf 	bl	b71cc <_ZN5Print5printEfi>
        oled.display();
   b522e:	484a      	ldr	r0, [pc, #296]	; (b5358 <loop+0x1f8>)
   b5230:	f000 f958 	bl	b54e4 <_ZN9MicroOLED7displayEv>
   b5234:	f000 ff8e 	bl	b6154 <HAL_Timer_Get_Milli_Seconds>
    }
    
    BMEms = millis();
   b5238:	4b48      	ldr	r3, [pc, #288]	; (b535c <loop+0x1fc>)
    if(BMEms - prevBMEms >= BMEInterval) {
   b523a:	4a49      	ldr	r2, [pc, #292]	; (b5360 <loop+0x200>)
    BMEms = millis();
   b523c:	6018      	str	r0, [r3, #0]
    if(BMEms - prevBMEms >= BMEInterval) {
   b523e:	6813      	ldr	r3, [r2, #0]
   b5240:	f64e 215f 	movw	r1, #59999	; 0xea5f
   b5244:	1ac3      	subs	r3, r0, r3
   b5246:	428b      	cmp	r3, r1
   b5248:	d95a      	bls.n	b5300 <loop+0x1a0>
        
        prevBMEms = BMEms;
   b524a:	6010      	str	r0, [r2, #0]
        
        float currentTempC = bme.readTempC();
   b524c:	4845      	ldr	r0, [pc, #276]	; (b5364 <loop+0x204>)
   b524e:	f000 fe15 	bl	b5e7c <_ZN6BME2809readTempCEv>

        String altitude = String(bme.readFloatAltitudeMeters(), 2);
   b5252:	4844      	ldr	r0, [pc, #272]	; (b5364 <loop+0x204>)
   b5254:	f000 fd9c 	bl	b5d90 <_ZN6BME28023readFloatAltitudeMetersEv>
   b5258:	2102      	movs	r1, #2
   b525a:	4668      	mov	r0, sp
   b525c:	f002 fa2c 	bl	b76b8 <_ZN6StringC1Efi>
        String tempC = String(bme.readTempC(), 2);
   b5260:	4840      	ldr	r0, [pc, #256]	; (b5364 <loop+0x204>)
   b5262:	f000 fe0b 	bl	b5e7c <_ZN6BME2809readTempCEv>
   b5266:	2102      	movs	r1, #2
   b5268:	a804      	add	r0, sp, #16
   b526a:	f002 fa25 	bl	b76b8 <_ZN6StringC1Efi>
        //String tempF = String(bme.readTempF(), 2);
        String pressure = String(bme.readFloatPressure(), 2);
   b526e:	483d      	ldr	r0, [pc, #244]	; (b5364 <loop+0x204>)
   b5270:	f000 fcb8 	bl	b5be4 <_ZN6BME28017readFloatPressureEv>
   b5274:	2102      	movs	r1, #2
   b5276:	a808      	add	r0, sp, #32
   b5278:	f002 fa1e 	bl	b76b8 <_ZN6StringC1Efi>
        String humidity = String(bme.readFloatHumidity(), 2);
   b527c:	4839      	ldr	r0, [pc, #228]	; (b5364 <loop+0x204>)
   b527e:	f000 fdb7 	bl	b5df0 <_ZN6BME28017readFloatHumidityEv>
   b5282:	2102      	movs	r1, #2
   b5284:	a80c      	add	r0, sp, #48	; 0x30
   b5286:	f002 fa17 	bl	b76b8 <_ZN6StringC1Efi>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b528a:	4937      	ldr	r1, [pc, #220]	; (b5368 <loop+0x208>)
   b528c:	a814      	add	r0, sp, #80	; 0x50
   b528e:	f002 f9c0 	bl	b7612 <_ZN6StringC1EPK19__FlashStringHelper>
        String jsonBMEData = "{\"temp\": "+tempC+", \"hum\": "+humidity+", \"pressure\": "+pressure+", \"altitude\": "+altitude+"}";
   b5292:	a904      	add	r1, sp, #16
   b5294:	a814      	add	r0, sp, #80	; 0x50
   b5296:	f002 fa40 	bl	b771a <_ZplRK15StringSumHelperRK6String>
   b529a:	4934      	ldr	r1, [pc, #208]	; (b536c <loop+0x20c>)
   b529c:	f002 fa49 	bl	b7732 <_ZplRK15StringSumHelperPKc>
   b52a0:	a90c      	add	r1, sp, #48	; 0x30
   b52a2:	f002 fa3a 	bl	b771a <_ZplRK15StringSumHelperRK6String>
   b52a6:	4932      	ldr	r1, [pc, #200]	; (b5370 <loop+0x210>)
   b52a8:	f002 fa43 	bl	b7732 <_ZplRK15StringSumHelperPKc>
   b52ac:	a908      	add	r1, sp, #32
   b52ae:	f002 fa34 	bl	b771a <_ZplRK15StringSumHelperRK6String>
   b52b2:	4930      	ldr	r1, [pc, #192]	; (b5374 <loop+0x214>)
   b52b4:	f002 fa3d 	bl	b7732 <_ZplRK15StringSumHelperPKc>
   b52b8:	4669      	mov	r1, sp
   b52ba:	f002 fa2e 	bl	b771a <_ZplRK15StringSumHelperRK6String>
   b52be:	492e      	ldr	r1, [pc, #184]	; (b5378 <loop+0x218>)
   b52c0:	f002 fa37 	bl	b7732 <_ZplRK15StringSumHelperPKc>
   b52c4:	4601      	mov	r1, r0
   b52c6:	a810      	add	r0, sp, #64	; 0x40
   b52c8:	f002 f9c6 	bl	b7658 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   b52cc:	a814      	add	r0, sp, #80	; 0x50
   b52ce:	f002 f955 	bl	b757c <_ZN6StringD1Ev>
        Particle.publish("BMEData", jsonBMEData);
   b52d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b52d4:	4929      	ldr	r1, [pc, #164]	; (b537c <loop+0x21c>)
   b52d6:	a814      	add	r0, sp, #80	; 0x50
   b52d8:	f7ff fef6 	bl	b50c8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b52dc:	a815      	add	r0, sp, #84	; 0x54
   b52de:	f7ff ff27 	bl	b5130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        String jsonBMEData = "{\"temp\": "+tempC+", \"hum\": "+humidity+", \"pressure\": "+pressure+", \"altitude\": "+altitude+"}";
   b52e2:	a810      	add	r0, sp, #64	; 0x40
   b52e4:	f002 f94a 	bl	b757c <_ZN6StringD1Ev>
        String humidity = String(bme.readFloatHumidity(), 2);
   b52e8:	a80c      	add	r0, sp, #48	; 0x30
   b52ea:	f002 f947 	bl	b757c <_ZN6StringD1Ev>
        String pressure = String(bme.readFloatPressure(), 2);
   b52ee:	a808      	add	r0, sp, #32
   b52f0:	f002 f944 	bl	b757c <_ZN6StringD1Ev>
        String tempC = String(bme.readTempC(), 2);
   b52f4:	a804      	add	r0, sp, #16
   b52f6:	f002 f941 	bl	b757c <_ZN6StringD1Ev>
        String altitude = String(bme.readFloatAltitudeMeters(), 2);
   b52fa:	4668      	mov	r0, sp
   b52fc:	f002 f93e 	bl	b757c <_ZN6StringD1Ev>
        
    }

   b5300:	b019      	add	sp, #100	; 0x64
   b5302:	bd30      	pop	{r4, r5, pc}
        else if (analogvalue<=100 && light == true){
   b5304:	2b00      	cmp	r3, #0
   b5306:	f43f af4f 	beq.w	b51a8 <loop+0x48>
           Particle.publish("Lights", "OFF");
   b530a:	4a1d      	ldr	r2, [pc, #116]	; (b5380 <loop+0x220>)
   b530c:	490e      	ldr	r1, [pc, #56]	; (b5348 <loop+0x1e8>)
   b530e:	a814      	add	r0, sp, #80	; 0x50
   b5310:	f7ff feda 	bl	b50c8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b5314:	a815      	add	r0, sp, #84	; 0x54
   b5316:	f7ff ff0b 	bl	b5130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
           light = false;
   b531a:	2300      	movs	r3, #0
   b531c:	e743      	b.n	b51a6 <loop+0x46>
   b531e:	bf00      	nop
   b5320:	d2c10294 	.word	0xd2c10294
   b5324:	3f5263af 	.word	0x3f5263af
   b5328:	47ae147b 	.word	0x47ae147b
   b532c:	3fec7ae1 	.word	0x3fec7ae1
   b5330:	2003e64c 	.word	0x2003e64c
   b5334:	2003e6a0 	.word	0x2003e6a0
   b5338:	2003e404 	.word	0x2003e404
   b533c:	2003e610 	.word	0x2003e610
   b5340:	2003e648 	.word	0x2003e648
   b5344:	000b9054 	.word	0x000b9054
   b5348:	000b9057 	.word	0x000b9057
   b534c:	2003e6a4 	.word	0x2003e6a4
   b5350:	000b9062 	.word	0x000b9062
   b5354:	000b9068 	.word	0x000b9068
   b5358:	2003e650 	.word	0x2003e650
   b535c:	2003e608 	.word	0x2003e608
   b5360:	2003e69c 	.word	0x2003e69c
   b5364:	2003e614 	.word	0x2003e614
   b5368:	000b906d 	.word	0x000b906d
   b536c:	000b9077 	.word	0x000b9077
   b5370:	000b9081 	.word	0x000b9081
   b5374:	000b9090 	.word	0x000b9090
   b5378:	000b909f 	.word	0x000b909f
   b537c:	000b90a1 	.word	0x000b90a1
   b5380:	000b905e 	.word	0x000b905e

000b5384 <_GLOBAL__sub_I_photosensor>:
   b5384:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5386:	4b07      	ldr	r3, [pc, #28]	; (b53a4 <_GLOBAL__sub_I_photosensor+0x20>)
BME280 bme;
   b5388:	4807      	ldr	r0, [pc, #28]	; (b53a8 <_GLOBAL__sub_I_photosensor+0x24>)
   b538a:	2200      	movs	r2, #0
   b538c:	701a      	strb	r2, [r3, #0]
   b538e:	f000 fba9 	bl	b5ae4 <_ZN6BME280C1Ev>
   b5392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
MicroOLED oled(OLED_RESET, OLED_DC, OLED_CS);
   b5396:	4805      	ldr	r0, [pc, #20]	; (b53ac <_GLOBAL__sub_I_photosensor+0x28>)
   b5398:	2310      	movs	r3, #16
   b539a:	220e      	movs	r2, #14
   b539c:	210f      	movs	r1, #15
   b539e:	f000 b80f 	b.w	b53c0 <_ZN9MicroOLEDC1Ehhh>
   b53a2:	bf00      	nop
   b53a4:	2003e60c 	.word	0x2003e60c
   b53a8:	2003e614 	.word	0x2003e614
   b53ac:	2003e650 	.word	0x2003e650

000b53b0 <_ZN9MicroOLEDD1Ev>:
	MODE_SPI,
	MODE_I2C,
	MODE_PARALLEL
} micro_oled_mode;

class MicroOLED : public Print{
   b53b0:	4770      	bx	lr

000b53b2 <_ZN9MicroOLEDD0Ev>:
   b53b2:	b510      	push	{r4, lr}
   b53b4:	214c      	movs	r1, #76	; 0x4c
   b53b6:	4604      	mov	r4, r0
   b53b8:	f7ff fe7b 	bl	b50b2 <_ZdlPvj>
   b53bc:	4620      	mov	r0, r4
   b53be:	bd10      	pop	{r4, pc}

000b53c0 <_ZN9MicroOLEDC1Ehhh>:
/** \brief MicroOLED Constructor -- SPI Mode

	Setup the MicroOLED class, configure the display to be controlled via a
	SPI interface.
*/
MicroOLED::MicroOLED(uint8_t rst, uint8_t dc, uint8_t cs)
   b53c0:	b570      	push	{r4, r5, r6, lr}
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b53c2:	2500      	movs	r5, #0
   b53c4:	4e04      	ldr	r6, [pc, #16]	; (b53d8 <_ZN9MicroOLEDC1Ehhh+0x18>)
   b53c6:	6045      	str	r5, [r0, #4]
   b53c8:	6006      	str	r6, [r0, #0]
{
	// Assign each of the parameters to a private class variable.
	rstPin = rst;
   b53ca:	7281      	strb	r1, [r0, #10]
	dcPin = dc;
   b53cc:	7242      	strb	r2, [r0, #9]
	csPin = cs;
   b53ce:	7203      	strb	r3, [r0, #8]
	interface = MODE_SPI;	// Set interface mode to SPI
   b53d0:	f880 502a 	strb.w	r5, [r0, #42]	; 0x2a
}
   b53d4:	bd70      	pop	{r4, r5, r6, pc}
   b53d6:	bf00      	nop
   b53d8:	000b9fe0 	.word	0x000b9fe0

000b53dc <_ZN9MicroOLED7commandEh>:
    Send a command via SPI, I2C or parallel	to SSD1306 controller.
	For SPI we set the DC and CS pins here, and call spiTransfer(byte)
	to send the data. For I2C and Parallel we use the write functions
	defined in hardware.cpp to send the data.
*/
void MicroOLED::command(uint8_t c) {
   b53dc:	b513      	push	{r0, r1, r4, lr}

	if (interface == MODE_SPI)
   b53de:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
void MicroOLED::command(uint8_t c) {
   b53e2:	4604      	mov	r4, r0
   b53e4:	460b      	mov	r3, r1
	if (interface == MODE_SPI)
   b53e6:	b962      	cbnz	r2, b5402 <_ZN9MicroOLED7commandEh+0x26>
   b53e8:	9101      	str	r1, [sp, #4]
	{
		digitalWrite(dcPin, LOW);;	// DC pin LOW for a command
   b53ea:	7a40      	ldrb	r0, [r0, #9]
   b53ec:	4611      	mov	r1, r2
   b53ee:	f002 fc18 	bl	b7c22 <digitalWrite>
		spiTransfer(c);			// Transfer the command byte
   b53f2:	9b01      	ldr	r3, [sp, #4]
   b53f4:	4620      	mov	r0, r4
   b53f6:	4619      	mov	r1, r3
	else if (interface == MODE_PARALLEL)
	{
		// Write the byte to our parallel interface. Set DC LOW.
		parallelWrite(c, LOW);
	}
}
   b53f8:	b002      	add	sp, #8
   b53fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		spiTransfer(c);			// Transfer the command byte
   b53fe:	f000 bb27 	b.w	b5a50 <_ZN9MicroOLED11spiTransferEh>
	else if (interface == MODE_I2C)
   b5402:	2a01      	cmp	r2, #1
   b5404:	d107      	bne.n	b5416 <_ZN9MicroOLED7commandEh+0x3a>
		i2cWrite(i2c_address, I2C_COMMAND, c);
   b5406:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
   b540a:	2200      	movs	r2, #0
}
   b540c:	b002      	add	sp, #8
   b540e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		i2cWrite(i2c_address, I2C_COMMAND, c);
   b5412:	f000 ba92 	b.w	b593a <_ZN9MicroOLED8i2cWriteEhhh>
	else if (interface == MODE_PARALLEL)
   b5416:	2a02      	cmp	r2, #2
   b5418:	d105      	bne.n	b5426 <_ZN9MicroOLED7commandEh+0x4a>
		parallelWrite(c, LOW);
   b541a:	2200      	movs	r2, #0
}
   b541c:	b002      	add	sp, #8
   b541e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		parallelWrite(c, LOW);
   b5422:	f000 bacf 	b.w	b59c4 <_ZN9MicroOLED13parallelWriteEhh>
}
   b5426:	b002      	add	sp, #8
   b5428:	bd10      	pop	{r4, pc}

000b542a <_ZN9MicroOLED4dataEh>:
    Send a data byte via SPI, I2C or parallel to SSD1306 controller.
	For SPI we set the DC and CS pins here, and call spiTransfer(byte)
	to send the data. For I2C and Parallel we use the write functions
	defined in hardware.cpp to send the data.
*/
void MicroOLED::data(uint8_t c) {
   b542a:	b513      	push	{r0, r1, r4, lr}

	if (interface == MODE_SPI)
   b542c:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
void MicroOLED::data(uint8_t c) {
   b5430:	4604      	mov	r4, r0
   b5432:	460b      	mov	r3, r1
	if (interface == MODE_SPI)
   b5434:	b962      	cbnz	r2, b5450 <_ZN9MicroOLED4dataEh+0x26>
   b5436:	9101      	str	r1, [sp, #4]
	{
		digitalWrite(dcPin, HIGH);	// DC HIGH for a data byte
   b5438:	7a40      	ldrb	r0, [r0, #9]
   b543a:	2101      	movs	r1, #1
   b543c:	f002 fbf1 	bl	b7c22 <digitalWrite>

		spiTransfer(c); 		// Transfer the data byte
   b5440:	9b01      	ldr	r3, [sp, #4]
   b5442:	4620      	mov	r0, r4
   b5444:	4619      	mov	r1, r3
	else if (interface == MODE_PARALLEL)
	{
		// Write the byte to our parallel interface. Set DC HIGH.
		parallelWrite(c, HIGH);
	}
}
   b5446:	b002      	add	sp, #8
   b5448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		spiTransfer(c); 		// Transfer the data byte
   b544c:	f000 bb00 	b.w	b5a50 <_ZN9MicroOLED11spiTransferEh>
	else if (interface == MODE_I2C)
   b5450:	2a01      	cmp	r2, #1
   b5452:	d107      	bne.n	b5464 <_ZN9MicroOLED4dataEh+0x3a>
		i2cWrite(i2c_address, I2C_DATA, c);
   b5454:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
   b5458:	2240      	movs	r2, #64	; 0x40
}
   b545a:	b002      	add	sp, #8
   b545c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		i2cWrite(i2c_address, I2C_DATA, c);
   b5460:	f000 ba6b 	b.w	b593a <_ZN9MicroOLED8i2cWriteEhhh>
	else if (interface == MODE_PARALLEL)
   b5464:	2a02      	cmp	r2, #2
   b5466:	d105      	bne.n	b5474 <_ZN9MicroOLED4dataEh+0x4a>
		parallelWrite(c, HIGH);
   b5468:	2201      	movs	r2, #1
}
   b546a:	b002      	add	sp, #8
   b546c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		parallelWrite(c, HIGH);
   b5470:	f000 baa8 	b.w	b59c4 <_ZN9MicroOLED13parallelWriteEhh>
}
   b5474:	b002      	add	sp, #8
   b5476:	bd10      	pop	{r4, pc}

000b5478 <_ZN9MicroOLED14setPageAddressEh>:

    Send page address command and address to the SSD1306 OLED controller.
*/
void MicroOLED::setPageAddress(uint8_t add) {
	add=0xb0|add;
	command(add);
   b5478:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
   b547c:	f7ff bfae 	b.w	b53dc <_ZN9MicroOLED7commandEh>

000b5480 <_ZN9MicroOLED16setColumnAddressEh>:

/** \brief Set SSD1306 column address.

    Send column address command and address to the SSD1306 OLED controller.
*/
void MicroOLED::setColumnAddress(uint8_t add) {
   b5480:	b538      	push	{r3, r4, r5, lr}
   b5482:	460c      	mov	r4, r1
	command((0x10|(add>>4))+0x02);
   b5484:	0909      	lsrs	r1, r1, #4
   b5486:	f041 0110 	orr.w	r1, r1, #16
void MicroOLED::setColumnAddress(uint8_t add) {
   b548a:	4605      	mov	r5, r0
	command((0x10|(add>>4))+0x02);
   b548c:	3102      	adds	r1, #2
   b548e:	f7ff ffa5 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command((0x0f&add));
   b5492:	f004 010f 	and.w	r1, r4, #15
   b5496:	4628      	mov	r0, r5
	return;
}
   b5498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	command((0x0f&add));
   b549c:	f7ff bf9e 	b.w	b53dc <_ZN9MicroOLED7commandEh>

000b54a0 <_ZN9MicroOLED5clearEh>:

    To clear GDRAM inside the LCD controller, pass in the variable mode = ALL and to clear screen page buffer pass in the variable mode = PAGE.
*/
void MicroOLED::clear(uint8_t mode) {
	//	uint8_t page=6, col=0x40;
	if (mode==ALL) {
   b54a0:	2901      	cmp	r1, #1
void MicroOLED::clear(uint8_t mode) {
   b54a2:	b570      	push	{r4, r5, r6, lr}
   b54a4:	4604      	mov	r4, r0
	if (mode==ALL) {
   b54a6:	d113      	bne.n	b54d0 <_ZN9MicroOLED5clearEh+0x30>
		for (int i=0;i<8; i++) {
   b54a8:	2500      	movs	r5, #0
			setPageAddress(i);
   b54aa:	b2e9      	uxtb	r1, r5
   b54ac:	4620      	mov	r0, r4
   b54ae:	f7ff ffe3 	bl	b5478 <_ZN9MicroOLED14setPageAddressEh>
			setColumnAddress(0);
   b54b2:	2100      	movs	r1, #0
   b54b4:	4620      	mov	r0, r4
   b54b6:	f7ff ffe3 	bl	b5480 <_ZN9MicroOLED16setColumnAddressEh>
   b54ba:	2680      	movs	r6, #128	; 0x80
			for (int j=0; j<0x80; j++) {
				data(0);
   b54bc:	2100      	movs	r1, #0
   b54be:	4620      	mov	r0, r4
   b54c0:	f7ff ffb3 	bl	b542a <_ZN9MicroOLED4dataEh>
			for (int j=0; j<0x80; j++) {
   b54c4:	3e01      	subs	r6, #1
   b54c6:	d1f9      	bne.n	b54bc <_ZN9MicroOLED5clearEh+0x1c>
		for (int i=0;i<8; i++) {
   b54c8:	3501      	adds	r5, #1
   b54ca:	2d08      	cmp	r5, #8
   b54cc:	d1ed      	bne.n	b54aa <_ZN9MicroOLED5clearEh+0xa>
	else
	{
		memset(screenmemory,0,384);			// (64 x 48) / 8 = 384
		//display();
	}
}
   b54ce:	bd70      	pop	{r4, r5, r6, pc}
   b54d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(screenmemory,0,384);			// (64 x 48) / 8 = 384
   b54d4:	4802      	ldr	r0, [pc, #8]	; (b54e0 <_ZN9MicroOLED5clearEh+0x40>)
   b54d6:	f44f 72c0 	mov.w	r2, #384	; 0x180
   b54da:	2100      	movs	r1, #0
   b54dc:	f003 bcee 	b.w	b8ebc <memset>
   b54e0:	2003e408 	.word	0x2003e408

000b54e4 <_ZN9MicroOLED7displayEv>:

/** \brief Transfer display memory.

    Bulk move the screen buffer to the SSD1306 controller's memory so that images/graphics drawn on the screen buffer will be displayed on the OLED.
*/
void MicroOLED::display(void) {
   b54e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b54e8:	4f0e      	ldr	r7, [pc, #56]	; (b5524 <_ZN9MicroOLED7displayEv+0x40>)
   b54ea:	4604      	mov	r4, r0
   b54ec:	2600      	movs	r6, #0
	uint8_t i, j;

	for (i=0; i<6; i++) {
		setPageAddress(i);
   b54ee:	b2f1      	uxtb	r1, r6
   b54f0:	4620      	mov	r0, r4
   b54f2:	f7ff ffc1 	bl	b5478 <_ZN9MicroOLED14setPageAddressEh>
		setColumnAddress(0);
   b54f6:	2100      	movs	r1, #0
   b54f8:	4620      	mov	r0, r4
   b54fa:	f7ff ffc1 	bl	b5480 <_ZN9MicroOLED16setColumnAddressEh>
   b54fe:	46b8      	mov	r8, r7
   b5500:	2540      	movs	r5, #64	; 0x40
		for (j=0;j<0x40;j++) {
			data(screenmemory[i*0x40+j]);
   b5502:	f818 1b01 	ldrb.w	r1, [r8], #1
   b5506:	4620      	mov	r0, r4
		for (j=0;j<0x40;j++) {
   b5508:	3d01      	subs	r5, #1
			data(screenmemory[i*0x40+j]);
   b550a:	f7ff ff8e 	bl	b542a <_ZN9MicroOLED4dataEh>
		for (j=0;j<0x40;j++) {
   b550e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5512:	d1f6      	bne.n	b5502 <_ZN9MicroOLED7displayEv+0x1e>
	for (i=0; i<6; i++) {
   b5514:	3601      	adds	r6, #1
   b5516:	2e06      	cmp	r6, #6
   b5518:	f107 0740 	add.w	r7, r7, #64	; 0x40
   b551c:	d1e7      	bne.n	b54ee <_ZN9MicroOLED7displayEv+0xa>
		}
	}
}
   b551e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5522:	bf00      	nop
   b5524:	2003e408 	.word	0x2003e408

000b5528 <_ZN9MicroOLED9setCursorEhh>:
/** \brief Set cursor position.

MicroOLED's cursor position to x,y.
*/
void MicroOLED::setCursor(uint8_t x, uint8_t y) {
	cursorX=x;
   b5528:	f880 1047 	strb.w	r1, [r0, #71]	; 0x47
	cursorY=y;
   b552c:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
}
   b5530:	4770      	bx	lr
	...

000b5534 <_ZN9MicroOLED5pixelEhhhh>:
/** \brief Draw pixel with color and mode.

Draw color pixel in the screen buffer's x,y position with NORM or XOR draw mode.
*/
void MicroOLED::pixel(uint8_t x, uint8_t y, uint8_t color, uint8_t mode) {
	if ((x<0) ||  (x>=LCDWIDTH) || (y<0) || (y>=LCDHEIGHT))
   b5534:	293f      	cmp	r1, #63	; 0x3f
void MicroOLED::pixel(uint8_t x, uint8_t y, uint8_t color, uint8_t mode) {
   b5536:	b530      	push	{r4, r5, lr}
	if ((x<0) ||  (x>=LCDWIDTH) || (y<0) || (y>=LCDHEIGHT))
   b5538:	d812      	bhi.n	b5560 <_ZN9MicroOLED5pixelEhhhh+0x2c>
   b553a:	2a2f      	cmp	r2, #47	; 0x2f
   b553c:	d810      	bhi.n	b5560 <_ZN9MicroOLED5pixelEhhhh+0x2c>
	return;

	if (mode==XOR) {
   b553e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   b5542:	2801      	cmp	r0, #1
   b5544:	d10d      	bne.n	b5562 <_ZN9MicroOLED5pixelEhhhh+0x2e>
		if (color==WHITE)
   b5546:	2b01      	cmp	r3, #1
   b5548:	d10a      	bne.n	b5560 <_ZN9MicroOLED5pixelEhhhh+0x2c>
		screenmemory[x+ (y/8)*LCDWIDTH] ^= _BV((y%8));
   b554a:	08d0      	lsrs	r0, r2, #3
   b554c:	eb01 1080 	add.w	r0, r1, r0, lsl #6
   b5550:	4c0c      	ldr	r4, [pc, #48]	; (b5584 <_ZN9MicroOLED5pixelEhhhh+0x50>)
   b5552:	f002 0107 	and.w	r1, r2, #7
   b5556:	fa03 f201 	lsl.w	r2, r3, r1
   b555a:	5c23      	ldrb	r3, [r4, r0]
   b555c:	405a      	eors	r2, r3
   b555e:	5422      	strb	r2, [r4, r0]
		if (color==WHITE)
		screenmemory[x+ (y/8)*LCDWIDTH] |= _BV((y%8));
		else
		screenmemory[x+ (y/8)*LCDWIDTH] &= ~_BV((y%8));
	}
}
   b5560:	bd30      	pop	{r4, r5, pc}
		screenmemory[x+ (y/8)*LCDWIDTH] ^= _BV((y%8));
   b5562:	08d0      	lsrs	r0, r2, #3
   b5564:	4d07      	ldr	r5, [pc, #28]	; (b5584 <_ZN9MicroOLED5pixelEhhhh+0x50>)
   b5566:	eb01 1180 	add.w	r1, r1, r0, lsl #6
   b556a:	f002 0207 	and.w	r2, r2, #7
   b556e:	2401      	movs	r4, #1
   b5570:	5c68      	ldrb	r0, [r5, r1]
   b5572:	4094      	lsls	r4, r2
   b5574:	b2e4      	uxtb	r4, r4
		if (color==WHITE)
   b5576:	2b01      	cmp	r3, #1
		screenmemory[x+ (y/8)*LCDWIDTH] |= _BV((y%8));
   b5578:	bf0c      	ite	eq
   b557a:	4320      	orreq	r0, r4
		screenmemory[x+ (y/8)*LCDWIDTH] &= ~_BV((y%8));
   b557c:	43a0      	bicne	r0, r4
   b557e:	5468      	strb	r0, [r5, r1]
   b5580:	e7ee      	b.n	b5560 <_ZN9MicroOLED5pixelEhhhh+0x2c>
   b5582:	bf00      	nop
   b5584:	2003e408 	.word	0x2003e408

000b5588 <_ZN9MicroOLED11setFontTypeEh>:
/** \brief Set font type.

    Set the current font type number, ie changing to different fonts base on the type provided.
*/
uint8_t MicroOLED::setFontType(uint8_t type) {
	if ((type>=TOTALFONTS) || (type<0))
   b5588:	2903      	cmp	r1, #3
   b558a:	d81c      	bhi.n	b55c6 <_ZN9MicroOLED11setFontTypeEh+0x3e>
	return false;

	fontType=type;
	fontWidth=pgm_read_byte(fontsPointer[fontType]+0);
   b558c:	4b0f      	ldr	r3, [pc, #60]	; (b55cc <_ZN9MicroOLED11setFontTypeEh+0x44>)
	fontType=type;
   b558e:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	fontWidth=pgm_read_byte(fontsPointer[fontType]+0);
   b5592:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   b5596:	7813      	ldrb	r3, [r2, #0]
   b5598:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	fontHeight=pgm_read_byte(fontsPointer[fontType]+1);
   b559c:	7853      	ldrb	r3, [r2, #1]
   b559e:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
	fontStartChar=pgm_read_byte(fontsPointer[fontType]+2);
   b55a2:	7893      	ldrb	r3, [r2, #2]
   b55a4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
	fontTotalChar=pgm_read_byte(fontsPointer[fontType]+3);
   b55a8:	78d3      	ldrb	r3, [r2, #3]
   b55aa:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	fontMapWidth=(pgm_read_byte(fontsPointer[fontType]+4)*100)+pgm_read_byte(fontsPointer[fontType]+5); // two bytes values into integer 16
   b55ae:	7913      	ldrb	r3, [r2, #4]
   b55b0:	7952      	ldrb	r2, [r2, #5]
   b55b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b55b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b55ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b55be:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
   b55c2:	2001      	movs	r0, #1
   b55c4:	4770      	bx	lr
	return false;
   b55c6:	2000      	movs	r0, #0
	return true;
}
   b55c8:	4770      	bx	lr
   b55ca:	bf00      	nop
   b55cc:	2003e588 	.word	0x2003e588

000b55d0 <_ZN9MicroOLED5beginEv>:
	setFontType(0);
   b55d0:	2100      	movs	r1, #0
{
   b55d2:	b510      	push	{r4, lr}
   b55d4:	4604      	mov	r4, r0
	setFontType(0);
   b55d6:	f7ff ffd7 	bl	b5588 <_ZN9MicroOLED11setFontTypeEh>
/** \brief Set color.

    Set the current draw's color. Only WHITE and BLACK available.
*/
void MicroOLED::setColor(uint8_t color) {
	foreColor=color;
   b55da:	2301      	movs	r3, #1
   b55dc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
	cursorX=x;
   b55e0:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
	cursorY=y;
   b55e4:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
	pinMode(rstPin, OUTPUT);
   b55e8:	7aa0      	ldrb	r0, [r4, #10]
   b55ea:	4619      	mov	r1, r3
   b55ec:	f002 fb08 	bl	b7c00 <pinMode>
	if (interface == MODE_SPI)
   b55f0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   b55f4:	2b00      	cmp	r3, #0
   b55f6:	d17a      	bne.n	b56ee <_ZN9MicroOLED5beginEv+0x11e>
		spiSetup();
   b55f8:	4620      	mov	r0, r4
   b55fa:	f000 fa47 	bl	b5a8c <_ZN9MicroOLED8spiSetupEv>
	pinMode(rstPin, OUTPUT);	// Set RST pin as OUTPUT
   b55fe:	7aa0      	ldrb	r0, [r4, #10]
   b5600:	2101      	movs	r1, #1
   b5602:	f002 fafd 	bl	b7c00 <pinMode>
	digitalWrite(rstPin, HIGH);	// Initially set RST HIGH
   b5606:	7aa0      	ldrb	r0, [r4, #10]
   b5608:	2101      	movs	r1, #1
   b560a:	f002 fb0a 	bl	b7c22 <digitalWrite>
	delay(5);	// VDD (3.3V) goes high at start, lets just chill for 5 ms
   b560e:	2005      	movs	r0, #5
   b5610:	f000 fffc 	bl	b660c <delay>
	digitalWrite(rstPin, LOW);	// Bring RST low, reset the display
   b5614:	7aa0      	ldrb	r0, [r4, #10]
   b5616:	2100      	movs	r1, #0
   b5618:	f002 fb03 	bl	b7c22 <digitalWrite>
	delay(10);	// wait 10ms
   b561c:	200a      	movs	r0, #10
   b561e:	f000 fff5 	bl	b660c <delay>
	digitalWrite(rstPin, HIGH);	// Set RST HIGH, bring out of reset
   b5622:	7aa0      	ldrb	r0, [r4, #10]
   b5624:	2101      	movs	r1, #1
   b5626:	f002 fafc 	bl	b7c22 <digitalWrite>
	command(DISPLAYOFF);			// 0xAE
   b562a:	4620      	mov	r0, r4
   b562c:	21ae      	movs	r1, #174	; 0xae
   b562e:	f7ff fed5 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(SETDISPLAYCLOCKDIV);	// 0xD5
   b5632:	4620      	mov	r0, r4
   b5634:	21d5      	movs	r1, #213	; 0xd5
   b5636:	f7ff fed1 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(0x80);					// the suggested ratio 0x80
   b563a:	4620      	mov	r0, r4
   b563c:	2180      	movs	r1, #128	; 0x80
   b563e:	f7ff fecd 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(SETMULTIPLEX);			// 0xA8
   b5642:	4620      	mov	r0, r4
   b5644:	21a8      	movs	r1, #168	; 0xa8
   b5646:	f7ff fec9 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(0x2F);
   b564a:	4620      	mov	r0, r4
   b564c:	212f      	movs	r1, #47	; 0x2f
   b564e:	f7ff fec5 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(SETDISPLAYOFFSET);		// 0xD3
   b5652:	4620      	mov	r0, r4
   b5654:	21d3      	movs	r1, #211	; 0xd3
   b5656:	f7ff fec1 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(0x0);					// no offset
   b565a:	4620      	mov	r0, r4
   b565c:	2100      	movs	r1, #0
   b565e:	f7ff febd 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(SETSTARTLINE | 0x0);	// line #0
   b5662:	4620      	mov	r0, r4
   b5664:	2140      	movs	r1, #64	; 0x40
   b5666:	f7ff feb9 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(CHARGEPUMP);			// enable charge pump
   b566a:	4620      	mov	r0, r4
   b566c:	218d      	movs	r1, #141	; 0x8d
   b566e:	f7ff feb5 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(0x14);
   b5672:	4620      	mov	r0, r4
   b5674:	2114      	movs	r1, #20
   b5676:	f7ff feb1 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(NORMALDISPLAY);			// 0xA6
   b567a:	4620      	mov	r0, r4
   b567c:	21a6      	movs	r1, #166	; 0xa6
   b567e:	f7ff fead 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(DISPLAYALLONRESUME);	// 0xA4
   b5682:	4620      	mov	r0, r4
   b5684:	21a4      	movs	r1, #164	; 0xa4
   b5686:	f7ff fea9 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(SEGREMAP | 0x1);
   b568a:	4620      	mov	r0, r4
   b568c:	21a1      	movs	r1, #161	; 0xa1
   b568e:	f7ff fea5 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(COMSCANDEC);
   b5692:	4620      	mov	r0, r4
   b5694:	21c8      	movs	r1, #200	; 0xc8
   b5696:	f7ff fea1 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(SETCOMPINS);			// 0xDA
   b569a:	4620      	mov	r0, r4
   b569c:	21da      	movs	r1, #218	; 0xda
   b569e:	f7ff fe9d 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(0x12);
   b56a2:	4620      	mov	r0, r4
   b56a4:	2112      	movs	r1, #18
   b56a6:	f7ff fe99 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(SETCONTRAST);			// 0x81
   b56aa:	4620      	mov	r0, r4
   b56ac:	2181      	movs	r1, #129	; 0x81
   b56ae:	f7ff fe95 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(0x8F);
   b56b2:	4620      	mov	r0, r4
   b56b4:	218f      	movs	r1, #143	; 0x8f
   b56b6:	f7ff fe91 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(SETPRECHARGE);			// 0xd9
   b56ba:	4620      	mov	r0, r4
   b56bc:	21d9      	movs	r1, #217	; 0xd9
   b56be:	f7ff fe8d 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(0xF1);
   b56c2:	4620      	mov	r0, r4
   b56c4:	21f1      	movs	r1, #241	; 0xf1
   b56c6:	f7ff fe89 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(SETVCOMDESELECT);			// 0xDB
   b56ca:	4620      	mov	r0, r4
   b56cc:	21db      	movs	r1, #219	; 0xdb
   b56ce:	f7ff fe85 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(0x40);
   b56d2:	4620      	mov	r0, r4
   b56d4:	2140      	movs	r1, #64	; 0x40
   b56d6:	f7ff fe81 	bl	b53dc <_ZN9MicroOLED7commandEh>
	command(DISPLAYON);				//--turn on oled panel
   b56da:	4620      	mov	r0, r4
   b56dc:	21af      	movs	r1, #175	; 0xaf
   b56de:	f7ff fe7d 	bl	b53dc <_ZN9MicroOLED7commandEh>
	clear(ALL);						// Erase hardware memory inside the OLED controller to avoid random data in memory.
   b56e2:	4620      	mov	r0, r4
   b56e4:	2101      	movs	r1, #1
}
   b56e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clear(ALL);						// Erase hardware memory inside the OLED controller to avoid random data in memory.
   b56ea:	f7ff bed9 	b.w	b54a0 <_ZN9MicroOLED5clearEh>
	else if (interface == MODE_I2C)
   b56ee:	2b01      	cmp	r3, #1
   b56f0:	d103      	bne.n	b56fa <_ZN9MicroOLED5beginEv+0x12a>
		i2cSetup();
   b56f2:	4620      	mov	r0, r4
   b56f4:	f000 f920 	bl	b5938 <_ZN9MicroOLED8i2cSetupEv>
   b56f8:	e781      	b.n	b55fe <_ZN9MicroOLED5beginEv+0x2e>
	else if (interface == MODE_PARALLEL)
   b56fa:	2b02      	cmp	r3, #2
   b56fc:	f47f af7f 	bne.w	b55fe <_ZN9MicroOLED5beginEv+0x2e>
		parallelSetup();
   b5700:	4620      	mov	r0, r4
   b5702:	f000 f936 	bl	b5972 <_ZN9MicroOLED13parallelSetupEv>
   b5706:	e77a      	b.n	b55fe <_ZN9MicroOLED5beginEv+0x2e>

000b5708 <_ZN9MicroOLED8drawCharEhhhhh>:

/** \brief Draw character with color and mode.

    Draw character c using color and draw mode at x,y.
*/
void  MicroOLED::drawChar(uint8_t x, uint8_t y, uint8_t c, uint8_t color, uint8_t mode) {
   b5708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint8_t rowsToDraw,row, tempC;
	uint8_t i,j,temp;
	uint16_t charPerBitmapRow,charColPositionOnBitmap,charRowPositionOnBitmap,charBitmapStartPosition;

	if ((c<fontStartChar) || (c>(fontStartChar+fontTotalChar-1)))		// no bitmap for the required c
   b570c:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
void  MicroOLED::drawChar(uint8_t x, uint8_t y, uint8_t c, uint8_t color, uint8_t mode) {
   b5710:	b089      	sub	sp, #36	; 0x24
	if ((c<fontStartChar) || (c>(fontStartChar+fontTotalChar-1)))		// no bitmap for the required c
   b5712:	429c      	cmp	r4, r3
void  MicroOLED::drawChar(uint8_t x, uint8_t y, uint8_t c, uint8_t color, uint8_t mode) {
   b5714:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b5718:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   b571c:	f89d 904c 	ldrb.w	r9, [sp, #76]	; 0x4c
   b5720:	4607      	mov	r7, r0
	if ((c<fontStartChar) || (c>(fontStartChar+fontTotalChar-1)))		// no bitmap for the required c
   b5722:	f200 8096 	bhi.w	b5852 <_ZN9MicroOLED8drawCharEhhhhh+0x14a>
   b5726:	f890 2046 	ldrb.w	r2, [r0, #70]	; 0x46
   b572a:	4422      	add	r2, r4
   b572c:	429a      	cmp	r2, r3
   b572e:	f340 8090 	ble.w	b5852 <_ZN9MicroOLED8drawCharEhhhhh+0x14a>
	return;

	tempC=c-fontStartChar;

	// each row (in datasheet is call page) is 8 bits high, 16 bit high character will have 2 rows to be drawn
	rowsToDraw=fontHeight/8;	// 8 is LCD's page size, see SSD1306 datasheet
   b5732:	f890 5043 	ldrb.w	r5, [r0, #67]	; 0x43
	tempC=c-fontStartChar;
   b5736:	1b1b      	subs	r3, r3, r4
	if (rowsToDraw<=1) rowsToDraw=1;
   b5738:	2d0f      	cmp	r5, #15
	tempC=c-fontStartChar;
   b573a:	b2dc      	uxtb	r4, r3
	if (rowsToDraw<=1) rowsToDraw=1;
   b573c:	d953      	bls.n	b57e6 <_ZN9MicroOLED8drawCharEhhhhh+0xde>
		return;
	}

	// font height over 8 bit
	// take character "0" ASCII 48 as example
	charPerBitmapRow=fontMapWidth/fontWidth;  // 256/8 =32 char per row
   b573e:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   b5742:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
   b5746:	fbb3 f6f1 	udiv	r6, r3, r1
	rowsToDraw=fontHeight/8;	// 8 is LCD's page size, see SSD1306 datasheet
   b574a:	08ed      	lsrs	r5, r5, #3
	charColPositionOnBitmap=tempC % charPerBitmapRow;  // =16
	charRowPositionOnBitmap=int(tempC/charPerBitmapRow); // =1
   b574c:	fbb4 f2f6 	udiv	r2, r4, r6
	charBitmapStartPosition=(charRowPositionOnBitmap * fontMapWidth * (fontHeight/8)) + (charColPositionOnBitmap * fontWidth) ;
   b5750:	fb15 f303 	smulbb	r3, r5, r3
	charColPositionOnBitmap=tempC % charPerBitmapRow;  // =16
   b5754:	fb06 4412 	mls	r4, r6, r2, r4
	charBitmapStartPosition=(charRowPositionOnBitmap * fontMapWidth * (fontHeight/8)) + (charColPositionOnBitmap * fontWidth) ;
   b5758:	fb13 f302 	smulbb	r3, r3, r2
   b575c:	fb14 f401 	smulbb	r4, r4, r1
   b5760:	441c      	add	r4, r3
   b5762:	b2a3      	uxth	r3, r4
   b5764:	9305      	str	r3, [sp, #20]
   b5766:	2600      	movs	r6, #0

	// each row on LCD is 8 bit height (see datasheet for explanation)
	for(row=0;row<rowsToDraw;row++) {
   b5768:	b2f3      	uxtb	r3, r6
   b576a:	429d      	cmp	r5, r3
   b576c:	d971      	bls.n	b5852 <_ZN9MicroOLED8drawCharEhhhhh+0x14a>
   b576e:	9a04      	ldr	r2, [sp, #16]
   b5770:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   b5774:	b2db      	uxtb	r3, r3
   b5776:	9306      	str	r3, [sp, #24]
   b5778:	f04f 0a00 	mov.w	sl, #0
		for (i=0; i<fontWidth;i++) {
   b577c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   b5780:	fa5f f18a 	uxtb.w	r1, sl
   b5784:	428b      	cmp	r3, r1
   b5786:	d962      	bls.n	b584e <_ZN9MicroOLED8drawCharEhhhhh+0x146>
			temp=pgm_read_byte(fontsPointer[fontType]+FONTHEADERSIZE+(charBitmapStartPosition+i+(row*fontMapWidth)));
   b5788:	4833      	ldr	r0, [pc, #204]	; (b5858 <_ZN9MicroOLED8drawCharEhhhhh+0x150>)
   b578a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
   b578e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
   b5792:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   b5796:	9805      	ldr	r0, [sp, #20]
   b5798:	4403      	add	r3, r0
   b579a:	440b      	add	r3, r1
   b579c:	fb06 3302 	mla	r3, r6, r2, r3
			for (j=0;j<8;j++) {			// 8 is the LCD's page height (see datasheet for explanation)
   b57a0:	2400      	movs	r4, #0
			temp=pgm_read_byte(fontsPointer[fontType]+FONTHEADERSIZE+(charBitmapStartPosition+i+(row*fontMapWidth)));
   b57a2:	f893 b006 	ldrb.w	fp, [r3, #6]
			for (j=0;j<8;j++) {			// 8 is the LCD's page height (see datasheet for explanation)
   b57a6:	9b03      	ldr	r3, [sp, #12]
   b57a8:	4419      	add	r1, r3
   b57aa:	b2c9      	uxtb	r1, r1
				if (temp & 0x1) {
   b57ac:	9b06      	ldr	r3, [sp, #24]
					pixel(x+i,y+j+(row*8), color, mode);
   b57ae:	f8cd 9000 	str.w	r9, [sp]
				if (temp & 0x1) {
   b57b2:	f01b 0f01 	tst.w	fp, #1
					pixel(x+i,y+j+(row*8), color, mode);
   b57b6:	eb03 0204 	add.w	r2, r3, r4
				}
				else {
					pixel(x+i,y+j+(row*8), !color, mode);
   b57ba:	bf08      	it	eq
   b57bc:	fab8 f388 	clzeq	r3, r8
			for (j=0;j<8;j++) {			// 8 is the LCD's page height (see datasheet for explanation)
   b57c0:	f104 0401 	add.w	r4, r4, #1
					pixel(x+i,y+j+(row*8), color, mode);
   b57c4:	bf14      	ite	ne
   b57c6:	4643      	movne	r3, r8
					pixel(x+i,y+j+(row*8), !color, mode);
   b57c8:	095b      	lsreq	r3, r3, #5
   b57ca:	b2d2      	uxtb	r2, r2
   b57cc:	4638      	mov	r0, r7
			for (j=0;j<8;j++) {			// 8 is the LCD's page height (see datasheet for explanation)
   b57ce:	b2e4      	uxtb	r4, r4
					pixel(x+i,y+j+(row*8), !color, mode);
   b57d0:	9107      	str	r1, [sp, #28]
   b57d2:	f7ff feaf 	bl	b5534 <_ZN9MicroOLED5pixelEhhhh>
			for (j=0;j<8;j++) {			// 8 is the LCD's page height (see datasheet for explanation)
   b57d6:	2c08      	cmp	r4, #8
					pixel(x+i,y+j+(row*8), !color, mode);
   b57d8:	9907      	ldr	r1, [sp, #28]
				}
				temp >>=1;
   b57da:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
			for (j=0;j<8;j++) {			// 8 is the LCD's page height (see datasheet for explanation)
   b57de:	d1e5      	bne.n	b57ac <_ZN9MicroOLED8drawCharEhhhhh+0xa4>
		for (i=0; i<fontWidth;i++) {
   b57e0:	f10a 0a01 	add.w	sl, sl, #1
   b57e4:	e7ca      	b.n	b577c <_ZN9MicroOLED8drawCharEhhhhh+0x74>
			temp=pgm_read_byte(fontsPointer[fontType]+FONTHEADERSIZE+(tempC*fontWidth)+i);
   b57e6:	f8df b070 	ldr.w	fp, [pc, #112]	; b5858 <_ZN9MicroOLED8drawCharEhhhhh+0x150>
   b57ea:	f04f 0a00 	mov.w	sl, #0
		for  (i=0;i<fontWidth+1;i++) {
   b57ee:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
   b57f2:	fa5f f18a 	uxtb.w	r1, sl
   b57f6:	428a      	cmp	r2, r1
   b57f8:	d32b      	bcc.n	b5852 <_ZN9MicroOLED8drawCharEhhhhh+0x14a>
			temp=pgm_read_byte(fontsPointer[fontType]+FONTHEADERSIZE+(tempC*fontWidth)+i);
   b57fa:	bf1f      	itttt	ne
   b57fc:	f897 3044 	ldrbne.w	r3, [r7, #68]	; 0x44
   b5800:	f85b 3023 	ldrne.w	r3, [fp, r3, lsl #2]
   b5804:	fb04 3302 	mlane	r3, r4, r2, r3
   b5808:	185b      	addne	r3, r3, r1
			temp=0;
   b580a:	bf0c      	ite	eq
   b580c:	2600      	moveq	r6, #0
			temp=pgm_read_byte(fontsPointer[fontType]+FONTHEADERSIZE+(tempC*fontWidth)+i);
   b580e:	799e      	ldrbne	r6, [r3, #6]
   b5810:	9b03      	ldr	r3, [sp, #12]
   b5812:	4419      	add	r1, r3
			temp=0;
   b5814:	2500      	movs	r5, #0
   b5816:	b2c9      	uxtb	r1, r1
					pixel(x+i, y+j, color,mode);
   b5818:	9b04      	ldr	r3, [sp, #16]
   b581a:	f8cd 9000 	str.w	r9, [sp]
   b581e:	195a      	adds	r2, r3, r5
				if (temp & 0x1) {
   b5820:	07f3      	lsls	r3, r6, #31
					pixel(x+i, y+j, !color,mode);
   b5822:	bf58      	it	pl
   b5824:	fab8 f388 	clzpl	r3, r8
			for (j=0;j<8;j++) {			// 8 is the LCD's page height (see datasheet for explanation)
   b5828:	f105 0501 	add.w	r5, r5, #1
					pixel(x+i, y+j, color,mode);
   b582c:	bf4c      	ite	mi
   b582e:	4643      	movmi	r3, r8
					pixel(x+i, y+j, !color,mode);
   b5830:	095b      	lsrpl	r3, r3, #5
					pixel(x+i, y+j, color,mode);
   b5832:	b2d2      	uxtb	r2, r2
					pixel(x+i, y+j, !color,mode);
   b5834:	4638      	mov	r0, r7
			for (j=0;j<8;j++) {			// 8 is the LCD's page height (see datasheet for explanation)
   b5836:	b2ed      	uxtb	r5, r5
					pixel(x+i, y+j, !color,mode);
   b5838:	9105      	str	r1, [sp, #20]
   b583a:	f7ff fe7b 	bl	b5534 <_ZN9MicroOLED5pixelEhhhh>
			for (j=0;j<8;j++) {			// 8 is the LCD's page height (see datasheet for explanation)
   b583e:	2d08      	cmp	r5, #8
					pixel(x+i, y+j, !color,mode);
   b5840:	9905      	ldr	r1, [sp, #20]
				temp >>=1;
   b5842:	ea4f 0656 	mov.w	r6, r6, lsr #1
			for (j=0;j<8;j++) {			// 8 is the LCD's page height (see datasheet for explanation)
   b5846:	d1e7      	bne.n	b5818 <_ZN9MicroOLED8drawCharEhhhhh+0x110>
		for  (i=0;i<fontWidth+1;i++) {
   b5848:	f10a 0a01 	add.w	sl, sl, #1
   b584c:	e7cf      	b.n	b57ee <_ZN9MicroOLED8drawCharEhhhhh+0xe6>
	for(row=0;row<rowsToDraw;row++) {
   b584e:	3601      	adds	r6, #1
   b5850:	e78a      	b.n	b5768 <_ZN9MicroOLED8drawCharEhhhhh+0x60>
			}
		}
	}

}
   b5852:	b009      	add	sp, #36	; 0x24
   b5854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5858:	2003e588 	.word	0x2003e588

000b585c <_ZN9MicroOLED5writeEh>:
	if (c == '\n') {
   b585c:	290a      	cmp	r1, #10
size_t MicroOLED::write(uint8_t c) {
   b585e:	b513      	push	{r0, r1, r4, lr}
   b5860:	4604      	mov	r4, r0
	if (c == '\n') {
   b5862:	d10a      	bne.n	b587a <_ZN9MicroOLED5writeEh+0x1e>
			cursorY += fontHeight;
   b5864:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   b5868:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   b586c:	4413      	add	r3, r2
   b586e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			cursorX = 0;
   b5872:	2300      	movs	r3, #0
   b5874:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
   b5878:	e01b      	b.n	b58b2 <_ZN9MicroOLED5writeEh+0x56>
	} else if (c == '\r') {
   b587a:	290d      	cmp	r1, #13
   b587c:	d019      	beq.n	b58b2 <_ZN9MicroOLED5writeEh+0x56>
		drawChar(cursorX, cursorY, c, foreColor, drawMode);
   b587e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
   b5882:	9301      	str	r3, [sp, #4]
   b5884:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   b5888:	9300      	str	r3, [sp, #0]
   b588a:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
   b588e:	460b      	mov	r3, r1
   b5890:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
   b5894:	f7ff ff38 	bl	b5708 <_ZN9MicroOLED8drawCharEhhhhh>
		cursorX += fontWidth+1;
   b5898:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   b589c:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   b58a0:	4413      	add	r3, r2
   b58a2:	3301      	adds	r3, #1
   b58a4:	b2db      	uxtb	r3, r3
		if ((cursorX > (LCDWIDTH - fontWidth))) {
   b58a6:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   b58aa:	4293      	cmp	r3, r2
		cursorX += fontWidth+1;
   b58ac:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
		if ((cursorX > (LCDWIDTH - fontWidth))) {
   b58b0:	dcd8      	bgt.n	b5864 <_ZN9MicroOLED5writeEh+0x8>
}
   b58b2:	2001      	movs	r0, #1
   b58b4:	b002      	add	sp, #8
   b58b6:	bd10      	pop	{r4, pc}

000b58b8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b58b8:	4770      	bx	lr

000b58ba <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b58ba:	b510      	push	{r4, lr}
  }
   b58bc:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b58be:	4604      	mov	r4, r0
  }
   b58c0:	f7ff fbf7 	bl	b50b2 <_ZdlPvj>
   b58c4:	4620      	mov	r0, r4
   b58c6:	bd10      	pop	{r4, pc}

000b58c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b58c8:	b40e      	push	{r1, r2, r3}
   b58ca:	b503      	push	{r0, r1, lr}
   b58cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b58ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b58d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b58d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b58d6:	f001 fc88 	bl	b71ea <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b58da:	b002      	add	sp, #8
   b58dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b58e0:	b003      	add	sp, #12
   b58e2:	4770      	bx	lr

000b58e4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b58e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b58e6:	4604      	mov	r4, r0
   b58e8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b58ea:	7922      	ldrb	r2, [r4, #4]
   b58ec:	68a3      	ldr	r3, [r4, #8]
   b58ee:	b132      	cbz	r2, b58fe <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b58f0:	b9a3      	cbnz	r3, b591c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b58f2:	490b      	ldr	r1, [pc, #44]	; (b5920 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b58f4:	b002      	add	sp, #8
   b58f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b58fa:	f001 bb6d 	b.w	b6fd8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b58fe:	4a09      	ldr	r2, [pc, #36]	; (b5924 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5900:	7b26      	ldrb	r6, [r4, #12]
   b5902:	4d09      	ldr	r5, [pc, #36]	; (b5928 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5904:	4909      	ldr	r1, [pc, #36]	; (b592c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b5906:	7b64      	ldrb	r4, [r4, #13]
   b5908:	2e01      	cmp	r6, #1
   b590a:	bf18      	it	ne
   b590c:	4629      	movne	r1, r5
   b590e:	e9cd 1400 	strd	r1, r4, [sp]
   b5912:	4907      	ldr	r1, [pc, #28]	; (b5930 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5914:	f7ff ffd8 	bl	b58c8 <_ZN5Print6printfEPKcz>
  }
   b5918:	b002      	add	sp, #8
   b591a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b591c:	4a05      	ldr	r2, [pc, #20]	; (b5934 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b591e:	e7ef      	b.n	b5900 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5920:	000ba001 	.word	0x000ba001
   b5924:	000b909e 	.word	0x000b909e
   b5928:	000b9ffd 	.word	0x000b9ffd
   b592c:	000b9ff9 	.word	0x000b9ff9
   b5930:	000ba017 	.word	0x000ba017
   b5934:	000b9ff0 	.word	0x000b9ff0

000b5938 <_ZN9MicroOLED8i2cSetupEv>:
	I2C clock frequency.
**/
void MicroOLED::i2cSetup()
{

}
   b5938:	4770      	bx	lr

000b593a <_ZN9MicroOLED8i2cWriteEhhh>:
	Write a byte to I2C device _address_. The DC byte determines whether
	the data being sent is a command or display data. Use either I2C_COMMAND
	or I2C_DATA in that parameter. The data byte can be any 8-bit value.
**/
void MicroOLED::i2cWrite(byte address, byte dc, byte data)
{
   b593a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b593c:	4615      	mov	r5, r2
   b593e:	461c      	mov	r4, r3
   b5940:	9101      	str	r1, [sp, #4]
	Wire.beginTransmission(address);
   b5942:	f002 f9b5 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b5946:	9901      	ldr	r1, [sp, #4]
   b5948:	f001 f9e0 	bl	b6d0c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(dc); // If data dc = 0, if command dc = 0x40
   b594c:	f002 f9b0 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b5950:	6803      	ldr	r3, [r0, #0]
   b5952:	4629      	mov	r1, r5
   b5954:	689b      	ldr	r3, [r3, #8]
   b5956:	4798      	blx	r3
	Wire.write(data);
   b5958:	f002 f9aa 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b595c:	6803      	ldr	r3, [r0, #0]
   b595e:	4621      	mov	r1, r4
   b5960:	689b      	ldr	r3, [r3, #8]
   b5962:	4798      	blx	r3
	Wire.endTransmission();
   b5964:	f002 f9a4 	bl	b7cb0 <_Z19__fetch_global_Wirev>
}
   b5968:	b003      	add	sp, #12
   b596a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	Wire.endTransmission();
   b596e:	f001 b9d5 	b.w	b6d1c <_ZN7TwoWire15endTransmissionEv>

000b5972 <_ZN9MicroOLED13parallelSetupEv>:

	This function initializes all of the pins used in the
	parallel interface.
**/
void MicroOLED::parallelSetup()
{
   b5972:	b538      	push	{r3, r4, r5, lr}
   b5974:	4604      	mov	r4, r0
	pinMode(dcPin, OUTPUT); //dc Is used for SPI and parallel interfaces but not I2C
   b5976:	2101      	movs	r1, #1
   b5978:	7a40      	ldrb	r0, [r0, #9]
   b597a:	f002 f941 	bl	b7c00 <pinMode>

	// Initialize WR, RD, CS and data pins as outputs.
	pinMode(wrPin, OUTPUT);
   b597e:	7ae0      	ldrb	r0, [r4, #11]
   b5980:	2101      	movs	r1, #1
   b5982:	f002 f93d 	bl	b7c00 <pinMode>
	digitalWrite(wrPin, HIGH);
   b5986:	7ae0      	ldrb	r0, [r4, #11]
   b5988:	2101      	movs	r1, #1
   b598a:	f002 f94a 	bl	b7c22 <digitalWrite>
	pinMode(rdPin, OUTPUT);
   b598e:	7b20      	ldrb	r0, [r4, #12]
   b5990:	2101      	movs	r1, #1
   b5992:	f002 f935 	bl	b7c00 <pinMode>
	digitalWrite(rdPin, HIGH);
   b5996:	7b20      	ldrb	r0, [r4, #12]
   b5998:	2101      	movs	r1, #1
   b599a:	f002 f942 	bl	b7c22 <digitalWrite>
	pinMode(csPin, OUTPUT);
   b599e:	7a20      	ldrb	r0, [r4, #8]
   b59a0:	2101      	movs	r1, #1
   b59a2:	f002 f92d 	bl	b7c00 <pinMode>
	digitalWrite(csPin, HIGH);
   b59a6:	7a20      	ldrb	r0, [r4, #8]
   b59a8:	2101      	movs	r1, #1
   b59aa:	f002 f93a 	bl	b7c22 <digitalWrite>
	for (int i=0; i<8; i++)
   b59ae:	f104 050d 	add.w	r5, r4, #13
   b59b2:	3415      	adds	r4, #21
		pinMode(dPins[i], OUTPUT);
   b59b4:	f815 0b01 	ldrb.w	r0, [r5], #1
   b59b8:	2101      	movs	r1, #1
   b59ba:	f002 f921 	bl	b7c00 <pinMode>
	for (int i=0; i<8; i++)
   b59be:	42a5      	cmp	r5, r4
   b59c0:	d1f8      	bne.n	b59b4 <_ZN9MicroOLED13parallelSetupEv+0x42>
}
   b59c2:	bd38      	pop	{r3, r4, r5, pc}

000b59c4 <_ZN9MicroOLED13parallelWriteEhh>:
	This function will both set the DC pin, depending on whether a data or
	command byte is being sent, and it will toggle the WR, RD and data pins
	to send a byte.
**/
void MicroOLED::parallelWrite(byte data, byte dc)
{
   b59c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59c6:	4604      	mov	r4, r0
   b59c8:	4615      	mov	r5, r2
	//digitalWrite(csPin, HIGH);
	//digitalWrite(wrPin, HIGH);
	//digitalWrite(rdPin, HIGH);
	
	// chip select high->low
	digitalWrite(csPin, LOW);
   b59ca:	7a00      	ldrb	r0, [r0, #8]
{
   b59cc:	460e      	mov	r6, r1
	digitalWrite(csPin, LOW);
   b59ce:	2100      	movs	r1, #0
   b59d0:	f002 f927 	bl	b7c22 <digitalWrite>
	
	// dc high or low
	digitalWrite(dcPin, dc);
   b59d4:	4629      	mov	r1, r5
   b59d6:	7a60      	ldrb	r0, [r4, #9]
   b59d8:	f002 f923 	bl	b7c22 <digitalWrite>
	
	// wr high->low
	digitalWrite(wrPin, LOW);
   b59dc:	7ae0      	ldrb	r0, [r4, #11]
   b59de:	2100      	movs	r1, #0
   b59e0:	f002 f91f 	bl	b7c22 <digitalWrite>
	
	// set data pins
	for (int i=0; i<8; i++)
   b59e4:	f104 070d 	add.w	r7, r4, #13
   b59e8:	2500      	movs	r5, #0
	{
		if (data & (1<<i))
   b59ea:	fa46 f305 	asr.w	r3, r6, r5
   b59ee:	f013 0101 	ands.w	r1, r3, #1
			digitalWrite(dPins[i], HIGH);
   b59f2:	bf18      	it	ne
   b59f4:	2101      	movne	r1, #1
   b59f6:	f817 0b01 	ldrb.w	r0, [r7], #1
	for (int i=0; i<8; i++)
   b59fa:	3501      	adds	r5, #1
		else
			digitalWrite(dPins[i], LOW);
   b59fc:	f002 f911 	bl	b7c22 <digitalWrite>
	for (int i=0; i<8; i++)
   b5a00:	2d08      	cmp	r5, #8
   b5a02:	d1f2      	bne.n	b59ea <_ZN9MicroOLED13parallelWriteEhh+0x26>
	}
	
	// wr low->high
	digitalWrite(wrPin, HIGH);
   b5a04:	7ae0      	ldrb	r0, [r4, #11]
   b5a06:	2101      	movs	r1, #1
   b5a08:	f002 f90b 	bl	b7c22 <digitalWrite>
		
	// cs high
	digitalWrite(csPin, HIGH);
   b5a0c:	7a20      	ldrb	r0, [r4, #8]
   b5a0e:	2101      	movs	r1, #1
}
   b5a10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, HIGH);
   b5a14:	f002 b905 	b.w	b7c22 <digitalWrite>

000b5a18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5a18:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5a1a:	4c0b      	ldr	r4, [pc, #44]	; (b5a48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5a1c:	7821      	ldrb	r1, [r4, #0]
   b5a1e:	f3bf 8f5b 	dmb	ish
   b5a22:	f011 0101 	ands.w	r1, r1, #1
   b5a26:	d10b      	bne.n	b5a40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5a28:	4620      	mov	r0, r4
   b5a2a:	9101      	str	r1, [sp, #4]
   b5a2c:	f7ff fb43 	bl	b50b6 <__cxa_guard_acquire>
   b5a30:	9901      	ldr	r1, [sp, #4]
   b5a32:	b128      	cbz	r0, b5a40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5a34:	4805      	ldr	r0, [pc, #20]	; (b5a4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5a36:	f001 fc15 	bl	b7264 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5a3a:	4620      	mov	r0, r4
   b5a3c:	f7ff fb40 	bl	b50c0 <__cxa_guard_release>
        return instance;
    }
   b5a40:	4802      	ldr	r0, [pc, #8]	; (b5a4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5a42:	b002      	add	sp, #8
   b5a44:	bd10      	pop	{r4, pc}
   b5a46:	bf00      	nop
   b5a48:	2003e6a8 	.word	0x2003e6a8
   b5a4c:	2003e6ac 	.word	0x2003e6ac

000b5a50 <_ZN9MicroOLED11spiTransferEh>:
{
   b5a50:	b538      	push	{r3, r4, r5, lr}
   b5a52:	4604      	mov	r4, r0
   b5a54:	460d      	mov	r5, r1
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
   b5a56:	f7ff ffdf 	bl	b5a18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5a5a:	490b      	ldr	r1, [pc, #44]	; (b5a88 <_ZN9MicroOLED11spiTransferEh+0x38>)
   b5a5c:	f001 fc62 	bl	b7324 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	digitalWrite(csPin, LOW);
   b5a60:	7a20      	ldrb	r0, [r4, #8]
   b5a62:	2100      	movs	r1, #0
   b5a64:	f002 f8dd 	bl	b7c22 <digitalWrite>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b5a68:	f7ff ffd6 	bl	b5a18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5a6c:	4629      	mov	r1, r5
   b5a6e:	f001 fd1f 	bl	b74b0 <_ZN8SPIClass8transferEh>
	digitalWrite(csPin, HIGH);
   b5a72:	7a20      	ldrb	r0, [r4, #8]
   b5a74:	2101      	movs	r1, #1
   b5a76:	f002 f8d4 	bl	b7c22 <digitalWrite>
        instance().endTransaction();
   b5a7a:	f7ff ffcd 	bl	b5a18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b5a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5a82:	f001 bc35 	b.w	b72f0 <_ZN8SPIClass14endTransactionEv>
   b5a86:	bf00      	nop
   b5a88:	2003e6b4 	.word	0x2003e6b4

000b5a8c <_ZN9MicroOLED8spiSetupEv>:
{
   b5a8c:	b510      	push	{r4, lr}
	pinMode(dcPin, OUTPUT); //dc Is used for SPI and parallel interfaces but not I2C
   b5a8e:	2101      	movs	r1, #1
{
   b5a90:	4604      	mov	r4, r0
	pinMode(dcPin, OUTPUT); //dc Is used for SPI and parallel interfaces but not I2C
   b5a92:	7a40      	ldrb	r0, [r0, #9]
   b5a94:	f002 f8b4 	bl	b7c00 <pinMode>
	pinMode(MOSI, OUTPUT);	// MOSI is an OUTPUT
   b5a98:	2101      	movs	r1, #1
   b5a9a:	200c      	movs	r0, #12
   b5a9c:	f002 f8b0 	bl	b7c00 <pinMode>
	pinMode(SCK, OUTPUT);	// SCK is an OUTPUT
   b5aa0:	2101      	movs	r1, #1
   b5aa2:	200d      	movs	r0, #13
   b5aa4:	f002 f8ac 	bl	b7c00 <pinMode>
	pinMode(csPin, OUTPUT);	// CS is an OUTPUT
   b5aa8:	7a20      	ldrb	r0, [r4, #8]
   b5aaa:	2101      	movs	r1, #1
   b5aac:	f002 f8a8 	bl	b7c00 <pinMode>
	digitalWrite(csPin, HIGH);	// Start CS High
   b5ab0:	7a20      	ldrb	r0, [r4, #8]
   b5ab2:	2101      	movs	r1, #1
   b5ab4:	f002 f8b5 	bl	b7c22 <digitalWrite>
        instance().begin();
   b5ab8:	f7ff ffae 	bl	b5a18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b5abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5ac0:	f001 bbda 	b.w	b7278 <_ZN8SPIClass5beginEv>

000b5ac4 <_GLOBAL__sub_I_oledSettings>:
      dataMode_{dataMode}
   b5ac4:	4b04      	ldr	r3, [pc, #16]	; (b5ad8 <_GLOBAL__sub_I_oledSettings+0x14>)
   b5ac6:	4a05      	ldr	r2, [pc, #20]	; (b5adc <_GLOBAL__sub_I_oledSettings+0x18>)
   b5ac8:	601a      	str	r2, [r3, #0]
   b5aca:	2200      	movs	r2, #0
   b5acc:	711a      	strb	r2, [r3, #4]
   b5ace:	4a04      	ldr	r2, [pc, #16]	; (b5ae0 <_GLOBAL__sub_I_oledSettings+0x1c>)
   b5ad0:	609a      	str	r2, [r3, #8]
   b5ad2:	2201      	movs	r2, #1
   b5ad4:	819a      	strh	r2, [r3, #12]
}
   b5ad6:	4770      	bx	lr
   b5ad8:	2003e6b4 	.word	0x2003e6b4
   b5adc:	000ba03c 	.word	0x000ba03c
   b5ae0:	00989680 	.word	0x00989680

000b5ae4 <_ZN6BME280C1Ev>:
BME280::BME280( void )
{
	//Construct with these default settings if nothing is specified

	//Select interface mode
	settings.commInterface = I2C_MODE; //Can be I2C_MODE, SPI_MODE
   b5ae4:	4a02      	ldr	r2, [pc, #8]	; (b5af0 <_ZN6BME280C1Ev+0xc>)
   b5ae6:	6002      	str	r2, [r0, #0]
	//Select address for I2C.  Does nothing for SPI
	settings.I2CAddress = 0x77; //Ignored for SPI_MODE
	//Select CS pin for SPI.  Does nothing for I2C
	settings.chipSelectPin = 10;
	settings.runMode = 0;
	settings.tempOverSample = 0;
   b5ae8:	2200      	movs	r2, #0
   b5aea:	80c2      	strh	r2, [r0, #6]
	settings.pressOverSample = 0;
	settings.humidOverSample = 0;
   b5aec:	7202      	strb	r2, [r0, #8]

}
   b5aee:	4770      	bx	lr
   b5af0:	000a7700 	.word	0x000a7700

000b5af4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
    byte transfer(byte data) {
   b5af4:	b507      	push	{r0, r1, r2, lr}
   b5af6:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b5af8:	f7ff ff8e 	bl	b5a18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5afc:	9901      	ldr	r1, [sp, #4]
    }
   b5afe:	b003      	add	sp, #12
   b5b00:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b5b04:	f001 bcd4 	b.w	b74b0 <_ZN8SPIClass8transferEh>

000b5b08 <_ZN6BME28013writeRegisterEhh>:
	
	return output;
}

void BME280::writeRegister(uint8_t offset, uint8_t dataToWrite)
{
   b5b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (settings.commInterface)
   b5b0a:	7807      	ldrb	r7, [r0, #0]
{
   b5b0c:	4604      	mov	r4, r0
   b5b0e:	460e      	mov	r6, r1
   b5b10:	4615      	mov	r5, r2
	switch (settings.commInterface)
   b5b12:	b117      	cbz	r7, b5b1a <_ZN6BME28013writeRegisterEhh+0x12>
   b5b14:	2f01      	cmp	r7, #1
   b5b16:	d017      	beq.n	b5b48 <_ZN6BME28013writeRegisterEhh+0x40>
		break;

	default:
		break;
	}
}
   b5b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Wire.beginTransmission(settings.I2CAddress);
   b5b1a:	f002 f8c9 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b5b1e:	7861      	ldrb	r1, [r4, #1]
   b5b20:	f001 f8f4 	bl	b6d0c <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(offset);
   b5b24:	f002 f8c4 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b5b28:	6803      	ldr	r3, [r0, #0]
   b5b2a:	4631      	mov	r1, r6
   b5b2c:	689b      	ldr	r3, [r3, #8]
   b5b2e:	4798      	blx	r3
		Wire.write(dataToWrite);
   b5b30:	f002 f8be 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b5b34:	6803      	ldr	r3, [r0, #0]
   b5b36:	4629      	mov	r1, r5
   b5b38:	689b      	ldr	r3, [r3, #8]
   b5b3a:	4798      	blx	r3
		Wire.endTransmission();
   b5b3c:	f002 f8b8 	bl	b7cb0 <_Z19__fetch_global_Wirev>
}
   b5b40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Wire.endTransmission();
   b5b44:	f001 b8ea 	b.w	b6d1c <_ZN7TwoWire15endTransmissionEv>
		digitalWrite(settings.chipSelectPin, LOW);
   b5b48:	2100      	movs	r1, #0
   b5b4a:	7880      	ldrb	r0, [r0, #2]
   b5b4c:	f002 f869 	bl	b7c22 <digitalWrite>
		SPI.transfer(offset & 0x7F);
   b5b50:	f006 007f 	and.w	r0, r6, #127	; 0x7f
   b5b54:	f7ff ffce 	bl	b5af4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
		SPI.transfer(dataToWrite);
   b5b58:	4628      	mov	r0, r5
   b5b5a:	f7ff ffcb 	bl	b5af4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
		digitalWrite(settings.chipSelectPin, HIGH);
   b5b5e:	78a0      	ldrb	r0, [r4, #2]
   b5b60:	4639      	mov	r1, r7
}
   b5b62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		digitalWrite(settings.chipSelectPin, HIGH);
   b5b66:	f002 b85c 	b.w	b7c22 <digitalWrite>

000b5b6a <_ZN6BME28012readRegisterEh>:
{
   b5b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (settings.commInterface) {
   b5b6c:	7807      	ldrb	r7, [r0, #0]
{
   b5b6e:	4604      	mov	r4, r0
   b5b70:	460e      	mov	r6, r1
	switch (settings.commInterface) {
   b5b72:	b11f      	cbz	r7, b5b7c <_ZN6BME28012readRegisterEh+0x12>
   b5b74:	2f01      	cmp	r7, #1
   b5b76:	d024      	beq.n	b5bc2 <_ZN6BME28012readRegisterEh+0x58>
}
   b5b78:	4628      	mov	r0, r5
   b5b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Wire.beginTransmission(settings.I2CAddress);
   b5b7c:	f002 f898 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b5b80:	7861      	ldrb	r1, [r4, #1]
   b5b82:	f001 f8c3 	bl	b6d0c <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(offset);
   b5b86:	f002 f893 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b5b8a:	6803      	ldr	r3, [r0, #0]
   b5b8c:	4631      	mov	r1, r6
   b5b8e:	689b      	ldr	r3, [r3, #8]
   b5b90:	4798      	blx	r3
		Wire.endTransmission();
   b5b92:	f002 f88d 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b5b96:	f001 f8c1 	bl	b6d1c <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(settings.I2CAddress, numBytes);
   b5b9a:	f002 f889 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b5b9e:	7861      	ldrb	r1, [r4, #1]
   b5ba0:	2201      	movs	r2, #1
   b5ba2:	f001 f8b0 	bl	b6d06 <_ZN7TwoWire11requestFromEhj>
		while ( Wire.available() ) // slave may send less than requested
   b5ba6:	f002 f883 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b5baa:	6803      	ldr	r3, [r0, #0]
   b5bac:	691b      	ldr	r3, [r3, #16]
   b5bae:	4798      	blx	r3
   b5bb0:	2800      	cmp	r0, #0
   b5bb2:	d0e1      	beq.n	b5b78 <_ZN6BME28012readRegisterEh+0xe>
			result = Wire.read(); // receive a byte as a proper uint8_t
   b5bb4:	f002 f87c 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b5bb8:	6803      	ldr	r3, [r0, #0]
   b5bba:	695b      	ldr	r3, [r3, #20]
   b5bbc:	4798      	blx	r3
   b5bbe:	b2c5      	uxtb	r5, r0
		while ( Wire.available() ) // slave may send less than requested
   b5bc0:	e7f1      	b.n	b5ba6 <_ZN6BME28012readRegisterEh+0x3c>
		digitalWrite(settings.chipSelectPin, LOW);
   b5bc2:	2100      	movs	r1, #0
   b5bc4:	7880      	ldrb	r0, [r0, #2]
   b5bc6:	f002 f82c 	bl	b7c22 <digitalWrite>
		SPI.transfer(offset | 0x80);  //Ored with "read request" bit
   b5bca:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   b5bce:	f7ff ff91 	bl	b5af4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
		result = SPI.transfer(0x00);
   b5bd2:	2000      	movs	r0, #0
   b5bd4:	f7ff ff8e 	bl	b5af4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
		digitalWrite(settings.chipSelectPin, HIGH);
   b5bd8:	4639      	mov	r1, r7
		result = SPI.transfer(0x00);
   b5bda:	4605      	mov	r5, r0
		digitalWrite(settings.chipSelectPin, HIGH);
   b5bdc:	78a0      	ldrb	r0, [r4, #2]
   b5bde:	f002 f820 	bl	b7c22 <digitalWrite>
		break;
   b5be2:	e7c9      	b.n	b5b78 <_ZN6BME28012readRegisterEh+0xe>

000b5be4 <_ZN6BME28017readFloatPressureEv>:
{
   b5be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t adc_P = ((uint32_t)readRegister(BME280_PRESSURE_MSB_REG) << 12) | ((uint32_t)readRegister(BME280_PRESSURE_LSB_REG) << 4) | ((readRegister(BME280_PRESSURE_XLSB_REG) >> 4) & 0x0F);
   b5be8:	21f7      	movs	r1, #247	; 0xf7
{
   b5bea:	4607      	mov	r7, r0
	int32_t adc_P = ((uint32_t)readRegister(BME280_PRESSURE_MSB_REG) << 12) | ((uint32_t)readRegister(BME280_PRESSURE_LSB_REG) << 4) | ((readRegister(BME280_PRESSURE_XLSB_REG) >> 4) & 0x0F);
   b5bec:	f7ff ffbd 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5bf0:	21f8      	movs	r1, #248	; 0xf8
   b5bf2:	4680      	mov	r8, r0
   b5bf4:	4638      	mov	r0, r7
   b5bf6:	f7ff ffb8 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5bfa:	21f9      	movs	r1, #249	; 0xf9
   b5bfc:	4681      	mov	r9, r0
   b5bfe:	4638      	mov	r0, r7
   b5c00:	f7ff ffb3 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5c04:	4606      	mov	r6, r0
	var1 = ((int64_t)t_fine) - 128000;
   b5c06:	6b38      	ldr	r0, [r7, #48]	; 0x30
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
   b5c08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
	var1 = ((int64_t)t_fine) - 128000;
   b5c0c:	f5b0 3bfa 	subs.w	fp, r0, #128000	; 0x1f400
   b5c10:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   b5c14:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
   b5c18:	17dc      	asrs	r4, r3, #31
   b5c1a:	fb03 f20e 	mul.w	r2, r3, lr
   b5c1e:	fb0b 2204 	mla	r2, fp, r4, r2
   b5c22:	fba3 340b 	umull	r3, r4, r3, fp
   b5c26:	4422      	add	r2, r4
   b5c28:	0312      	lsls	r2, r2, #12
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
   b5c2a:	fbab 010b 	umull	r0, r1, fp, fp
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
   b5c2e:	031c      	lsls	r4, r3, #12
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
   b5c30:	fb0b f50e 	mul.w	r5, fp, lr
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
   b5c34:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
   b5c38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
   b5c3c:	eb01 0145 	add.w	r1, r1, r5, lsl #1
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
   b5c40:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b5c44:	fb03 f501 	mul.w	r5, r3, r1
   b5c48:	fb00 550c 	mla	r5, r0, ip, r5
   b5c4c:	fba3 3c00 	umull	r3, ip, r3, r0
   b5c50:	4465      	add	r5, ip
   b5c52:	0a1b      	lsrs	r3, r3, #8
   b5c54:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   b5c58:	191b      	adds	r3, r3, r4
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)calibration.dig_P1)>>33;
   b5c5a:	f8b7 c010 	ldrh.w	ip, [r7, #16]
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
   b5c5e:	eb42 2225 	adc.w	r2, r2, r5, asr #8
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)calibration.dig_P1)>>33;
   b5c62:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b5c66:	fba3 350c 	umull	r3, r5, r3, ip
   b5c6a:	fb0c 5502 	mla	r5, ip, r2, r5
   b5c6e:	17eb      	asrs	r3, r5, #31
   b5c70:	106a      	asrs	r2, r5, #1
	if (var1 == 0)
   b5c72:	ea53 0565 	orrs.w	r5, r3, r5, asr #1
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)calibration.dig_P1)>>33;
   b5c76:	f04f 0400 	mov.w	r4, #0
	if (var1 == 0)
   b5c7a:	f000 8081 	beq.w	b5d80 <_ZN6BME28017readFloatPressureEv+0x19c>
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
   b5c7e:	f9b7 a01a 	ldrsh.w	sl, [r7, #26]
   b5c82:	ea4f 7cea 	mov.w	ip, sl, asr #31
   b5c86:	fb0a f501 	mul.w	r5, sl, r1
   b5c8a:	fb00 550c 	mla	r5, r0, ip, r5
   b5c8e:	fbaa a000 	umull	sl, r0, sl, r0
   b5c92:	4405      	add	r5, r0
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
   b5c94:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
   b5c98:	fb00 fc0e 	mul.w	ip, r0, lr
   b5c9c:	17c1      	asrs	r1, r0, #31
   b5c9e:	fb0b cc01 	mla	ip, fp, r1, ip
   b5ca2:	fba0 0b0b 	umull	r0, fp, r0, fp
   b5ca6:	44dc      	add	ip, fp
   b5ca8:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
   b5cac:	ea4c 3cd0 	orr.w	ip, ip, r0, lsr #15
   b5cb0:	0440      	lsls	r0, r0, #17
   b5cb2:	eb10 000a 	adds.w	r0, r0, sl
	int32_t adc_P = ((uint32_t)readRegister(BME280_PRESSURE_MSB_REG) << 12) | ((uint32_t)readRegister(BME280_PRESSURE_LSB_REG) << 4) | ((readRegister(BME280_PRESSURE_XLSB_REG) >> 4) & 0x0F);
   b5cb6:	f3c6 1607 	ubfx	r6, r6, #4, #8
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
   b5cba:	eb45 0c0c 	adc.w	ip, r5, ip
	int32_t adc_P = ((uint32_t)readRegister(BME280_PRESSURE_MSB_REG) << 12) | ((uint32_t)readRegister(BME280_PRESSURE_LSB_REG) << 4) | ((readRegister(BME280_PRESSURE_XLSB_REG) >> 4) & 0x0F);
   b5cbe:	ea46 1509 	orr.w	r5, r6, r9, lsl #4
   b5cc2:	ea45 3108 	orr.w	r1, r5, r8, lsl #12
	p_acc = 1048576 - adc_P;
   b5cc6:	f5c1 1180 	rsb	r1, r1, #1048576	; 0x100000
	var2 = var2 + (((int64_t)calibration.dig_P4)<<35);
   b5cca:	f9b7 5016 	ldrsh.w	r5, [r7, #22]
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
   b5cce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b5cd2:	ea46 0651 	orr.w	r6, r6, r1, lsr #1
	var2 = var2 + (((int64_t)calibration.dig_P4)<<35);
   b5cd6:	1824      	adds	r4, r4, r0
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
   b5cd8:	07c9      	lsls	r1, r1, #31
   b5cda:	1b0c      	subs	r4, r1, r4
	var2 = var2 + (((int64_t)calibration.dig_P4)<<35);
   b5cdc:	eb0c 0cc5 	add.w	ip, ip, r5, lsl #3
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
   b5ce0:	f640 4535 	movw	r5, #3125	; 0xc35
   b5ce4:	eb66 060c 	sbc.w	r6, r6, ip
   b5ce8:	fba4 0105 	umull	r0, r1, r4, r5
   b5cec:	fb05 1106 	mla	r1, r5, r6, r1
   b5cf0:	f7fe ffa8 	bl	b4c44 <__aeabi_ldivmod>
	var1 = (((int64_t)calibration.dig_P9) * (p_acc>>13) * (p_acc>>13)) >> 25;
   b5cf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
   b5cf8:	f9b7 501e 	ldrsh.w	r5, [r7, #30]
	var1 = (((int64_t)calibration.dig_P9) * (p_acc>>13) * (p_acc>>13)) >> 25;
   b5cfc:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b5d00:	0b43      	lsrs	r3, r0, #13
   b5d02:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b5d06:	fb02 f60c 	mul.w	r6, r2, ip
   b5d0a:	17d4      	asrs	r4, r2, #31
   b5d0c:	fb03 6604 	mla	r6, r3, r4, r6
   b5d10:	fba2 2403 	umull	r2, r4, r2, r3
   b5d14:	4434      	add	r4, r6
   b5d16:	fb02 f60c 	mul.w	r6, r2, ip
   b5d1a:	fb03 6604 	mla	r6, r3, r4, r6
   b5d1e:	fba2 2303 	umull	r2, r3, r2, r3
   b5d22:	441e      	add	r6, r3
   b5d24:	0e53      	lsrs	r3, r2, #25
   b5d26:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
   b5d2a:	181b      	adds	r3, r3, r0
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
   b5d2c:	ea4f 72e5 	mov.w	r2, r5, asr #31
   b5d30:	fb05 f401 	mul.w	r4, r5, r1
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
   b5d34:	4686      	mov	lr, r0
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
   b5d36:	eb41 6666 	adc.w	r6, r1, r6, asr #25
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
   b5d3a:	fb02 4100 	mla	r1, r2, r0, r4
   b5d3e:	fba5 050e 	umull	r0, r5, r5, lr
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
   b5d42:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
   b5d46:	4429      	add	r1, r5
   b5d48:	0cc0      	lsrs	r0, r0, #19
   b5d4a:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
   b5d4e:	1818      	adds	r0, r3, r0
   b5d50:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b5d54:	eb46 41e1 	adc.w	r1, r6, r1, asr #19
   b5d58:	0a00      	lsrs	r0, r0, #8
   b5d5a:	012d      	lsls	r5, r5, #4
   b5d5c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b5d60:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b5d64:	0124      	lsls	r4, r4, #4
   b5d66:	1820      	adds	r0, r4, r0
	return (float)p_acc / 256.0;
   b5d68:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b5d6c:	f7fe ff2c 	bl	b4bc8 <__aeabi_l2f>
   b5d70:	ed9f 0a05 	vldr	s0, [pc, #20]	; b5d88 <_ZN6BME28017readFloatPressureEv+0x1a4>
   b5d74:	ee07 0a90 	vmov	s15, r0
   b5d78:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b5d7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0; // avoid exception caused by division by zero
   b5d80:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5d8c <_ZN6BME28017readFloatPressureEv+0x1a8>
   b5d84:	e7fa      	b.n	b5d7c <_ZN6BME28017readFloatPressureEv+0x198>
   b5d86:	bf00      	nop
   b5d88:	3b800000 	.word	0x3b800000
   b5d8c:	00000000 	.word	0x00000000

000b5d90 <_ZN6BME28023readFloatAltitudeMetersEv>:
{
   b5d90:	b508      	push	{r3, lr}
	heightOutput = ((float)-45846.2)*(pow(((float)readFloatPressure()/(float)101325), 0.190263) - (float)1);
   b5d92:	f7ff ff27 	bl	b5be4 <_ZN6BME28017readFloatPressureEv>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b5d96:	eddf 7a14 	vldr	s15, [pc, #80]	; b5de8 <_ZN6BME28023readFloatAltitudeMetersEv+0x58>
   b5d9a:	eec0 7a27 	vdiv.f32	s15, s0, s15
   b5d9e:	ee17 0a90 	vmov	r0, s15
   b5da2:	f7fe faa1 	bl	b42e8 <__aeabi_f2d>
   b5da6:	ed9f 1b0c 	vldr	d1, [pc, #48]	; b5dd8 <_ZN6BME28023readFloatAltitudeMetersEv+0x48>
   b5daa:	ec41 0b10 	vmov	d0, r0, r1
   b5dae:	f001 ffeb 	bl	b7d88 <pow>
   b5db2:	4b0e      	ldr	r3, [pc, #56]	; (b5dec <_ZN6BME28023readFloatAltitudeMetersEv+0x5c>)
   b5db4:	ec51 0b10 	vmov	r0, r1, d0
   b5db8:	2200      	movs	r2, #0
   b5dba:	f7fe f935 	bl	b4028 <__aeabi_dsub>
   b5dbe:	a308      	add	r3, pc, #32	; (adr r3, b5de0 <_ZN6BME28023readFloatAltitudeMetersEv+0x50>)
   b5dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5dc4:	f7fe fae8 	bl	b4398 <__aeabi_dmul>
   b5dc8:	f7fe fdde 	bl	b4988 <__aeabi_d2f>
}
   b5dcc:	ee00 0a10 	vmov	s0, r0
   b5dd0:	bd08      	pop	{r3, pc}
   b5dd2:	bf00      	nop
   b5dd4:	f3af 8000 	nop.w
   b5dd8:	b951c5c5 	.word	0xb951c5c5
   b5ddc:	3fc85a89 	.word	0x3fc85a89
   b5de0:	60000000 	.word	0x60000000
   b5de4:	c0e662c6 	.word	0xc0e662c6
   b5de8:	47c5e680 	.word	0x47c5e680
   b5dec:	3ff00000 	.word	0x3ff00000

000b5df0 <_ZN6BME28017readFloatHumidityEv>:
{
   b5df0:	b570      	push	{r4, r5, r6, lr}
	int32_t adc_H = ((uint32_t)readRegister(BME280_HUMIDITY_MSB_REG) << 8) | ((uint32_t)readRegister(BME280_HUMIDITY_LSB_REG));
   b5df2:	21fd      	movs	r1, #253	; 0xfd
{
   b5df4:	4604      	mov	r4, r0
	int32_t adc_H = ((uint32_t)readRegister(BME280_HUMIDITY_MSB_REG) << 8) | ((uint32_t)readRegister(BME280_HUMIDITY_LSB_REG));
   b5df6:	f7ff feb8 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5dfa:	21fe      	movs	r1, #254	; 0xfe
   b5dfc:	4606      	mov	r6, r0
   b5dfe:	4620      	mov	r0, r4
   b5e00:	f7ff feb3 	bl	b5b6a <_ZN6BME28012readRegisterEh>
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
   b5e04:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
	var1 = (t_fine - ((int32_t)76800));
   b5e08:	6b21      	ldr	r1, [r4, #48]	; 0x30
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
   b5e0a:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
	int32_t adc_H = ((uint32_t)readRegister(BME280_HUMIDITY_MSB_REG) << 8) | ((uint32_t)readRegister(BME280_HUMIDITY_LSB_REG));
   b5e0e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
   b5e12:	051b      	lsls	r3, r3, #20
	var1 = (t_fine - ((int32_t)76800));
   b5e14:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
   b5e18:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   b5e1c:	fb05 3312 	mls	r3, r5, r2, r3
   b5e20:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	((int32_t)16384)) >> 15) * (((((((var1 * ((int32_t)calibration.dig_H6)) >> 10) * (((var1 * ((int32_t)calibration.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
   b5e24:	13da      	asrs	r2, r3, #15
   b5e26:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   b5e2a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   b5e2e:	436b      	muls	r3, r5
   b5e30:	4369      	muls	r1, r5
   b5e32:	12db      	asrs	r3, r3, #11
   b5e34:	1289      	asrs	r1, r1, #10
   b5e36:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   b5e3a:	434b      	muls	r3, r1
   b5e3c:	129b      	asrs	r3, r3, #10
	((int32_t)calibration.dig_H2) + 8192) >> 14));
   b5e3e:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
	((int32_t)16384)) >> 15) * (((((((var1 * ((int32_t)calibration.dig_H6)) >> 10) * (((var1 * ((int32_t)calibration.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
   b5e42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   b5e46:	434b      	muls	r3, r1
	((int32_t)calibration.dig_H2) + 8192) >> 14));
   b5e48:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b5e4c:	139b      	asrs	r3, r3, #14
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
   b5e4e:	4353      	muls	r3, r2
	var1 = (var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7) * ((int32_t)calibration.dig_H1)) >> 4));
   b5e50:	13da      	asrs	r2, r3, #15
   b5e52:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   b5e56:	4352      	muls	r2, r2
   b5e58:	11d2      	asrs	r2, r2, #7
   b5e5a:	434a      	muls	r2, r1
   b5e5c:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	var1 = (var1 < 0 ? 0 : var1);
   b5e60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	var1 = (var1 > 419430400 ? 419430400 : var1);
   b5e64:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b5e68:	bfa8      	it	ge
   b5e6a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	return (float)(var1>>12) / 1024.0;
   b5e6e:	131b      	asrs	r3, r3, #12
   b5e70:	ee00 3a10 	vmov	s0, r3
}
   b5e74:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   b5e78:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5e7c <_ZN6BME2809readTempCEv>:
{
   b5e7c:	b538      	push	{r3, r4, r5, lr}
	int32_t adc_T = ((uint32_t)readRegister(BME280_TEMPERATURE_MSB_REG) << 12) | ((uint32_t)readRegister(BME280_TEMPERATURE_LSB_REG) << 4) | ((readRegister(BME280_TEMPERATURE_XLSB_REG) >> 4) & 0x0F);
   b5e7e:	21fa      	movs	r1, #250	; 0xfa
{
   b5e80:	4604      	mov	r4, r0
	int32_t adc_T = ((uint32_t)readRegister(BME280_TEMPERATURE_MSB_REG) << 12) | ((uint32_t)readRegister(BME280_TEMPERATURE_LSB_REG) << 4) | ((readRegister(BME280_TEMPERATURE_XLSB_REG) >> 4) & 0x0F);
   b5e82:	f7ff fe72 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5e86:	21fb      	movs	r1, #251	; 0xfb
   b5e88:	4605      	mov	r5, r0
   b5e8a:	4620      	mov	r0, r4
   b5e8c:	f7ff fe6d 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5e90:	21fc      	movs	r1, #252	; 0xfc
   b5e92:	0102      	lsls	r2, r0, #4
   b5e94:	4620      	mov	r0, r4
   b5e96:	ea42 3505 	orr.w	r5, r2, r5, lsl #12
   b5e9a:	f7ff fe66 	bl	b5b6a <_ZN6BME28012readRegisterEh>
	var1 = ((((adc_T>>3) - ((int32_t)calibration.dig_T1<<1))) * ((int32_t)calibration.dig_T2)) >> 11;
   b5e9e:	8963      	ldrh	r3, [r4, #10]
}
   b5ea0:	ed9f 0a11 	vldr	s0, [pc, #68]	; b5ee8 <_ZN6BME2809readTempCEv+0x6c>
	int32_t adc_T = ((uint32_t)readRegister(BME280_TEMPERATURE_MSB_REG) << 12) | ((uint32_t)readRegister(BME280_TEMPERATURE_LSB_REG) << 4) | ((readRegister(BME280_TEMPERATURE_XLSB_REG) >> 4) & 0x0F);
   b5ea4:	f3c0 1007 	ubfx	r0, r0, #4, #8
   b5ea8:	ea40 0105 	orr.w	r1, r0, r5
	var2 = (((((adc_T>>4) - ((int32_t)calibration.dig_T1)) * ((adc_T>>4) - ((int32_t)calibration.dig_T1))) >> 12) *
   b5eac:	ebc3 1221 	rsb	r2, r3, r1, asr #4
	var1 = ((((adc_T>>3) - ((int32_t)calibration.dig_T1<<1))) * ((int32_t)calibration.dig_T2)) >> 11;
   b5eb0:	005b      	lsls	r3, r3, #1
   b5eb2:	ebc3 03e1 	rsb	r3, r3, r1, asr #3
   b5eb6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b5eba:	4359      	muls	r1, r3
	var2 = (((((adc_T>>4) - ((int32_t)calibration.dig_T1)) * ((adc_T>>4) - ((int32_t)calibration.dig_T1))) >> 12) *
   b5ebc:	fb02 f302 	mul.w	r3, r2, r2
	((int32_t)calibration.dig_T3)) >> 14;
   b5ec0:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
	var2 = (((((adc_T>>4) - ((int32_t)calibration.dig_T1)) * ((adc_T>>4) - ((int32_t)calibration.dig_T1))) >> 12) *
   b5ec4:	131b      	asrs	r3, r3, #12
   b5ec6:	4353      	muls	r3, r2
	((int32_t)calibration.dig_T3)) >> 14;
   b5ec8:	139b      	asrs	r3, r3, #14
	t_fine = var1 + var2;
   b5eca:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b5ece:	6323      	str	r3, [r4, #48]	; 0x30
	float output = (t_fine * 5 + 128) >> 8;
   b5ed0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5ed4:	3380      	adds	r3, #128	; 0x80
   b5ed6:	121b      	asrs	r3, r3, #8
   b5ed8:	ee07 3a90 	vmov	s15, r3
   b5edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
   b5ee0:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5ee4:	bd38      	pop	{r3, r4, r5, pc}
   b5ee6:	bf00      	nop
   b5ee8:	42c80000 	.word	0x42c80000

000b5eec <_ZN6BME2805beginEv>:
{
   b5eec:	b538      	push	{r3, r4, r5, lr}
	switch (settings.commInterface)
   b5eee:	7805      	ldrb	r5, [r0, #0]
{
   b5ef0:	4604      	mov	r4, r0
	switch (settings.commInterface)
   b5ef2:	2d00      	cmp	r5, #0
   b5ef4:	f000 80fc 	beq.w	b60f0 <_ZN6BME2805beginEv+0x204>
   b5ef8:	2d01      	cmp	r5, #1
   b5efa:	f000 80fe 	beq.w	b60fa <_ZN6BME2805beginEv+0x20e>
	calibration.dig_T1 = ((uint16_t)((readRegister(BME280_DIG_T1_MSB_REG) << 8) + readRegister(BME280_DIG_T1_LSB_REG)));
   b5efe:	2189      	movs	r1, #137	; 0x89
   b5f00:	4620      	mov	r0, r4
   b5f02:	f7ff fe32 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5f06:	2188      	movs	r1, #136	; 0x88
   b5f08:	4605      	mov	r5, r0
   b5f0a:	4620      	mov	r0, r4
   b5f0c:	f7ff fe2d 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5f10:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   b5f14:	8160      	strh	r0, [r4, #10]
	calibration.dig_T2 = ((int16_t)((readRegister(BME280_DIG_T2_MSB_REG) << 8) + readRegister(BME280_DIG_T2_LSB_REG)));
   b5f16:	218b      	movs	r1, #139	; 0x8b
   b5f18:	4620      	mov	r0, r4
   b5f1a:	f7ff fe26 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5f1e:	218a      	movs	r1, #138	; 0x8a
   b5f20:	4605      	mov	r5, r0
   b5f22:	4620      	mov	r0, r4
   b5f24:	f7ff fe21 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5f28:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   b5f2c:	81a0      	strh	r0, [r4, #12]
	calibration.dig_T3 = ((int16_t)((readRegister(BME280_DIG_T3_MSB_REG) << 8) + readRegister(BME280_DIG_T3_LSB_REG)));
   b5f2e:	218d      	movs	r1, #141	; 0x8d
   b5f30:	4620      	mov	r0, r4
   b5f32:	f7ff fe1a 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5f36:	218c      	movs	r1, #140	; 0x8c
   b5f38:	4605      	mov	r5, r0
   b5f3a:	4620      	mov	r0, r4
   b5f3c:	f7ff fe15 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5f40:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   b5f44:	81e0      	strh	r0, [r4, #14]
	calibration.dig_P1 = ((uint16_t)((readRegister(BME280_DIG_P1_MSB_REG) << 8) + readRegister(BME280_DIG_P1_LSB_REG)));
   b5f46:	218f      	movs	r1, #143	; 0x8f
   b5f48:	4620      	mov	r0, r4
   b5f4a:	f7ff fe0e 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5f4e:	218e      	movs	r1, #142	; 0x8e
   b5f50:	4605      	mov	r5, r0
   b5f52:	4620      	mov	r0, r4
   b5f54:	f7ff fe09 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5f58:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   b5f5c:	8220      	strh	r0, [r4, #16]
	calibration.dig_P2 = ((int16_t)((readRegister(BME280_DIG_P2_MSB_REG) << 8) + readRegister(BME280_DIG_P2_LSB_REG)));
   b5f5e:	2191      	movs	r1, #145	; 0x91
   b5f60:	4620      	mov	r0, r4
   b5f62:	f7ff fe02 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5f66:	2190      	movs	r1, #144	; 0x90
   b5f68:	4605      	mov	r5, r0
   b5f6a:	4620      	mov	r0, r4
   b5f6c:	f7ff fdfd 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5f70:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   b5f74:	8260      	strh	r0, [r4, #18]
	calibration.dig_P3 = ((int16_t)((readRegister(BME280_DIG_P3_MSB_REG) << 8) + readRegister(BME280_DIG_P3_LSB_REG)));
   b5f76:	2193      	movs	r1, #147	; 0x93
   b5f78:	4620      	mov	r0, r4
   b5f7a:	f7ff fdf6 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5f7e:	2192      	movs	r1, #146	; 0x92
   b5f80:	4605      	mov	r5, r0
   b5f82:	4620      	mov	r0, r4
   b5f84:	f7ff fdf1 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5f88:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   b5f8c:	82a0      	strh	r0, [r4, #20]
	calibration.dig_P4 = ((int16_t)((readRegister(BME280_DIG_P4_MSB_REG) << 8) + readRegister(BME280_DIG_P4_LSB_REG)));
   b5f8e:	2195      	movs	r1, #149	; 0x95
   b5f90:	4620      	mov	r0, r4
   b5f92:	f7ff fdea 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5f96:	2194      	movs	r1, #148	; 0x94
   b5f98:	4605      	mov	r5, r0
   b5f9a:	4620      	mov	r0, r4
   b5f9c:	f7ff fde5 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5fa0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   b5fa4:	82e0      	strh	r0, [r4, #22]
	calibration.dig_P5 = ((int16_t)((readRegister(BME280_DIG_P5_MSB_REG) << 8) + readRegister(BME280_DIG_P5_LSB_REG)));
   b5fa6:	2197      	movs	r1, #151	; 0x97
   b5fa8:	4620      	mov	r0, r4
   b5faa:	f7ff fdde 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5fae:	2196      	movs	r1, #150	; 0x96
   b5fb0:	4605      	mov	r5, r0
   b5fb2:	4620      	mov	r0, r4
   b5fb4:	f7ff fdd9 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5fb8:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   b5fbc:	8320      	strh	r0, [r4, #24]
	calibration.dig_P6 = ((int16_t)((readRegister(BME280_DIG_P6_MSB_REG) << 8) + readRegister(BME280_DIG_P6_LSB_REG)));
   b5fbe:	2199      	movs	r1, #153	; 0x99
   b5fc0:	4620      	mov	r0, r4
   b5fc2:	f7ff fdd2 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5fc6:	2198      	movs	r1, #152	; 0x98
   b5fc8:	4605      	mov	r5, r0
   b5fca:	4620      	mov	r0, r4
   b5fcc:	f7ff fdcd 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5fd0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   b5fd4:	8360      	strh	r0, [r4, #26]
	calibration.dig_P7 = ((int16_t)((readRegister(BME280_DIG_P7_MSB_REG) << 8) + readRegister(BME280_DIG_P7_LSB_REG)));
   b5fd6:	219b      	movs	r1, #155	; 0x9b
   b5fd8:	4620      	mov	r0, r4
   b5fda:	f7ff fdc6 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5fde:	219a      	movs	r1, #154	; 0x9a
   b5fe0:	4605      	mov	r5, r0
   b5fe2:	4620      	mov	r0, r4
   b5fe4:	f7ff fdc1 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5fe8:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   b5fec:	83a0      	strh	r0, [r4, #28]
	calibration.dig_P8 = ((int16_t)((readRegister(BME280_DIG_P8_MSB_REG) << 8) + readRegister(BME280_DIG_P8_LSB_REG)));
   b5fee:	219d      	movs	r1, #157	; 0x9d
   b5ff0:	4620      	mov	r0, r4
   b5ff2:	f7ff fdba 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b5ff6:	219c      	movs	r1, #156	; 0x9c
   b5ff8:	4605      	mov	r5, r0
   b5ffa:	4620      	mov	r0, r4
   b5ffc:	f7ff fdb5 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b6000:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   b6004:	83e0      	strh	r0, [r4, #30]
	calibration.dig_P9 = ((int16_t)((readRegister(BME280_DIG_P9_MSB_REG) << 8) + readRegister(BME280_DIG_P9_LSB_REG)));
   b6006:	219f      	movs	r1, #159	; 0x9f
   b6008:	4620      	mov	r0, r4
   b600a:	f7ff fdae 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b600e:	219e      	movs	r1, #158	; 0x9e
   b6010:	4605      	mov	r5, r0
   b6012:	4620      	mov	r0, r4
   b6014:	f7ff fda9 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b6018:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   b601c:	8420      	strh	r0, [r4, #32]
	calibration.dig_H1 = ((uint8_t)(readRegister(BME280_DIG_H1_REG)));
   b601e:	21a1      	movs	r1, #161	; 0xa1
   b6020:	4620      	mov	r0, r4
   b6022:	f7ff fda2 	bl	b5b6a <_ZN6BME28012readRegisterEh>
	calibration.dig_H2 = ((int16_t)((readRegister(BME280_DIG_H2_MSB_REG) << 8) + readRegister(BME280_DIG_H2_LSB_REG)));
   b6026:	21e2      	movs	r1, #226	; 0xe2
	calibration.dig_H1 = ((uint8_t)(readRegister(BME280_DIG_H1_REG)));
   b6028:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
	calibration.dig_H2 = ((int16_t)((readRegister(BME280_DIG_H2_MSB_REG) << 8) + readRegister(BME280_DIG_H2_LSB_REG)));
   b602c:	4620      	mov	r0, r4
   b602e:	f7ff fd9c 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b6032:	21e1      	movs	r1, #225	; 0xe1
   b6034:	4605      	mov	r5, r0
   b6036:	4620      	mov	r0, r4
   b6038:	f7ff fd97 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b603c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   b6040:	84a0      	strh	r0, [r4, #36]	; 0x24
	calibration.dig_H3 = ((uint8_t)(readRegister(BME280_DIG_H3_REG)));
   b6042:	21e3      	movs	r1, #227	; 0xe3
   b6044:	4620      	mov	r0, r4
   b6046:	f7ff fd90 	bl	b5b6a <_ZN6BME28012readRegisterEh>
	calibration.dig_H4 = ((int16_t)((readRegister(BME280_DIG_H4_MSB_REG) << 4) + (readRegister(BME280_DIG_H4_LSB_REG) & 0x0F)));
   b604a:	21e4      	movs	r1, #228	; 0xe4
	calibration.dig_H3 = ((uint8_t)(readRegister(BME280_DIG_H3_REG)));
   b604c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
	calibration.dig_H4 = ((int16_t)((readRegister(BME280_DIG_H4_MSB_REG) << 4) + (readRegister(BME280_DIG_H4_LSB_REG) & 0x0F)));
   b6050:	4620      	mov	r0, r4
   b6052:	f7ff fd8a 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b6056:	21e5      	movs	r1, #229	; 0xe5
   b6058:	4605      	mov	r5, r0
   b605a:	4620      	mov	r0, r4
   b605c:	f7ff fd85 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b6060:	f000 030f 	and.w	r3, r0, #15
   b6064:	eb03 1005 	add.w	r0, r3, r5, lsl #4
   b6068:	8520      	strh	r0, [r4, #40]	; 0x28
	calibration.dig_H5 = ((int16_t)((readRegister(BME280_DIG_H5_MSB_REG) << 4) + ((readRegister(BME280_DIG_H4_LSB_REG) >> 4) & 0x0F)));
   b606a:	21e6      	movs	r1, #230	; 0xe6
   b606c:	4620      	mov	r0, r4
   b606e:	f7ff fd7c 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b6072:	21e5      	movs	r1, #229	; 0xe5
   b6074:	4605      	mov	r5, r0
   b6076:	4620      	mov	r0, r4
   b6078:	f7ff fd77 	bl	b5b6a <_ZN6BME28012readRegisterEh>
   b607c:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b6080:	eb03 1005 	add.w	r0, r3, r5, lsl #4
   b6084:	8560      	strh	r0, [r4, #42]	; 0x2a
	calibration.dig_H6 = ((uint8_t)readRegister(BME280_DIG_H6_REG));
   b6086:	21e7      	movs	r1, #231	; 0xe7
   b6088:	4620      	mov	r0, r4
   b608a:	f7ff fd6e 	bl	b5b6a <_ZN6BME28012readRegisterEh>
	writeRegister(BME280_CTRL_MEAS_REG, 0x00);
   b608e:	2200      	movs	r2, #0
	calibration.dig_H6 = ((uint8_t)readRegister(BME280_DIG_H6_REG));
   b6090:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
	writeRegister(BME280_CTRL_MEAS_REG, 0x00);
   b6094:	21f4      	movs	r1, #244	; 0xf4
   b6096:	4620      	mov	r0, r4
   b6098:	f7ff fd36 	bl	b5b08 <_ZN6BME28013writeRegisterEhh>
	dataToWrite |= (settings.filter << 0x02) & 0x1C;
   b609c:	7962      	ldrb	r2, [r4, #5]
	dataToWrite = (settings.tStandby << 0x5) & 0xE0;
   b609e:	7923      	ldrb	r3, [r4, #4]
	dataToWrite |= (settings.filter << 0x02) & 0x1C;
   b60a0:	0092      	lsls	r2, r2, #2
   b60a2:	f002 021c 	and.w	r2, r2, #28
   b60a6:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
	writeRegister(BME280_CONFIG_REG, dataToWrite);
   b60aa:	4620      	mov	r0, r4
   b60ac:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   b60b0:	21f5      	movs	r1, #245	; 0xf5
   b60b2:	f7ff fd29 	bl	b5b08 <_ZN6BME28013writeRegisterEhh>
	dataToWrite = settings.humidOverSample & 0x07; //all other bits can be ignored
   b60b6:	7a22      	ldrb	r2, [r4, #8]
	writeRegister(BME280_CTRL_HUMIDITY_REG, dataToWrite);
   b60b8:	4620      	mov	r0, r4
   b60ba:	f002 0207 	and.w	r2, r2, #7
   b60be:	21f2      	movs	r1, #242	; 0xf2
   b60c0:	f7ff fd22 	bl	b5b08 <_ZN6BME28013writeRegisterEhh>
	dataToWrite |= (settings.pressOverSample << 0x02) & 0x1C;
   b60c4:	79e3      	ldrb	r3, [r4, #7]
	dataToWrite = (settings.tempOverSample << 0x5) & 0xE0;
   b60c6:	79a2      	ldrb	r2, [r4, #6]
	dataToWrite |= (settings.pressOverSample << 0x02) & 0x1C;
   b60c8:	009b      	lsls	r3, r3, #2
   b60ca:	f003 031c 	and.w	r3, r3, #28
   b60ce:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	dataToWrite |= (settings.runMode) & 0x03;
   b60d2:	78e2      	ldrb	r2, [r4, #3]
	dataToWrite |= (settings.pressOverSample << 0x02) & 0x1C;
   b60d4:	b2db      	uxtb	r3, r3
	dataToWrite |= (settings.runMode) & 0x03;
   b60d6:	f002 0203 	and.w	r2, r2, #3
	writeRegister(BME280_CTRL_MEAS_REG, dataToWrite);
   b60da:	4620      	mov	r0, r4
   b60dc:	431a      	orrs	r2, r3
   b60de:	21f4      	movs	r1, #244	; 0xf4
   b60e0:	f7ff fd12 	bl	b5b08 <_ZN6BME28013writeRegisterEhh>
	return readRegister(0xD0);
   b60e4:	4620      	mov	r0, r4
   b60e6:	21d0      	movs	r1, #208	; 0xd0
}
   b60e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return readRegister(0xD0);
   b60ec:	f7ff bd3d 	b.w	b5b6a <_ZN6BME28012readRegisterEh>
		Wire.begin();
   b60f0:	f001 fdde 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b60f4:	f000 fdd8 	bl	b6ca8 <_ZN7TwoWire5beginEv>
		break;
   b60f8:	e701      	b.n	b5efe <_ZN6BME2805beginEv+0x12>
        instance().begin();
   b60fa:	f7ff fc8d 	bl	b5a18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b60fe:	f001 f8bb 	bl	b7278 <_ZN8SPIClass5beginEv>
        instance().setClockDivider(divider);
   b6102:	f7ff fc89 	bl	b5a18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6106:	2120      	movs	r1, #32
   b6108:	f001 f9ac 	bl	b7464 <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
   b610c:	f7ff fc84 	bl	b5a18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6110:	4629      	mov	r1, r5
   b6112:	f001 f8c5 	bl	b72a0 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
   b6116:	f7ff fc7f 	bl	b5a18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b611a:	2103      	movs	r1, #3
   b611c:	f001 f8d4 	bl	b72c8 <_ZN8SPIClass11setDataModeEh>
		pinMode(settings.chipSelectPin, OUTPUT);
   b6120:	78a0      	ldrb	r0, [r4, #2]
   b6122:	4629      	mov	r1, r5
   b6124:	f001 fd6c 	bl	b7c00 <pinMode>
		digitalWrite(settings.chipSelectPin, HIGH);
   b6128:	78a0      	ldrb	r0, [r4, #2]
   b612a:	4629      	mov	r1, r5
   b612c:	f001 fd79 	bl	b7c22 <digitalWrite>
		break;
   b6130:	e6e5      	b.n	b5efe <_ZN6BME2805beginEv+0x12>
	...

000b6134 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6134:	b508      	push	{r3, lr}
   b6136:	4b02      	ldr	r3, [pc, #8]	; (b6140 <os_mutex_recursive_create+0xc>)
   b6138:	681b      	ldr	r3, [r3, #0]
   b613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b613c:	9301      	str	r3, [sp, #4]
   b613e:	bd08      	pop	{r3, pc}
   b6140:	00030248 	.word	0x00030248

000b6144 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6144:	b508      	push	{r3, lr}
   b6146:	4b02      	ldr	r3, [pc, #8]	; (b6150 <HAL_RNG_GetRandomNumber+0xc>)
   b6148:	681b      	ldr	r3, [r3, #0]
   b614a:	685b      	ldr	r3, [r3, #4]
   b614c:	9301      	str	r3, [sp, #4]
   b614e:	bd08      	pop	{r3, pc}
   b6150:	00030218 	.word	0x00030218

000b6154 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6154:	b508      	push	{r3, lr}
   b6156:	4b02      	ldr	r3, [pc, #8]	; (b6160 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6158:	681b      	ldr	r3, [r3, #0]
   b615a:	695b      	ldr	r3, [r3, #20]
   b615c:	9301      	str	r3, [sp, #4]
   b615e:	bd08      	pop	{r3, pc}
   b6160:	00030218 	.word	0x00030218

000b6164 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b6164:	b508      	push	{r3, lr}
   b6166:	4b02      	ldr	r3, [pc, #8]	; (b6170 <hal_pin_validate_function+0xc>)
   b6168:	681b      	ldr	r3, [r3, #0]
   b616a:	685b      	ldr	r3, [r3, #4]
   b616c:	9301      	str	r3, [sp, #4]
   b616e:	bd08      	pop	{r3, pc}
   b6170:	0003022c 	.word	0x0003022c

000b6174 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6174:	b508      	push	{r3, lr}
   b6176:	4b02      	ldr	r3, [pc, #8]	; (b6180 <hal_gpio_mode+0xc>)
   b6178:	681b      	ldr	r3, [r3, #0]
   b617a:	689b      	ldr	r3, [r3, #8]
   b617c:	9301      	str	r3, [sp, #4]
   b617e:	bd08      	pop	{r3, pc}
   b6180:	0003022c 	.word	0x0003022c

000b6184 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6184:	b508      	push	{r3, lr}
   b6186:	4b02      	ldr	r3, [pc, #8]	; (b6190 <hal_gpio_get_mode+0xc>)
   b6188:	681b      	ldr	r3, [r3, #0]
   b618a:	68db      	ldr	r3, [r3, #12]
   b618c:	9301      	str	r3, [sp, #4]
   b618e:	bd08      	pop	{r3, pc}
   b6190:	0003022c 	.word	0x0003022c

000b6194 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6194:	b508      	push	{r3, lr}
   b6196:	4b02      	ldr	r3, [pc, #8]	; (b61a0 <hal_gpio_write+0xc>)
   b6198:	681b      	ldr	r3, [r3, #0]
   b619a:	691b      	ldr	r3, [r3, #16]
   b619c:	9301      	str	r3, [sp, #4]
   b619e:	bd08      	pop	{r3, pc}
   b61a0:	0003022c 	.word	0x0003022c

000b61a4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b61a4:	b508      	push	{r3, lr}
   b61a6:	4b02      	ldr	r3, [pc, #8]	; (b61b0 <hal_adc_read+0xc>)
   b61a8:	681b      	ldr	r3, [r3, #0]
   b61aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61ac:	9301      	str	r3, [sp, #4]
   b61ae:	bd08      	pop	{r3, pc}
   b61b0:	0003022c 	.word	0x0003022c

000b61b4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b61b4:	b508      	push	{r3, lr}
   b61b6:	4b02      	ldr	r3, [pc, #8]	; (b61c0 <hal_i2c_begin+0xc>)
   b61b8:	681b      	ldr	r3, [r3, #0]
   b61ba:	68db      	ldr	r3, [r3, #12]
   b61bc:	9301      	str	r3, [sp, #4]
   b61be:	bd08      	pop	{r3, pc}
   b61c0:	00030228 	.word	0x00030228

000b61c4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b61c4:	b508      	push	{r3, lr}
   b61c6:	4b02      	ldr	r3, [pc, #8]	; (b61d0 <hal_i2c_begin_transmission+0xc>)
   b61c8:	681b      	ldr	r3, [r3, #0]
   b61ca:	699b      	ldr	r3, [r3, #24]
   b61cc:	9301      	str	r3, [sp, #4]
   b61ce:	bd08      	pop	{r3, pc}
   b61d0:	00030228 	.word	0x00030228

000b61d4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b61d4:	b508      	push	{r3, lr}
   b61d6:	4b02      	ldr	r3, [pc, #8]	; (b61e0 <hal_i2c_end_transmission+0xc>)
   b61d8:	681b      	ldr	r3, [r3, #0]
   b61da:	69db      	ldr	r3, [r3, #28]
   b61dc:	9301      	str	r3, [sp, #4]
   b61de:	bd08      	pop	{r3, pc}
   b61e0:	00030228 	.word	0x00030228

000b61e4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b61e4:	b508      	push	{r3, lr}
   b61e6:	4b02      	ldr	r3, [pc, #8]	; (b61f0 <hal_i2c_write+0xc>)
   b61e8:	681b      	ldr	r3, [r3, #0]
   b61ea:	6a1b      	ldr	r3, [r3, #32]
   b61ec:	9301      	str	r3, [sp, #4]
   b61ee:	bd08      	pop	{r3, pc}
   b61f0:	00030228 	.word	0x00030228

000b61f4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b61f4:	b508      	push	{r3, lr}
   b61f6:	4b02      	ldr	r3, [pc, #8]	; (b6200 <hal_i2c_available+0xc>)
   b61f8:	681b      	ldr	r3, [r3, #0]
   b61fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	bd08      	pop	{r3, pc}
   b6200:	00030228 	.word	0x00030228

000b6204 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b02      	ldr	r3, [pc, #8]	; (b6210 <hal_i2c_read+0xc>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b620c:	9301      	str	r3, [sp, #4]
   b620e:	bd08      	pop	{r3, pc}
   b6210:	00030228 	.word	0x00030228

000b6214 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6214:	b508      	push	{r3, lr}
   b6216:	4b02      	ldr	r3, [pc, #8]	; (b6220 <hal_i2c_peek+0xc>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b621c:	9301      	str	r3, [sp, #4]
   b621e:	bd08      	pop	{r3, pc}
   b6220:	00030228 	.word	0x00030228

000b6224 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6224:	b508      	push	{r3, lr}
   b6226:	4b02      	ldr	r3, [pc, #8]	; (b6230 <hal_i2c_flush+0xc>)
   b6228:	681b      	ldr	r3, [r3, #0]
   b622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b622c:	9301      	str	r3, [sp, #4]
   b622e:	bd08      	pop	{r3, pc}
   b6230:	00030228 	.word	0x00030228

000b6234 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b02      	ldr	r3, [pc, #8]	; (b6240 <hal_i2c_is_enabled+0xc>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	bd08      	pop	{r3, pc}
   b6240:	00030228 	.word	0x00030228

000b6244 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6244:	b508      	push	{r3, lr}
   b6246:	4b02      	ldr	r3, [pc, #8]	; (b6250 <hal_i2c_init+0xc>)
   b6248:	681b      	ldr	r3, [r3, #0]
   b624a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b624c:	9301      	str	r3, [sp, #4]
   b624e:	bd08      	pop	{r3, pc}
   b6250:	00030228 	.word	0x00030228

000b6254 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6254:	b508      	push	{r3, lr}
   b6256:	4b02      	ldr	r3, [pc, #8]	; (b6260 <hal_i2c_request_ex+0xc>)
   b6258:	681b      	ldr	r3, [r3, #0]
   b625a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b625c:	9301      	str	r3, [sp, #4]
   b625e:	bd08      	pop	{r3, pc}
   b6260:	00030228 	.word	0x00030228

000b6264 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6264:	b508      	push	{r3, lr}
   b6266:	4b02      	ldr	r3, [pc, #8]	; (b6270 <inet_inet_ntop+0xc>)
   b6268:	681b      	ldr	r3, [r3, #0]
   b626a:	695b      	ldr	r3, [r3, #20]
   b626c:	9301      	str	r3, [sp, #4]
   b626e:	bd08      	pop	{r3, pc}
   b6270:	00030264 	.word	0x00030264

000b6274 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6274:	b508      	push	{r3, lr}
   b6276:	4b02      	ldr	r3, [pc, #8]	; (b6280 <netdb_freeaddrinfo+0xc>)
   b6278:	681b      	ldr	r3, [r3, #0]
   b627a:	689b      	ldr	r3, [r3, #8]
   b627c:	9301      	str	r3, [sp, #4]
   b627e:	bd08      	pop	{r3, pc}
   b6280:	00030268 	.word	0x00030268

000b6284 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6284:	b508      	push	{r3, lr}
   b6286:	4b02      	ldr	r3, [pc, #8]	; (b6290 <netdb_getaddrinfo+0xc>)
   b6288:	681b      	ldr	r3, [r3, #0]
   b628a:	68db      	ldr	r3, [r3, #12]
   b628c:	9301      	str	r3, [sp, #4]
   b628e:	bd08      	pop	{r3, pc}
   b6290:	00030268 	.word	0x00030268

000b6294 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6294:	b508      	push	{r3, lr}
   b6296:	4b02      	ldr	r3, [pc, #8]	; (b62a0 <hal_spi_begin+0xc>)
   b6298:	681b      	ldr	r3, [r3, #0]
   b629a:	681b      	ldr	r3, [r3, #0]
   b629c:	9301      	str	r3, [sp, #4]
   b629e:	bd08      	pop	{r3, pc}
   b62a0:	00030230 	.word	0x00030230

000b62a4 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b62a4:	b508      	push	{r3, lr}
   b62a6:	4b02      	ldr	r3, [pc, #8]	; (b62b0 <hal_spi_set_bit_order+0xc>)
   b62a8:	681b      	ldr	r3, [r3, #0]
   b62aa:	689b      	ldr	r3, [r3, #8]
   b62ac:	9301      	str	r3, [sp, #4]
   b62ae:	bd08      	pop	{r3, pc}
   b62b0:	00030230 	.word	0x00030230

000b62b4 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b62b4:	b508      	push	{r3, lr}
   b62b6:	4b02      	ldr	r3, [pc, #8]	; (b62c0 <hal_spi_set_data_mode+0xc>)
   b62b8:	681b      	ldr	r3, [r3, #0]
   b62ba:	68db      	ldr	r3, [r3, #12]
   b62bc:	9301      	str	r3, [sp, #4]
   b62be:	bd08      	pop	{r3, pc}
   b62c0:	00030230 	.word	0x00030230

000b62c4 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b62c4:	b508      	push	{r3, lr}
   b62c6:	4b02      	ldr	r3, [pc, #8]	; (b62d0 <hal_spi_set_clock_divider+0xc>)
   b62c8:	681b      	ldr	r3, [r3, #0]
   b62ca:	691b      	ldr	r3, [r3, #16]
   b62cc:	9301      	str	r3, [sp, #4]
   b62ce:	bd08      	pop	{r3, pc}
   b62d0:	00030230 	.word	0x00030230

000b62d4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b62d4:	b508      	push	{r3, lr}
   b62d6:	4b02      	ldr	r3, [pc, #8]	; (b62e0 <hal_spi_transfer+0xc>)
   b62d8:	681b      	ldr	r3, [r3, #0]
   b62da:	695b      	ldr	r3, [r3, #20]
   b62dc:	9301      	str	r3, [sp, #4]
   b62de:	bd08      	pop	{r3, pc}
   b62e0:	00030230 	.word	0x00030230

000b62e4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b62e4:	b508      	push	{r3, lr}
   b62e6:	4b02      	ldr	r3, [pc, #8]	; (b62f0 <hal_spi_init+0xc>)
   b62e8:	681b      	ldr	r3, [r3, #0]
   b62ea:	69db      	ldr	r3, [r3, #28]
   b62ec:	9301      	str	r3, [sp, #4]
   b62ee:	bd08      	pop	{r3, pc}
   b62f0:	00030230 	.word	0x00030230

000b62f4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b62f4:	b508      	push	{r3, lr}
   b62f6:	4b02      	ldr	r3, [pc, #8]	; (b6300 <hal_spi_is_enabled+0xc>)
   b62f8:	681b      	ldr	r3, [r3, #0]
   b62fa:	6a1b      	ldr	r3, [r3, #32]
   b62fc:	9301      	str	r3, [sp, #4]
   b62fe:	bd08      	pop	{r3, pc}
   b6300:	00030230 	.word	0x00030230

000b6304 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6304:	b508      	push	{r3, lr}
   b6306:	4b02      	ldr	r3, [pc, #8]	; (b6310 <hal_spi_info+0xc>)
   b6308:	681b      	ldr	r3, [r3, #0]
   b630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b630c:	9301      	str	r3, [sp, #4]
   b630e:	bd08      	pop	{r3, pc}
   b6310:	00030230 	.word	0x00030230

000b6314 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6314:	b508      	push	{r3, lr}
   b6316:	4b02      	ldr	r3, [pc, #8]	; (b6320 <hal_spi_set_settings+0xc>)
   b6318:	681b      	ldr	r3, [r3, #0]
   b631a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b631c:	9301      	str	r3, [sp, #4]
   b631e:	bd08      	pop	{r3, pc}
   b6320:	00030230 	.word	0x00030230

000b6324 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6324:	b508      	push	{r3, lr}
   b6326:	4b02      	ldr	r3, [pc, #8]	; (b6330 <hal_spi_acquire+0xc>)
   b6328:	681b      	ldr	r3, [r3, #0]
   b632a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b632c:	9301      	str	r3, [sp, #4]
   b632e:	bd08      	pop	{r3, pc}
   b6330:	00030230 	.word	0x00030230

000b6334 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6334:	b508      	push	{r3, lr}
   b6336:	4b02      	ldr	r3, [pc, #8]	; (b6340 <hal_spi_release+0xc>)
   b6338:	681b      	ldr	r3, [r3, #0]
   b633a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b633c:	9301      	str	r3, [sp, #4]
   b633e:	bd08      	pop	{r3, pc}
   b6340:	00030230 	.word	0x00030230

000b6344 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6344:	b508      	push	{r3, lr}
   b6346:	4b02      	ldr	r3, [pc, #8]	; (b6350 <hal_usart_write+0xc>)
   b6348:	681b      	ldr	r3, [r3, #0]
   b634a:	68db      	ldr	r3, [r3, #12]
   b634c:	9301      	str	r3, [sp, #4]
   b634e:	bd08      	pop	{r3, pc}
   b6350:	0003023c 	.word	0x0003023c

000b6354 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6354:	b508      	push	{r3, lr}
   b6356:	4b02      	ldr	r3, [pc, #8]	; (b6360 <hal_usart_available+0xc>)
   b6358:	681b      	ldr	r3, [r3, #0]
   b635a:	691b      	ldr	r3, [r3, #16]
   b635c:	9301      	str	r3, [sp, #4]
   b635e:	bd08      	pop	{r3, pc}
   b6360:	0003023c 	.word	0x0003023c

000b6364 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6364:	b508      	push	{r3, lr}
   b6366:	4b02      	ldr	r3, [pc, #8]	; (b6370 <hal_usart_read+0xc>)
   b6368:	681b      	ldr	r3, [r3, #0]
   b636a:	695b      	ldr	r3, [r3, #20]
   b636c:	9301      	str	r3, [sp, #4]
   b636e:	bd08      	pop	{r3, pc}
   b6370:	0003023c 	.word	0x0003023c

000b6374 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6374:	b508      	push	{r3, lr}
   b6376:	4b02      	ldr	r3, [pc, #8]	; (b6380 <hal_usart_peek+0xc>)
   b6378:	681b      	ldr	r3, [r3, #0]
   b637a:	699b      	ldr	r3, [r3, #24]
   b637c:	9301      	str	r3, [sp, #4]
   b637e:	bd08      	pop	{r3, pc}
   b6380:	0003023c 	.word	0x0003023c

000b6384 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6384:	b508      	push	{r3, lr}
   b6386:	4b02      	ldr	r3, [pc, #8]	; (b6390 <hal_usart_flush+0xc>)
   b6388:	681b      	ldr	r3, [r3, #0]
   b638a:	69db      	ldr	r3, [r3, #28]
   b638c:	9301      	str	r3, [sp, #4]
   b638e:	bd08      	pop	{r3, pc}
   b6390:	0003023c 	.word	0x0003023c

000b6394 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6394:	b508      	push	{r3, lr}
   b6396:	4b02      	ldr	r3, [pc, #8]	; (b63a0 <hal_usart_is_enabled+0xc>)
   b6398:	681b      	ldr	r3, [r3, #0]
   b639a:	6a1b      	ldr	r3, [r3, #32]
   b639c:	9301      	str	r3, [sp, #4]
   b639e:	bd08      	pop	{r3, pc}
   b63a0:	0003023c 	.word	0x0003023c

000b63a4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b63a4:	b508      	push	{r3, lr}
   b63a6:	4b02      	ldr	r3, [pc, #8]	; (b63b0 <hal_usart_available_data_for_write+0xc>)
   b63a8:	681b      	ldr	r3, [r3, #0]
   b63aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b63ac:	9301      	str	r3, [sp, #4]
   b63ae:	bd08      	pop	{r3, pc}
   b63b0:	0003023c 	.word	0x0003023c

000b63b4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b63b4:	b508      	push	{r3, lr}
   b63b6:	4b02      	ldr	r3, [pc, #8]	; (b63c0 <hal_usart_init_ex+0xc>)
   b63b8:	681b      	ldr	r3, [r3, #0]
   b63ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b63bc:	9301      	str	r3, [sp, #4]
   b63be:	bd08      	pop	{r3, pc}
   b63c0:	0003023c 	.word	0x0003023c

000b63c4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b63c4:	b508      	push	{r3, lr}
   b63c6:	4b02      	ldr	r3, [pc, #8]	; (b63d0 <HAL_USB_USART_Init+0xc>)
   b63c8:	681b      	ldr	r3, [r3, #0]
   b63ca:	681b      	ldr	r3, [r3, #0]
   b63cc:	9301      	str	r3, [sp, #4]
   b63ce:	bd08      	pop	{r3, pc}
   b63d0:	0003024c 	.word	0x0003024c

000b63d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b63d4:	b508      	push	{r3, lr}
   b63d6:	4b02      	ldr	r3, [pc, #8]	; (b63e0 <HAL_USB_USART_Available_Data+0xc>)
   b63d8:	681b      	ldr	r3, [r3, #0]
   b63da:	691b      	ldr	r3, [r3, #16]
   b63dc:	9301      	str	r3, [sp, #4]
   b63de:	bd08      	pop	{r3, pc}
   b63e0:	0003024c 	.word	0x0003024c

000b63e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b63e4:	b508      	push	{r3, lr}
   b63e6:	4b02      	ldr	r3, [pc, #8]	; (b63f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b63e8:	681b      	ldr	r3, [r3, #0]
   b63ea:	695b      	ldr	r3, [r3, #20]
   b63ec:	9301      	str	r3, [sp, #4]
   b63ee:	bd08      	pop	{r3, pc}
   b63f0:	0003024c 	.word	0x0003024c

000b63f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b63f4:	b508      	push	{r3, lr}
   b63f6:	4b02      	ldr	r3, [pc, #8]	; (b6400 <HAL_USB_USART_Receive_Data+0xc>)
   b63f8:	681b      	ldr	r3, [r3, #0]
   b63fa:	699b      	ldr	r3, [r3, #24]
   b63fc:	9301      	str	r3, [sp, #4]
   b63fe:	bd08      	pop	{r3, pc}
   b6400:	0003024c 	.word	0x0003024c

000b6404 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6404:	b508      	push	{r3, lr}
   b6406:	4b02      	ldr	r3, [pc, #8]	; (b6410 <HAL_USB_USART_Send_Data+0xc>)
   b6408:	681b      	ldr	r3, [r3, #0]
   b640a:	69db      	ldr	r3, [r3, #28]
   b640c:	9301      	str	r3, [sp, #4]
   b640e:	bd08      	pop	{r3, pc}
   b6410:	0003024c 	.word	0x0003024c

000b6414 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6414:	b508      	push	{r3, lr}
   b6416:	4b02      	ldr	r3, [pc, #8]	; (b6420 <HAL_USB_USART_Flush_Data+0xc>)
   b6418:	681b      	ldr	r3, [r3, #0]
   b641a:	6a1b      	ldr	r3, [r3, #32]
   b641c:	9301      	str	r3, [sp, #4]
   b641e:	bd08      	pop	{r3, pc}
   b6420:	0003024c 	.word	0x0003024c

000b6424 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6424:	b508      	push	{r3, lr}
   b6426:	4b02      	ldr	r3, [pc, #8]	; (b6430 <set_system_mode+0xc>)
   b6428:	681b      	ldr	r3, [r3, #0]
   b642a:	685b      	ldr	r3, [r3, #4]
   b642c:	9301      	str	r3, [sp, #4]
   b642e:	bd08      	pop	{r3, pc}
   b6430:	00030220 	.word	0x00030220

000b6434 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6434:	b508      	push	{r3, lr}
   b6436:	4b02      	ldr	r3, [pc, #8]	; (b6440 <system_delay_ms+0xc>)
   b6438:	681b      	ldr	r3, [r3, #0]
   b643a:	695b      	ldr	r3, [r3, #20]
   b643c:	9301      	str	r3, [sp, #4]
   b643e:	bd08      	pop	{r3, pc}
   b6440:	00030220 	.word	0x00030220

000b6444 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6444:	b508      	push	{r3, lr}
   b6446:	4b02      	ldr	r3, [pc, #8]	; (b6450 <application_thread_current+0xc>)
   b6448:	681b      	ldr	r3, [r3, #0]
   b644a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b644c:	9301      	str	r3, [sp, #4]
   b644e:	bd08      	pop	{r3, pc}
   b6450:	00030220 	.word	0x00030220

000b6454 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6454:	b508      	push	{r3, lr}
   b6456:	4b02      	ldr	r3, [pc, #8]	; (b6460 <application_thread_invoke+0xc>)
   b6458:	681b      	ldr	r3, [r3, #0]
   b645a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b645c:	9301      	str	r3, [sp, #4]
   b645e:	bd08      	pop	{r3, pc}
   b6460:	00030220 	.word	0x00030220

000b6464 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6464:	b508      	push	{r3, lr}
   b6466:	4b03      	ldr	r3, [pc, #12]	; (b6474 <system_ctrl_set_app_request_handler+0x10>)
   b6468:	681b      	ldr	r3, [r3, #0]
   b646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b646e:	9301      	str	r3, [sp, #4]
   b6470:	bd08      	pop	{r3, pc}
   b6472:	0000      	.short	0x0000
   b6474:	00030220 	.word	0x00030220

000b6478 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6478:	b508      	push	{r3, lr}
   b647a:	4b03      	ldr	r3, [pc, #12]	; (b6488 <system_ctrl_set_result+0x10>)
   b647c:	681b      	ldr	r3, [r3, #0]
   b647e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6482:	9301      	str	r3, [sp, #4]
   b6484:	bd08      	pop	{r3, pc}
   b6486:	0000      	.short	0x0000
   b6488:	00030220 	.word	0x00030220

000b648c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b648c:	b508      	push	{r3, lr}
   b648e:	4b02      	ldr	r3, [pc, #8]	; (b6498 <spark_cloud_flag_connected+0xc>)
   b6490:	681b      	ldr	r3, [r3, #0]
   b6492:	695b      	ldr	r3, [r3, #20]
   b6494:	9301      	str	r3, [sp, #4]
   b6496:	bd08      	pop	{r3, pc}
   b6498:	00030244 	.word	0x00030244

000b649c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b649c:	b508      	push	{r3, lr}
   b649e:	4b02      	ldr	r3, [pc, #8]	; (b64a8 <spark_send_event+0xc>)
   b64a0:	681b      	ldr	r3, [r3, #0]
   b64a2:	6a1b      	ldr	r3, [r3, #32]
   b64a4:	9301      	str	r3, [sp, #4]
   b64a6:	bd08      	pop	{r3, pc}
   b64a8:	00030244 	.word	0x00030244

000b64ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b64ac:	b508      	push	{r3, lr}
   b64ae:	4b02      	ldr	r3, [pc, #8]	; (b64b8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b64b0:	681b      	ldr	r3, [r3, #0]
   b64b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b64b4:	9301      	str	r3, [sp, #4]
   b64b6:	bd08      	pop	{r3, pc}
   b64b8:	00030244 	.word	0x00030244

000b64bc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b64bc:	b508      	push	{r3, lr}
   b64be:	4b02      	ldr	r3, [pc, #8]	; (b64c8 <network_connect+0xc>)
   b64c0:	681b      	ldr	r3, [r3, #0]
   b64c2:	685b      	ldr	r3, [r3, #4]
   b64c4:	9301      	str	r3, [sp, #4]
   b64c6:	bd08      	pop	{r3, pc}
   b64c8:	00030240 	.word	0x00030240

000b64cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b64cc:	b508      	push	{r3, lr}
   b64ce:	4b02      	ldr	r3, [pc, #8]	; (b64d8 <network_connecting+0xc>)
   b64d0:	681b      	ldr	r3, [r3, #0]
   b64d2:	689b      	ldr	r3, [r3, #8]
   b64d4:	9301      	str	r3, [sp, #4]
   b64d6:	bd08      	pop	{r3, pc}
   b64d8:	00030240 	.word	0x00030240

000b64dc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b64dc:	b508      	push	{r3, lr}
   b64de:	4b02      	ldr	r3, [pc, #8]	; (b64e8 <network_disconnect+0xc>)
   b64e0:	681b      	ldr	r3, [r3, #0]
   b64e2:	68db      	ldr	r3, [r3, #12]
   b64e4:	9301      	str	r3, [sp, #4]
   b64e6:	bd08      	pop	{r3, pc}
   b64e8:	00030240 	.word	0x00030240

000b64ec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b64ec:	b508      	push	{r3, lr}
   b64ee:	4b02      	ldr	r3, [pc, #8]	; (b64f8 <network_ready+0xc>)
   b64f0:	681b      	ldr	r3, [r3, #0]
   b64f2:	691b      	ldr	r3, [r3, #16]
   b64f4:	9301      	str	r3, [sp, #4]
   b64f6:	bd08      	pop	{r3, pc}
   b64f8:	00030240 	.word	0x00030240

000b64fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b64fc:	b508      	push	{r3, lr}
   b64fe:	4b02      	ldr	r3, [pc, #8]	; (b6508 <network_on+0xc>)
   b6500:	681b      	ldr	r3, [r3, #0]
   b6502:	695b      	ldr	r3, [r3, #20]
   b6504:	9301      	str	r3, [sp, #4]
   b6506:	bd08      	pop	{r3, pc}
   b6508:	00030240 	.word	0x00030240

000b650c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b650c:	b508      	push	{r3, lr}
   b650e:	4b02      	ldr	r3, [pc, #8]	; (b6518 <network_off+0xc>)
   b6510:	681b      	ldr	r3, [r3, #0]
   b6512:	699b      	ldr	r3, [r3, #24]
   b6514:	9301      	str	r3, [sp, #4]
   b6516:	bd08      	pop	{r3, pc}
   b6518:	00030240 	.word	0x00030240

000b651c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b651c:	b508      	push	{r3, lr}
   b651e:	4b02      	ldr	r3, [pc, #8]	; (b6528 <network_listen+0xc>)
   b6520:	681b      	ldr	r3, [r3, #0]
   b6522:	69db      	ldr	r3, [r3, #28]
   b6524:	9301      	str	r3, [sp, #4]
   b6526:	bd08      	pop	{r3, pc}
   b6528:	00030240 	.word	0x00030240

000b652c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b652c:	b508      	push	{r3, lr}
   b652e:	4b02      	ldr	r3, [pc, #8]	; (b6538 <network_listening+0xc>)
   b6530:	681b      	ldr	r3, [r3, #0]
   b6532:	6a1b      	ldr	r3, [r3, #32]
   b6534:	9301      	str	r3, [sp, #4]
   b6536:	bd08      	pop	{r3, pc}
   b6538:	00030240 	.word	0x00030240

000b653c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b653c:	b508      	push	{r3, lr}
   b653e:	4b02      	ldr	r3, [pc, #8]	; (b6548 <network_set_listen_timeout+0xc>)
   b6540:	681b      	ldr	r3, [r3, #0]
   b6542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6544:	9301      	str	r3, [sp, #4]
   b6546:	bd08      	pop	{r3, pc}
   b6548:	00030240 	.word	0x00030240

000b654c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b654c:	b508      	push	{r3, lr}
   b654e:	4b02      	ldr	r3, [pc, #8]	; (b6558 <network_get_listen_timeout+0xc>)
   b6550:	681b      	ldr	r3, [r3, #0]
   b6552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6554:	9301      	str	r3, [sp, #4]
   b6556:	bd08      	pop	{r3, pc}
   b6558:	00030240 	.word	0x00030240

000b655c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b655c:	b508      	push	{r3, lr}
   b655e:	4b02      	ldr	r3, [pc, #8]	; (b6568 <network_is_on+0xc>)
   b6560:	681b      	ldr	r3, [r3, #0]
   b6562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6564:	9301      	str	r3, [sp, #4]
   b6566:	bd08      	pop	{r3, pc}
   b6568:	00030240 	.word	0x00030240

000b656c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b656c:	b508      	push	{r3, lr}
   b656e:	4b02      	ldr	r3, [pc, #8]	; (b6578 <network_is_off+0xc>)
   b6570:	681b      	ldr	r3, [r3, #0]
   b6572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6574:	9301      	str	r3, [sp, #4]
   b6576:	bd08      	pop	{r3, pc}
   b6578:	00030240 	.word	0x00030240

000b657c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b657c:	b508      	push	{r3, lr}
   b657e:	4b02      	ldr	r3, [pc, #8]	; (b6588 <malloc+0xc>)
   b6580:	681b      	ldr	r3, [r3, #0]
   b6582:	681b      	ldr	r3, [r3, #0]
   b6584:	9301      	str	r3, [sp, #4]
   b6586:	bd08      	pop	{r3, pc}
   b6588:	0003021c 	.word	0x0003021c

000b658c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b658c:	b508      	push	{r3, lr}
   b658e:	4b02      	ldr	r3, [pc, #8]	; (b6598 <free+0xc>)
   b6590:	681b      	ldr	r3, [r3, #0]
   b6592:	685b      	ldr	r3, [r3, #4]
   b6594:	9301      	str	r3, [sp, #4]
   b6596:	bd08      	pop	{r3, pc}
   b6598:	0003021c 	.word	0x0003021c

000b659c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b659c:	b508      	push	{r3, lr}
   b659e:	4b02      	ldr	r3, [pc, #8]	; (b65a8 <realloc+0xc>)
   b65a0:	681b      	ldr	r3, [r3, #0]
   b65a2:	689b      	ldr	r3, [r3, #8]
   b65a4:	9301      	str	r3, [sp, #4]
   b65a6:	bd08      	pop	{r3, pc}
   b65a8:	0003021c 	.word	0x0003021c

000b65ac <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b65ac:	b508      	push	{r3, lr}
   b65ae:	4b02      	ldr	r3, [pc, #8]	; (b65b8 <vsnprintf+0xc>)
   b65b0:	681b      	ldr	r3, [r3, #0]
   b65b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b65b4:	9301      	str	r3, [sp, #4]
   b65b6:	bd08      	pop	{r3, pc}
   b65b8:	0003021c 	.word	0x0003021c

000b65bc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b65bc:	b508      	push	{r3, lr}
   b65be:	4b02      	ldr	r3, [pc, #8]	; (b65c8 <abort+0xc>)
   b65c0:	681b      	ldr	r3, [r3, #0]
   b65c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b65c4:	9301      	str	r3, [sp, #4]
   b65c6:	bd08      	pop	{r3, pc}
   b65c8:	0003021c 	.word	0x0003021c

000b65cc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b65cc:	b508      	push	{r3, lr}
   b65ce:	4b02      	ldr	r3, [pc, #8]	; (b65d8 <_malloc_r+0xc>)
   b65d0:	681b      	ldr	r3, [r3, #0]
   b65d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65d4:	9301      	str	r3, [sp, #4]
   b65d6:	bd08      	pop	{r3, pc}
   b65d8:	0003021c 	.word	0x0003021c

000b65dc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b65dc:	b508      	push	{r3, lr}
   b65de:	4b02      	ldr	r3, [pc, #8]	; (b65e8 <__errno+0xc>)
   b65e0:	681b      	ldr	r3, [r3, #0]
   b65e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b65e4:	9301      	str	r3, [sp, #4]
   b65e6:	bd08      	pop	{r3, pc}
   b65e8:	0003021c 	.word	0x0003021c

000b65ec <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b65ec:	b508      	push	{r3, lr}
   b65ee:	4b02      	ldr	r3, [pc, #8]	; (b65f8 <__assert_func+0xc>)
   b65f0:	681b      	ldr	r3, [r3, #0]
   b65f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65f4:	9301      	str	r3, [sp, #4]
   b65f6:	bd08      	pop	{r3, pc}
   b65f8:	0003021c 	.word	0x0003021c

000b65fc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b65fc:	b508      	push	{r3, lr}
   b65fe:	4b02      	ldr	r3, [pc, #8]	; (b6608 <newlib_impure_ptr_callback+0xc>)
   b6600:	681b      	ldr	r3, [r3, #0]
   b6602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6604:	9301      	str	r3, [sp, #4]
   b6606:	bd08      	pop	{r3, pc}
   b6608:	0003021c 	.word	0x0003021c

000b660c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b660c:	2100      	movs	r1, #0
   b660e:	f7ff bf11 	b.w	b6434 <system_delay_ms>

000b6612 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6612:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6614:	6883      	ldr	r3, [r0, #8]
   b6616:	4604      	mov	r4, r0
   b6618:	b90b      	cbnz	r3, b661e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b661a:	f001 fbaf 	bl	b7d7c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b661e:	68c3      	ldr	r3, [r0, #12]
   b6620:	4798      	blx	r3
      if (_M_manager)
   b6622:	68a3      	ldr	r3, [r4, #8]
   b6624:	b11b      	cbz	r3, b662e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6626:	2203      	movs	r2, #3
   b6628:	4621      	mov	r1, r4
   b662a:	4620      	mov	r0, r4
   b662c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b662e:	4620      	mov	r0, r4
   b6630:	2110      	movs	r1, #16
}
   b6632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6636:	f7fe bd3c 	b.w	b50b2 <_ZdlPvj>

000b663a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b663a:	b510      	push	{r4, lr}
      if (_M_manager)
   b663c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b663e:	4604      	mov	r4, r0
      if (_M_manager)
   b6640:	b113      	cbz	r3, b6648 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6642:	2203      	movs	r2, #3
   b6644:	4601      	mov	r1, r0
   b6646:	4798      	blx	r3
    }
   b6648:	4620      	mov	r0, r4
   b664a:	bd10      	pop	{r4, pc}

000b664c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b664c:	b513      	push	{r0, r1, r4, lr}
   b664e:	460b      	mov	r3, r1
   b6650:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6652:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6656:	466c      	mov	r4, sp
   b6658:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b665c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6660:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6664:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6668:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b666c:	b002      	add	sp, #8
   b666e:	bd10      	pop	{r4, pc}

000b6670 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6670:	4802      	ldr	r0, [pc, #8]	; (b667c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6672:	2300      	movs	r3, #0
   b6674:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6676:	f7ff bd5d 	b.w	b6134 <os_mutex_recursive_create>
   b667a:	bf00      	nop
   b667c:	2003e6c4 	.word	0x2003e6c4

000b6680 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6680:	4770      	bx	lr

000b6682 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b6682:	2000      	movs	r0, #0
   b6684:	4770      	bx	lr

000b6686 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6686:	b510      	push	{r4, lr}
   b6688:	2110      	movs	r1, #16
   b668a:	4604      	mov	r4, r0
   b668c:	f7fe fd11 	bl	b50b2 <_ZdlPvj>
   b6690:	4620      	mov	r0, r4
   b6692:	bd10      	pop	{r4, pc}

000b6694 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6694:	b508      	push	{r3, lr}
      { delete this; }
   b6696:	f7ff fff6 	bl	b6686 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b669a:	bd08      	pop	{r3, pc}

000b669c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b669c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b669e:	2200      	movs	r2, #0
   b66a0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b66a4:	6002      	str	r2, [r0, #0]
   b66a6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b66a8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b66aa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b66ac:	680c      	ldr	r4, [r1, #0]
   b66ae:	8085      	strh	r5, [r0, #4]
   b66b0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b66b2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b66b4:	bd30      	pop	{r4, r5, pc}

000b66b6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b66b6:	b510      	push	{r4, lr}
   b66b8:	4604      	mov	r4, r0
    free((void*)msg_);
   b66ba:	6800      	ldr	r0, [r0, #0]
   b66bc:	f7ff ff66 	bl	b658c <free>
}
   b66c0:	4620      	mov	r0, r4
   b66c2:	bd10      	pop	{r4, pc}

000b66c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b66c4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b66c6:	68c4      	ldr	r4, [r0, #12]
   b66c8:	b1f4      	cbz	r4, b6708 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b66ca:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b66cc:	2b02      	cmp	r3, #2
   b66ce:	d103      	bne.n	b66d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b66d0:	f104 000c 	add.w	r0, r4, #12
   b66d4:	f7ff ffef 	bl	b66b6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b66d8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b66da:	b135      	cbz	r5, b66ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b66dc:	4628      	mov	r0, r5
   b66de:	f7ff ffac 	bl	b663a <_ZNSt14_Function_baseD1Ev>
   b66e2:	2110      	movs	r1, #16
   b66e4:	4628      	mov	r0, r5
   b66e6:	f7fe fce4 	bl	b50b2 <_ZdlPvj>
   b66ea:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b66ec:	b135      	cbz	r5, b66fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b66ee:	4628      	mov	r0, r5
   b66f0:	f7ff ffa3 	bl	b663a <_ZNSt14_Function_baseD1Ev>
   b66f4:	2110      	movs	r1, #16
   b66f6:	4628      	mov	r0, r5
   b66f8:	f7fe fcdb 	bl	b50b2 <_ZdlPvj>
   b66fc:	4620      	mov	r0, r4
   b66fe:	2114      	movs	r1, #20
   b6700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6704:	f7fe bcd5 	b.w	b50b2 <_ZdlPvj>
   b6708:	bd38      	pop	{r3, r4, r5, pc}

000b670a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b670a:	680b      	ldr	r3, [r1, #0]
   b670c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b670e:	684b      	ldr	r3, [r1, #4]
   b6710:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6712:	b113      	cbz	r3, b671a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6714:	685a      	ldr	r2, [r3, #4]
   b6716:	3201      	adds	r2, #1
   b6718:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b671a:	4770      	bx	lr

000b671c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b671c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b671e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6720:	4668      	mov	r0, sp
   b6722:	460d      	mov	r5, r1
   b6724:	f7ff fff1 	bl	b670a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6728:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b672a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b672c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b672e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6730:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6732:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6734:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6736:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6738:	f7fe fcfa 	bl	b5130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b673c:	b135      	cbz	r5, b674c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b673e:	1d28      	adds	r0, r5, #4
   b6740:	f7fe fcf6 	bl	b5130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6744:	2108      	movs	r1, #8
   b6746:	4628      	mov	r0, r5
   b6748:	f7fe fcb3 	bl	b50b2 <_ZdlPvj>
        return p;
    }
   b674c:	4620      	mov	r0, r4
   b674e:	b003      	add	sp, #12
   b6750:	bd30      	pop	{r4, r5, pc}

000b6752 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b6752:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6754:	b510      	push	{r4, lr}
      if (_M_empty())
   b6756:	b90a      	cbnz	r2, b675c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6758:	f001 fb10 	bl	b7d7c <_ZSt25__throw_bad_function_callv>
    }
   b675c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6760:	68c3      	ldr	r3, [r0, #12]
   b6762:	4718      	bx	r3

000b6764 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6764:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6766:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6768:	f100 0110 	add.w	r1, r0, #16
   b676c:	f7ff fff1 	bl	b6752 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6770:	bd08      	pop	{r3, pc}

000b6772 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6772:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6774:	b510      	push	{r4, lr}
      if (_M_empty())
   b6776:	b90a      	cbnz	r2, b677c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6778:	f001 fb00 	bl	b7d7c <_ZSt25__throw_bad_function_callv>
    }
   b677c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6780:	68c3      	ldr	r3, [r0, #12]
   b6782:	4718      	bx	r3

000b6784 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6784:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6786:	6800      	ldr	r0, [r0, #0]
   b6788:	f100 0110 	add.w	r1, r0, #16
   b678c:	f7ff fff1 	bl	b6772 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6790:	bd08      	pop	{r3, pc}
	...

000b6794 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6794:	b538      	push	{r3, r4, r5, lr}
   b6796:	2300      	movs	r3, #0
   b6798:	4604      	mov	r4, r0
   b679a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b679c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b679e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b67a0:	f7fe fc83 	bl	b50aa <_Znwj>
   b67a4:	b128      	cbz	r0, b67b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b67a6:	2301      	movs	r3, #1
   b67a8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b67ac:	4b02      	ldr	r3, [pc, #8]	; (b67b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b67ae:	6003      	str	r3, [r0, #0]
   b67b0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b67b2:	6020      	str	r0, [r4, #0]
	}
   b67b4:	4620      	mov	r0, r4
   b67b6:	bd38      	pop	{r3, r4, r5, pc}
   b67b8:	000ba050 	.word	0x000ba050

000b67bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b67bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b67be:	2300      	movs	r3, #0
   b67c0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b67c2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b67c4:	4604      	mov	r4, r0
   b67c6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b67c8:	b12b      	cbz	r3, b67d6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b67ca:	2202      	movs	r2, #2
   b67cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b67ce:	68eb      	ldr	r3, [r5, #12]
   b67d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b67d2:	68ab      	ldr	r3, [r5, #8]
   b67d4:	60a3      	str	r3, [r4, #8]
    }
   b67d6:	4620      	mov	r0, r4
   b67d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b67dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b67dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b67de:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b67e0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b67e2:	4668      	mov	r0, sp
   b67e4:	f7ff ff5a 	bl	b669c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b67e8:	f04f 0302 	mov.w	r3, #2
   b67ec:	e8d4 2f4f 	ldrexb	r2, [r4]
   b67f0:	2a00      	cmp	r2, #0
   b67f2:	d103      	bne.n	b67fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b67f4:	e8c4 3f41 	strexb	r1, r3, [r4]
   b67f8:	2900      	cmp	r1, #0
   b67fa:	d1f7      	bne.n	b67ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b67fc:	d125      	bne.n	b684a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b67fe:	f104 050c 	add.w	r5, r4, #12
   b6802:	4669      	mov	r1, sp
   b6804:	4628      	mov	r0, r5
   b6806:	f7ff ff49 	bl	b669c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b680a:	f3bf 8f5b 	dmb	ish
   b680e:	2301      	movs	r3, #1
   b6810:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6812:	2000      	movs	r0, #0
   b6814:	f104 0308 	add.w	r3, r4, #8
   b6818:	f3bf 8f5b 	dmb	ish
   b681c:	e853 6f00 	ldrex	r6, [r3]
   b6820:	e843 0200 	strex	r2, r0, [r3]
   b6824:	2a00      	cmp	r2, #0
   b6826:	d1f9      	bne.n	b681c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6828:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b682c:	b16e      	cbz	r6, b684a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b682e:	f7ff fe09 	bl	b6444 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6832:	b178      	cbz	r0, b6854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6834:	4629      	mov	r1, r5
   b6836:	4630      	mov	r0, r6
   b6838:	f7ff ff8b 	bl	b6752 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b683c:	4630      	mov	r0, r6
   b683e:	f7ff fefc 	bl	b663a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6842:	2110      	movs	r1, #16
   b6844:	4630      	mov	r0, r6
   b6846:	f7fe fc34 	bl	b50b2 <_ZdlPvj>
        p_->setError(std::move(error));
   b684a:	4668      	mov	r0, sp
   b684c:	f7ff ff33 	bl	b66b6 <_ZN8particle5ErrorD1Ev>
    }
   b6850:	b009      	add	sp, #36	; 0x24
   b6852:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6854:	4631      	mov	r1, r6
   b6856:	a802      	add	r0, sp, #8
   b6858:	f7ff ffb0 	bl	b67bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b685c:	68e0      	ldr	r0, [r4, #12]
   b685e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6862:	b108      	cbz	r0, b6868 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6864:	f002 fb68 	bl	b8f38 <strdup>
        type_(type) {
   b6868:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b686a:	2010      	movs	r0, #16
   b686c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6870:	f7fe fc1b 	bl	b50aa <_Znwj>
   b6874:	4605      	mov	r5, r0
   b6876:	b1e8      	cbz	r0, b68b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6878:	2700      	movs	r7, #0
   b687a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b687c:	2018      	movs	r0, #24
   b687e:	f7fe fc14 	bl	b50aa <_Znwj>
   b6882:	4604      	mov	r4, r0
   b6884:	b188      	cbz	r0, b68aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6886:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6888:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b688a:	a802      	add	r0, sp, #8
   b688c:	f7ff fede 	bl	b664c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6890:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6892:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6894:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6896:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6898:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b689a:	a906      	add	r1, sp, #24
   b689c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b689e:	60e3      	str	r3, [r4, #12]
   b68a0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b68a4:	9205      	str	r2, [sp, #20]
   b68a6:	f7ff fef9 	bl	b669c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b68aa:	4b08      	ldr	r3, [pc, #32]	; (b68cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b68ac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b68ae:	4b08      	ldr	r3, [pc, #32]	; (b68d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b68b0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b68b2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b68b4:	a806      	add	r0, sp, #24
   b68b6:	f7ff fefe 	bl	b66b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b68ba:	a802      	add	r0, sp, #8
   b68bc:	f7ff febd 	bl	b663a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b68c0:	2200      	movs	r2, #0
   b68c2:	4629      	mov	r1, r5
   b68c4:	4803      	ldr	r0, [pc, #12]	; (b68d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b68c6:	f7ff fdc5 	bl	b6454 <application_thread_invoke>
   b68ca:	e7b7      	b.n	b683c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b68cc:	000b6765 	.word	0x000b6765
   b68d0:	000b69e9 	.word	0x000b69e9
   b68d4:	000b6613 	.word	0x000b6613

000b68d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b68d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68dc:	b08b      	sub	sp, #44	; 0x2c
   b68de:	4605      	mov	r5, r0
   b68e0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b68e4:	460f      	mov	r7, r1
   b68e6:	4690      	mov	r8, r2
   b68e8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b68ea:	f7ff fdcf 	bl	b648c <spark_cloud_flag_connected>
   b68ee:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b68f0:	4683      	mov	fp, r0
   b68f2:	bb38      	cbnz	r0, b6944 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b68f4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b68f8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b68fa:	a905      	add	r1, sp, #20
   b68fc:	4630      	mov	r0, r6
   b68fe:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6902:	f7ff fecb 	bl	b669c <_ZN8particle5ErrorC1EOS0_>
   b6906:	2014      	movs	r0, #20
   b6908:	f7fe fbcf 	bl	b50aa <_Znwj>
   b690c:	4604      	mov	r4, r0
   b690e:	b148      	cbz	r0, b6924 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6910:	2302      	movs	r3, #2
   b6912:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6914:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6916:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b691a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b691c:	4631      	mov	r1, r6
   b691e:	300c      	adds	r0, #12
   b6920:	f7ff febc 	bl	b669c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6924:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6926:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6928:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b692c:	f7ff ff32 	bl	b6794 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6930:	4630      	mov	r0, r6
   b6932:	f7ff fec0 	bl	b66b6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6936:	a805      	add	r0, sp, #20
   b6938:	f7ff febd 	bl	b66b6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b693c:	4628      	mov	r0, r5
   b693e:	b00b      	add	sp, #44	; 0x2c
   b6940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6944:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6946:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6948:	2014      	movs	r0, #20
   b694a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b694e:	9307      	str	r3, [sp, #28]
   b6950:	f7fe fbab 	bl	b50aa <_Znwj>
   b6954:	4601      	mov	r1, r0
   b6956:	b118      	cbz	r0, b6960 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6958:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b695c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b695e:	7044      	strb	r4, [r0, #1]
   b6960:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6962:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6964:	f7ff ff16 	bl	b6794 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6968:	4b1e      	ldr	r3, [pc, #120]	; (b69e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b696a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b696c:	2008      	movs	r0, #8
   b696e:	f7fe fb9c 	bl	b50aa <_Znwj>
   b6972:	4604      	mov	r4, r0
   b6974:	b110      	cbz	r0, b697c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6976:	a903      	add	r1, sp, #12
   b6978:	f7ff fec7 	bl	b670a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b697c:	9600      	str	r6, [sp, #0]
   b697e:	fa5f f38a 	uxtb.w	r3, sl
   b6982:	464a      	mov	r2, r9
   b6984:	4641      	mov	r1, r8
   b6986:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6988:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b698a:	f7ff fd87 	bl	b649c <spark_send_event>
   b698e:	b9b8      	cbnz	r0, b69c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6990:	9b03      	ldr	r3, [sp, #12]
   b6992:	785b      	ldrb	r3, [r3, #1]
   b6994:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6998:	b993      	cbnz	r3, b69c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b699a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b699e:	a905      	add	r1, sp, #20
   b69a0:	a803      	add	r0, sp, #12
   b69a2:	9205      	str	r2, [sp, #20]
   b69a4:	f8ad 3018 	strh.w	r3, [sp, #24]
   b69a8:	f7ff ff18 	bl	b67dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b69ac:	a805      	add	r0, sp, #20
   b69ae:	f7ff fe82 	bl	b66b6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b69b2:	a805      	add	r0, sp, #20
   b69b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b69b6:	f7ff feb1 	bl	b671c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b69ba:	a806      	add	r0, sp, #24
   b69bc:	f7fe fbb8 	bl	b5130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b69c0:	a903      	add	r1, sp, #12
   b69c2:	a805      	add	r0, sp, #20
   b69c4:	f7ff fea1 	bl	b670a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b69c8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b69ca:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b69cc:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b69ce:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b69d0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b69d2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b69d4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b69d6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b69d8:	f7fe fbaa 	bl	b5130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b69dc:	a804      	add	r0, sp, #16
   b69de:	f7fe fba7 	bl	b5130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b69e2:	e7ab      	b.n	b693c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b69e4:	000b6a65 	.word	0x000b6a65

000b69e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b69e8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b69ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b69ec:	4605      	mov	r5, r0
	switch (__op)
   b69ee:	d103      	bne.n	b69f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b69f0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b69f2:	6003      	str	r3, [r0, #0]
      }
   b69f4:	2000      	movs	r0, #0
   b69f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b69f8:	2a02      	cmp	r2, #2
   b69fa:	d010      	beq.n	b6a1e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b69fc:	2a03      	cmp	r2, #3
   b69fe:	d1f9      	bne.n	b69f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6a00:	6804      	ldr	r4, [r0, #0]
   b6a02:	2c00      	cmp	r4, #0
   b6a04:	d0f6      	beq.n	b69f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6a06:	f104 0010 	add.w	r0, r4, #16
   b6a0a:	f7ff fe54 	bl	b66b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6a0e:	4620      	mov	r0, r4
   b6a10:	f7ff fe13 	bl	b663a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6a14:	2118      	movs	r1, #24
   b6a16:	4620      	mov	r0, r4
   b6a18:	f7fe fb4b 	bl	b50b2 <_ZdlPvj>
   b6a1c:	e7ea      	b.n	b69f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6a1e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6a20:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6a22:	f7fe fb42 	bl	b50aa <_Znwj>
   b6a26:	4604      	mov	r4, r0
   b6a28:	b150      	cbz	r0, b6a40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6a2a:	4631      	mov	r1, r6
   b6a2c:	f7ff fec6 	bl	b67bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6a30:	6930      	ldr	r0, [r6, #16]
   b6a32:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6a36:	b108      	cbz	r0, b6a3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6a38:	f002 fa7e 	bl	b8f38 <strdup>
        type_(type) {
   b6a3c:	6120      	str	r0, [r4, #16]
   b6a3e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6a40:	602c      	str	r4, [r5, #0]
	}
   b6a42:	e7d7      	b.n	b69f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6a44 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6a44:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6a46:	2300      	movs	r3, #0
   b6a48:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6a4a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6a4c:	4604      	mov	r4, r0
   b6a4e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6a50:	b12b      	cbz	r3, b6a5e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6a52:	2202      	movs	r2, #2
   b6a54:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6a56:	68eb      	ldr	r3, [r5, #12]
   b6a58:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6a5a:	68ab      	ldr	r3, [r5, #8]
   b6a5c:	60a3      	str	r3, [r4, #8]
    }
   b6a5e:	4620      	mov	r0, r4
   b6a60:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6a64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6a64:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6a66:	b089      	sub	sp, #36	; 0x24
   b6a68:	4604      	mov	r4, r0
   b6a6a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6a6c:	a801      	add	r0, sp, #4
   b6a6e:	4611      	mov	r1, r2
   b6a70:	f7ff fe54 	bl	b671c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6a74:	b1a4      	cbz	r4, b6aa0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6a76:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6a78:	b11d      	cbz	r5, b6a82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6a7a:	4628      	mov	r0, r5
   b6a7c:	f002 fa5c 	bl	b8f38 <strdup>
   b6a80:	4605      	mov	r5, r0
   b6a82:	a801      	add	r0, sp, #4
   b6a84:	a903      	add	r1, sp, #12
        type_(type) {
   b6a86:	9503      	str	r5, [sp, #12]
   b6a88:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6a8c:	f7ff fea6 	bl	b67dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6a90:	a803      	add	r0, sp, #12
   b6a92:	f7ff fe10 	bl	b66b6 <_ZN8particle5ErrorD1Ev>
   b6a96:	a802      	add	r0, sp, #8
   b6a98:	f7fe fb4a 	bl	b5130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6a9c:	b009      	add	sp, #36	; 0x24
   b6a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6aa0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6aa2:	2301      	movs	r3, #1
   b6aa4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6aa8:	2a00      	cmp	r2, #0
   b6aaa:	d103      	bne.n	b6ab4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6aac:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6ab0:	2900      	cmp	r1, #0
   b6ab2:	d1f7      	bne.n	b6aa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6ab4:	d1ef      	bne.n	b6a96 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6ab6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6ab8:	f3bf 8f5b 	dmb	ish
   b6abc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6abe:	1d2b      	adds	r3, r5, #4
   b6ac0:	f3bf 8f5b 	dmb	ish
   b6ac4:	e853 6f00 	ldrex	r6, [r3]
   b6ac8:	e843 4200 	strex	r2, r4, [r3]
   b6acc:	2a00      	cmp	r2, #0
   b6ace:	d1f9      	bne.n	b6ac4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6ad0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6ad4:	2e00      	cmp	r6, #0
   b6ad6:	d0de      	beq.n	b6a96 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6ad8:	4620      	mov	r0, r4
   b6ada:	f7ff fcb3 	bl	b6444 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6ade:	4607      	mov	r7, r0
   b6ae0:	b160      	cbz	r0, b6afc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6ae2:	f105 010c 	add.w	r1, r5, #12
   b6ae6:	4630      	mov	r0, r6
   b6ae8:	f7ff fe43 	bl	b6772 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6aec:	4630      	mov	r0, r6
   b6aee:	f7ff fda4 	bl	b663a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6af2:	2110      	movs	r1, #16
   b6af4:	4630      	mov	r0, r6
   b6af6:	f7fe fadc 	bl	b50b2 <_ZdlPvj>
   b6afa:	e7cc      	b.n	b6a96 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6afc:	4631      	mov	r1, r6
   b6afe:	a803      	add	r0, sp, #12
   b6b00:	f7ff ffa0 	bl	b6a44 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6b04:	7b2b      	ldrb	r3, [r5, #12]
   b6b06:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6b0a:	2010      	movs	r0, #16
   b6b0c:	f7fe facd 	bl	b50aa <_Znwj>
   b6b10:	4605      	mov	r5, r0
   b6b12:	b1d0      	cbz	r0, b6b4a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6b14:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b16:	2014      	movs	r0, #20
   b6b18:	f7fe fac7 	bl	b50aa <_Znwj>
   b6b1c:	4604      	mov	r4, r0
   b6b1e:	b178      	cbz	r0, b6b40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6b20:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6b22:	4601      	mov	r1, r0
   b6b24:	a803      	add	r0, sp, #12
   b6b26:	f7ff fd91 	bl	b664c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6b2a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6b2c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b2e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6b30:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6b32:	9205      	str	r2, [sp, #20]
   b6b34:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b36:	60e3      	str	r3, [r4, #12]
   b6b38:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6b3c:	9206      	str	r2, [sp, #24]
   b6b3e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6b40:	4b06      	ldr	r3, [pc, #24]	; (b6b5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6b42:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6b44:	4b06      	ldr	r3, [pc, #24]	; (b6b60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b46:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6b48:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6b4a:	a803      	add	r0, sp, #12
   b6b4c:	f7ff fd75 	bl	b663a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6b50:	2200      	movs	r2, #0
   b6b52:	4629      	mov	r1, r5
   b6b54:	4803      	ldr	r0, [pc, #12]	; (b6b64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6b56:	f7ff fc7d 	bl	b6454 <application_thread_invoke>
   b6b5a:	e7c7      	b.n	b6aec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6b5c:	000b6785 	.word	0x000b6785
   b6b60:	000b6b69 	.word	0x000b6b69
   b6b64:	000b6613 	.word	0x000b6613

000b6b68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6b68:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6b6a:	b570      	push	{r4, r5, r6, lr}
   b6b6c:	4604      	mov	r4, r0
	switch (__op)
   b6b6e:	d103      	bne.n	b6b78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6b70:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6b72:	6003      	str	r3, [r0, #0]
      }
   b6b74:	2000      	movs	r0, #0
   b6b76:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6b78:	2a02      	cmp	r2, #2
   b6b7a:	d00c      	beq.n	b6b96 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6b7c:	2a03      	cmp	r2, #3
   b6b7e:	d1f9      	bne.n	b6b74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6b80:	6804      	ldr	r4, [r0, #0]
   b6b82:	2c00      	cmp	r4, #0
   b6b84:	d0f6      	beq.n	b6b74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6b86:	4620      	mov	r0, r4
   b6b88:	f7ff fd57 	bl	b663a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6b8c:	2114      	movs	r1, #20
   b6b8e:	4620      	mov	r0, r4
   b6b90:	f7fe fa8f 	bl	b50b2 <_ZdlPvj>
   b6b94:	e7ee      	b.n	b6b74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b96:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6b98:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b9a:	f7fe fa86 	bl	b50aa <_Znwj>
   b6b9e:	4605      	mov	r5, r0
   b6ba0:	b120      	cbz	r0, b6bac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6ba2:	4631      	mov	r1, r6
   b6ba4:	f7ff ff4e 	bl	b6a44 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6ba8:	7c33      	ldrb	r3, [r6, #16]
   b6baa:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6bac:	6025      	str	r5, [r4, #0]
	}
   b6bae:	e7e1      	b.n	b6b74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6bb0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6bb0:	2200      	movs	r2, #0
   b6bb2:	6840      	ldr	r0, [r0, #4]
   b6bb4:	4611      	mov	r1, r2
   b6bb6:	f7ff bcb9 	b.w	b652c <network_listening>

000b6bba <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6bba:	2200      	movs	r2, #0
   b6bbc:	6840      	ldr	r0, [r0, #4]
   b6bbe:	4611      	mov	r1, r2
   b6bc0:	f7ff bcc4 	b.w	b654c <network_get_listen_timeout>

000b6bc4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6bc4:	6840      	ldr	r0, [r0, #4]
   b6bc6:	2200      	movs	r2, #0
   b6bc8:	f7ff bcb8 	b.w	b653c <network_set_listen_timeout>

000b6bcc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6bcc:	6840      	ldr	r0, [r0, #4]
   b6bce:	2200      	movs	r2, #0
   b6bd0:	f081 0101 	eor.w	r1, r1, #1
   b6bd4:	f7ff bca2 	b.w	b651c <network_listen>

000b6bd8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6bd8:	2300      	movs	r3, #0
   b6bda:	6840      	ldr	r0, [r0, #4]
   b6bdc:	461a      	mov	r2, r3
   b6bde:	4619      	mov	r1, r3
   b6be0:	f7ff bc94 	b.w	b650c <network_off>

000b6be4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6be4:	2300      	movs	r3, #0
   b6be6:	6840      	ldr	r0, [r0, #4]
   b6be8:	461a      	mov	r2, r3
   b6bea:	4619      	mov	r1, r3
   b6bec:	f7ff bc86 	b.w	b64fc <network_on>

000b6bf0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6bf0:	2200      	movs	r2, #0
   b6bf2:	6840      	ldr	r0, [r0, #4]
   b6bf4:	4611      	mov	r1, r2
   b6bf6:	f7ff bc79 	b.w	b64ec <network_ready>

000b6bfa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6bfa:	2200      	movs	r2, #0
   b6bfc:	6840      	ldr	r0, [r0, #4]
   b6bfe:	4611      	mov	r1, r2
   b6c00:	f7ff bc64 	b.w	b64cc <network_connecting>

000b6c04 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6c04:	6840      	ldr	r0, [r0, #4]
   b6c06:	2200      	movs	r2, #0
   b6c08:	2102      	movs	r1, #2
   b6c0a:	f7ff bc67 	b.w	b64dc <network_disconnect>

000b6c0e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6c0e:	2300      	movs	r3, #0
   b6c10:	6840      	ldr	r0, [r0, #4]
   b6c12:	461a      	mov	r2, r3
   b6c14:	f7ff bc52 	b.w	b64bc <network_connect>

000b6c18 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6c18:	4b02      	ldr	r3, [pc, #8]	; (b6c24 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6c1a:	2203      	movs	r2, #3
   b6c1c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6c1e:	4a02      	ldr	r2, [pc, #8]	; (b6c28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6c20:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6c22:	4770      	bx	lr
   b6c24:	2003e6c8 	.word	0x2003e6c8
   b6c28:	000ba06c 	.word	0x000ba06c

000b6c2c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6c2c:	4770      	bx	lr

000b6c2e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c30:	4606      	mov	r6, r0
   b6c32:	4615      	mov	r5, r2
   b6c34:	460c      	mov	r4, r1
   b6c36:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6c38:	42bc      	cmp	r4, r7
   b6c3a:	d006      	beq.n	b6c4a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6c3c:	6833      	ldr	r3, [r6, #0]
   b6c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6c42:	689b      	ldr	r3, [r3, #8]
   b6c44:	4630      	mov	r0, r6
   b6c46:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6c48:	e7f6      	b.n	b6c38 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6c4a:	4628      	mov	r0, r5
   b6c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6c4e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6c4e:	7c00      	ldrb	r0, [r0, #16]
   b6c50:	2200      	movs	r2, #0
   b6c52:	f7ff bac7 	b.w	b61e4 <hal_i2c_write>

000b6c56 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6c56:	7c00      	ldrb	r0, [r0, #16]
   b6c58:	2100      	movs	r1, #0
   b6c5a:	f7ff bacb 	b.w	b61f4 <hal_i2c_available>

000b6c5e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6c5e:	7c00      	ldrb	r0, [r0, #16]
   b6c60:	2100      	movs	r1, #0
   b6c62:	f7ff bacf 	b.w	b6204 <hal_i2c_read>

000b6c66 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6c66:	7c00      	ldrb	r0, [r0, #16]
   b6c68:	2100      	movs	r1, #0
   b6c6a:	f7ff bad3 	b.w	b6214 <hal_i2c_peek>

000b6c6e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6c6e:	7c00      	ldrb	r0, [r0, #16]
   b6c70:	2100      	movs	r1, #0
   b6c72:	f7ff bad7 	b.w	b6224 <hal_i2c_flush>

000b6c76 <_ZN7TwoWireD0Ev>:
   b6c76:	b510      	push	{r4, lr}
   b6c78:	2114      	movs	r1, #20
   b6c7a:	4604      	mov	r4, r0
   b6c7c:	f7fe fa19 	bl	b50b2 <_ZdlPvj>
   b6c80:	4620      	mov	r0, r4
   b6c82:	bd10      	pop	{r4, pc}

000b6c84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6c84:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6c8a:	4604      	mov	r4, r0
   b6c8c:	4608      	mov	r0, r1
   b6c8e:	2100      	movs	r1, #0
   b6c90:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6c94:	4b03      	ldr	r3, [pc, #12]	; (b6ca4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6c96:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6c98:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6c9a:	4611      	mov	r1, r2
   b6c9c:	f7ff fad2 	bl	b6244 <hal_i2c_init>
}
   b6ca0:	4620      	mov	r0, r4
   b6ca2:	bd10      	pop	{r4, pc}
   b6ca4:	000ba0a8 	.word	0x000ba0a8

000b6ca8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6ca8:	2300      	movs	r3, #0
   b6caa:	7c00      	ldrb	r0, [r0, #16]
   b6cac:	461a      	mov	r2, r3
   b6cae:	4619      	mov	r1, r3
   b6cb0:	f7ff ba80 	b.w	b61b4 <hal_i2c_begin>

000b6cb4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6cb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6cb6:	2200      	movs	r2, #0
   b6cb8:	2314      	movs	r3, #20
   b6cba:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6cbe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6cc2:	780b      	ldrb	r3, [r1, #0]
   b6cc4:	f88d 3008 	strb.w	r3, [sp, #8]
   b6cc8:	684b      	ldr	r3, [r1, #4]
   b6cca:	9303      	str	r3, [sp, #12]
   b6ccc:	68cb      	ldr	r3, [r1, #12]
   b6cce:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6cd0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6cd2:	7a0b      	ldrb	r3, [r1, #8]
   b6cd4:	9305      	str	r3, [sp, #20]
   b6cd6:	a901      	add	r1, sp, #4
   b6cd8:	f7ff fabc 	bl	b6254 <hal_i2c_request_ex>
}
   b6cdc:	b007      	add	sp, #28
   b6cde:	f85d fb04 	ldr.w	pc, [sp], #4

000b6ce2 <_ZN7TwoWire11requestFromEhjh>:
{
   b6ce2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6ce4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6ce6:	f88d 1000 	strb.w	r1, [sp]
   b6cea:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6cee:	9103      	str	r1, [sp, #12]
   b6cf0:	bf18      	it	ne
   b6cf2:	2301      	movne	r3, #1
   b6cf4:	4669      	mov	r1, sp
    size_ = size;
   b6cf6:	9201      	str	r2, [sp, #4]
   b6cf8:	f88d 3008 	strb.w	r3, [sp, #8]
   b6cfc:	f7ff ffda 	bl	b6cb4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6d00:	b005      	add	sp, #20
   b6d02:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d06 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6d06:	2301      	movs	r3, #1
   b6d08:	f7ff bfeb 	b.w	b6ce2 <_ZN7TwoWire11requestFromEhjh>

000b6d0c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6d0c:	7c00      	ldrb	r0, [r0, #16]
   b6d0e:	2200      	movs	r2, #0
   b6d10:	f7ff ba58 	b.w	b61c4 <hal_i2c_begin_transmission>

000b6d14 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6d14:	7c00      	ldrb	r0, [r0, #16]
   b6d16:	2200      	movs	r2, #0
   b6d18:	f7ff ba5c 	b.w	b61d4 <hal_i2c_end_transmission>

000b6d1c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6d1c:	2101      	movs	r1, #1
   b6d1e:	f7ff bff9 	b.w	b6d14 <_ZN7TwoWire15endTransmissionEh>

000b6d22 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6d22:	4770      	bx	lr

000b6d24 <_ZN9IPAddressD0Ev>:
   b6d24:	b510      	push	{r4, lr}
   b6d26:	2118      	movs	r1, #24
   b6d28:	4604      	mov	r4, r0
   b6d2a:	f7fe f9c2 	bl	b50b2 <_ZdlPvj>
   b6d2e:	4620      	mov	r0, r4
   b6d30:	bd10      	pop	{r4, pc}

000b6d32 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6d32:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6d34:	7d03      	ldrb	r3, [r0, #20]
   b6d36:	2b06      	cmp	r3, #6
{
   b6d38:	b08d      	sub	sp, #52	; 0x34
   b6d3a:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d3c:	f100 0704 	add.w	r7, r0, #4
   b6d40:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6d44:	d012      	beq.n	b6d6c <_ZNK9IPAddress7printToER5Print+0x3a>
   b6d46:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6d4a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6d4e:	220a      	movs	r2, #10
   b6d50:	4630      	mov	r0, r6
   b6d52:	f000 f954 	bl	b6ffe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6d56:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6d58:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6d5a:	d019      	beq.n	b6d90 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6d5c:	2c00      	cmp	r4, #0
   b6d5e:	d0f4      	beq.n	b6d4a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6d60:	212e      	movs	r1, #46	; 0x2e
   b6d62:	4630      	mov	r0, r6
   b6d64:	f000 f93c 	bl	b6fe0 <_ZN5Print5printEc>
   b6d68:	4404      	add	r4, r0
   b6d6a:	e7ee      	b.n	b6d4a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d6c:	232f      	movs	r3, #47	; 0x2f
   b6d6e:	466a      	mov	r2, sp
   b6d70:	4639      	mov	r1, r7
   b6d72:	200a      	movs	r0, #10
		buf[0] = 0;
   b6d74:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d78:	f7ff fa74 	bl	b6264 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6d7c:	4668      	mov	r0, sp
   b6d7e:	f7fe f951 	bl	b5024 <strlen>
   b6d82:	6833      	ldr	r3, [r6, #0]
   b6d84:	4602      	mov	r2, r0
   b6d86:	68db      	ldr	r3, [r3, #12]
   b6d88:	4669      	mov	r1, sp
   b6d8a:	4630      	mov	r0, r6
   b6d8c:	4798      	blx	r3
   b6d8e:	4604      	mov	r4, r0
    }
    return n;
}
   b6d90:	4620      	mov	r0, r4
   b6d92:	b00d      	add	sp, #52	; 0x34
   b6d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b6d98 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6d98:	b510      	push	{r4, lr}
   b6d9a:	4b05      	ldr	r3, [pc, #20]	; (b6db0 <_ZN9IPAddressC1Ev+0x18>)
   b6d9c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6d9e:	2211      	movs	r2, #17
   b6da0:	f840 3b04 	str.w	r3, [r0], #4
   b6da4:	2100      	movs	r1, #0
   b6da6:	f002 f889 	bl	b8ebc <memset>
}
   b6daa:	4620      	mov	r0, r4
   b6dac:	bd10      	pop	{r4, pc}
   b6dae:	bf00      	nop
   b6db0:	000ba0d0 	.word	0x000ba0d0

000b6db4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6db4:	4603      	mov	r3, r0
   b6db6:	4a07      	ldr	r2, [pc, #28]	; (b6dd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6db8:	b510      	push	{r4, lr}
   b6dba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6dbe:	f101 0210 	add.w	r2, r1, #16
   b6dc2:	f851 4b04 	ldr.w	r4, [r1], #4
   b6dc6:	f843 4b04 	str.w	r4, [r3], #4
   b6dca:	4291      	cmp	r1, r2
   b6dcc:	d1f9      	bne.n	b6dc2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6dce:	780a      	ldrb	r2, [r1, #0]
   b6dd0:	701a      	strb	r2, [r3, #0]
}
   b6dd2:	bd10      	pop	{r4, pc}
   b6dd4:	000ba0d0 	.word	0x000ba0d0

000b6dd8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6dd8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6dda:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6dde:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6de2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6de6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6dea:	2304      	movs	r3, #4
   b6dec:	6041      	str	r1, [r0, #4]
   b6dee:	7503      	strb	r3, [r0, #20]
}
   b6df0:	bd10      	pop	{r4, pc}
	...

000b6df4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6df4:	b507      	push	{r0, r1, r2, lr}
   b6df6:	4b06      	ldr	r3, [pc, #24]	; (b6e10 <_ZN9IPAddressC1EPKh+0x1c>)
   b6df8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6dfa:	78cb      	ldrb	r3, [r1, #3]
   b6dfc:	9300      	str	r3, [sp, #0]
   b6dfe:	788b      	ldrb	r3, [r1, #2]
   b6e00:	784a      	ldrb	r2, [r1, #1]
   b6e02:	7809      	ldrb	r1, [r1, #0]
   b6e04:	f7ff ffe8 	bl	b6dd8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6e08:	b003      	add	sp, #12
   b6e0a:	f85d fb04 	ldr.w	pc, [sp], #4
   b6e0e:	bf00      	nop
   b6e10:	000ba0d0 	.word	0x000ba0d0

000b6e14 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6e14:	4b01      	ldr	r3, [pc, #4]	; (b6e1c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6e16:	4a02      	ldr	r2, [pc, #8]	; (b6e20 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6e18:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6e1a:	4770      	bx	lr
   b6e1c:	2003e6d0 	.word	0x2003e6d0
   b6e20:	000ba0dc 	.word	0x000ba0dc

000b6e24 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6e24:	2300      	movs	r3, #0
   b6e26:	6840      	ldr	r0, [r0, #4]
   b6e28:	461a      	mov	r2, r3
   b6e2a:	f7ff bb47 	b.w	b64bc <network_connect>

000b6e2e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6e2e:	6840      	ldr	r0, [r0, #4]
   b6e30:	2200      	movs	r2, #0
   b6e32:	2102      	movs	r1, #2
   b6e34:	f7ff bb52 	b.w	b64dc <network_disconnect>

000b6e38 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6e38:	2200      	movs	r2, #0
   b6e3a:	6840      	ldr	r0, [r0, #4]
   b6e3c:	4611      	mov	r1, r2
   b6e3e:	f7ff bb45 	b.w	b64cc <network_connecting>

000b6e42 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6e42:	2200      	movs	r2, #0
   b6e44:	6840      	ldr	r0, [r0, #4]
   b6e46:	4611      	mov	r1, r2
   b6e48:	f7ff bb50 	b.w	b64ec <network_ready>

000b6e4c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6e4c:	2300      	movs	r3, #0
   b6e4e:	6840      	ldr	r0, [r0, #4]
   b6e50:	461a      	mov	r2, r3
   b6e52:	4619      	mov	r1, r3
   b6e54:	f7ff bb52 	b.w	b64fc <network_on>

000b6e58 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6e58:	2300      	movs	r3, #0
   b6e5a:	6840      	ldr	r0, [r0, #4]
   b6e5c:	461a      	mov	r2, r3
   b6e5e:	4619      	mov	r1, r3
   b6e60:	f7ff bb54 	b.w	b650c <network_off>

000b6e64 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6e64:	6840      	ldr	r0, [r0, #4]
   b6e66:	2100      	movs	r1, #0
   b6e68:	f7ff bb78 	b.w	b655c <network_is_on>

000b6e6c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6e6c:	6840      	ldr	r0, [r0, #4]
   b6e6e:	2100      	movs	r1, #0
   b6e70:	f7ff bb7c 	b.w	b656c <network_is_off>

000b6e74 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6e74:	6840      	ldr	r0, [r0, #4]
   b6e76:	2200      	movs	r2, #0
   b6e78:	f081 0101 	eor.w	r1, r1, #1
   b6e7c:	f7ff bb4e 	b.w	b651c <network_listen>

000b6e80 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6e80:	6840      	ldr	r0, [r0, #4]
   b6e82:	2200      	movs	r2, #0
   b6e84:	f7ff bb5a 	b.w	b653c <network_set_listen_timeout>

000b6e88 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6e88:	2200      	movs	r2, #0
   b6e8a:	6840      	ldr	r0, [r0, #4]
   b6e8c:	4611      	mov	r1, r2
   b6e8e:	f7ff bb5d 	b.w	b654c <network_get_listen_timeout>

000b6e92 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6e92:	2200      	movs	r2, #0
   b6e94:	6840      	ldr	r0, [r0, #4]
   b6e96:	4611      	mov	r1, r2
   b6e98:	f7ff bb48 	b.w	b652c <network_listening>

000b6e9c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6ea0:	b095      	sub	sp, #84	; 0x54
   b6ea2:	4614      	mov	r4, r2
   b6ea4:	460d      	mov	r5, r1
   b6ea6:	4607      	mov	r7, r0
    IPAddress addr;
   b6ea8:	f7ff ff76 	bl	b6d98 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6eac:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6eae:	221c      	movs	r2, #28
   b6eb0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6eb2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6eb4:	f002 f802 	bl	b8ebc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6eb8:	2340      	movs	r3, #64	; 0x40
   b6eba:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6ebc:	4620      	mov	r0, r4
   b6ebe:	466b      	mov	r3, sp
   b6ec0:	aa0c      	add	r2, sp, #48	; 0x30
   b6ec2:	2100      	movs	r1, #0
   b6ec4:	f7ff f9de 	bl	b6284 <netdb_getaddrinfo>
    if (!r) {
   b6ec8:	4604      	mov	r4, r0
   b6eca:	2800      	cmp	r0, #0
   b6ecc:	d14b      	bne.n	b6f66 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6ece:	4602      	mov	r2, r0
   b6ed0:	2101      	movs	r1, #1
   b6ed2:	6868      	ldr	r0, [r5, #4]
   b6ed4:	f7ff fb0a 	bl	b64ec <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ed8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6eda:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6edc:	4622      	mov	r2, r4
   b6ede:	6868      	ldr	r0, [r5, #4]
   b6ee0:	f7ff fb04 	bl	b64ec <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ee4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ee6:	4681      	mov	r9, r0
        bool ok = false;
   b6ee8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6eea:	2e00      	cmp	r6, #0
   b6eec:	d03b      	beq.n	b6f66 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6eee:	2900      	cmp	r1, #0
   b6ef0:	d139      	bne.n	b6f66 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6ef2:	6873      	ldr	r3, [r6, #4]
   b6ef4:	2b02      	cmp	r3, #2
   b6ef6:	d003      	beq.n	b6f00 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6ef8:	2b0a      	cmp	r3, #10
   b6efa:	d011      	beq.n	b6f20 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6efc:	69f6      	ldr	r6, [r6, #28]
   b6efe:	e7f4      	b.n	b6eea <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6f00:	f1b8 0f00 	cmp.w	r8, #0
   b6f04:	d0fa      	beq.n	b6efc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6f06:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6f08:	a806      	add	r0, sp, #24
   b6f0a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6f0c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6f0e:	f7ff ff71 	bl	b6df4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f14:	1d3c      	adds	r4, r7, #4
   b6f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f18:	682b      	ldr	r3, [r5, #0]
   b6f1a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6f1c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6f1e:	e7ed      	b.n	b6efc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6f20:	f1b9 0f00 	cmp.w	r9, #0
   b6f24:	d0ea      	beq.n	b6efc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6f26:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6f28:	2210      	movs	r2, #16
   b6f2a:	a801      	add	r0, sp, #4
   b6f2c:	f001 ffc6 	bl	b8ebc <memset>
                    a.v = 6;
   b6f30:	2306      	movs	r3, #6
   b6f32:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6f36:	ad01      	add	r5, sp, #4
   b6f38:	f104 0308 	add.w	r3, r4, #8
   b6f3c:	3418      	adds	r4, #24
   b6f3e:	6818      	ldr	r0, [r3, #0]
   b6f40:	6859      	ldr	r1, [r3, #4]
   b6f42:	462a      	mov	r2, r5
   b6f44:	c203      	stmia	r2!, {r0, r1}
   b6f46:	3308      	adds	r3, #8
   b6f48:	42a3      	cmp	r3, r4
   b6f4a:	4615      	mov	r5, r2
   b6f4c:	d1f7      	bne.n	b6f3e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6f4e:	a901      	add	r1, sp, #4
   b6f50:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6f52:	ad07      	add	r5, sp, #28
   b6f54:	f7ff ff2e 	bl	b6db4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f5a:	1d3c      	adds	r4, r7, #4
   b6f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f5e:	682b      	ldr	r3, [r5, #0]
   b6f60:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6f62:	4649      	mov	r1, r9
   b6f64:	e7ca      	b.n	b6efc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6f66:	9800      	ldr	r0, [sp, #0]
   b6f68:	f7ff f984 	bl	b6274 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6f6c:	4638      	mov	r0, r7
   b6f6e:	b015      	add	sp, #84	; 0x54
   b6f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6f74 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6f74:	4b02      	ldr	r3, [pc, #8]	; (b6f80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6f76:	4a03      	ldr	r2, [pc, #12]	; (b6f84 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6f78:	601a      	str	r2, [r3, #0]
   b6f7a:	2200      	movs	r2, #0
   b6f7c:	605a      	str	r2, [r3, #4]

} // spark
   b6f7e:	4770      	bx	lr
   b6f80:	2003e6d4 	.word	0x2003e6d4
   b6f84:	000ba0e8 	.word	0x000ba0e8

000b6f88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f8a:	4606      	mov	r6, r0
   b6f8c:	460d      	mov	r5, r1
  size_t n = 0;
   b6f8e:	188f      	adds	r7, r1, r2
   b6f90:	2400      	movs	r4, #0
  while (size--) {
   b6f92:	42bd      	cmp	r5, r7
   b6f94:	d00c      	beq.n	b6fb0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6f96:	6833      	ldr	r3, [r6, #0]
   b6f98:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6f9c:	689b      	ldr	r3, [r3, #8]
   b6f9e:	4630      	mov	r0, r6
   b6fa0:	4798      	blx	r3
     if (chunk>=0)
   b6fa2:	1e03      	subs	r3, r0, #0
   b6fa4:	db01      	blt.n	b6faa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6fa6:	441c      	add	r4, r3
  while (size--) {
   b6fa8:	e7f3      	b.n	b6f92 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6faa:	2c00      	cmp	r4, #0
   b6fac:	bf08      	it	eq
   b6fae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6fb0:	4620      	mov	r0, r4
   b6fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6fb4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6fb4:	b513      	push	{r0, r1, r4, lr}
   b6fb6:	4604      	mov	r4, r0
    }
   b6fb8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6fba:	b159      	cbz	r1, b6fd4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6fbc:	9101      	str	r1, [sp, #4]
   b6fbe:	f7fe f831 	bl	b5024 <strlen>
   b6fc2:	6823      	ldr	r3, [r4, #0]
   b6fc4:	9901      	ldr	r1, [sp, #4]
   b6fc6:	68db      	ldr	r3, [r3, #12]
   b6fc8:	4602      	mov	r2, r0
   b6fca:	4620      	mov	r0, r4
    }
   b6fcc:	b002      	add	sp, #8
   b6fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6fd2:	4718      	bx	r3
    }
   b6fd4:	b002      	add	sp, #8
   b6fd6:	bd10      	pop	{r4, pc}

000b6fd8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6fd8:	b508      	push	{r3, lr}
  return write(str);
   b6fda:	f7ff ffeb 	bl	b6fb4 <_ZN5Print5writeEPKc>
}
   b6fde:	bd08      	pop	{r3, pc}

000b6fe0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6fe0:	6803      	ldr	r3, [r0, #0]
   b6fe2:	689b      	ldr	r3, [r3, #8]
   b6fe4:	4718      	bx	r3

000b6fe6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6fe6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6fe8:	210d      	movs	r1, #13
{
   b6fea:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6fec:	f7ff fff8 	bl	b6fe0 <_ZN5Print5printEc>
  n += print('\n');
   b6ff0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6ff2:	4604      	mov	r4, r0
  n += print('\n');
   b6ff4:	4628      	mov	r0, r5
   b6ff6:	f7ff fff3 	bl	b6fe0 <_ZN5Print5printEc>
  return n;
}
   b6ffa:	4420      	add	r0, r4
   b6ffc:	bd38      	pop	{r3, r4, r5, pc}

000b6ffe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6ffe:	b530      	push	{r4, r5, lr}
   b7000:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7002:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7004:	2a01      	cmp	r2, #1
  *str = '\0';
   b7006:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b700a:	bf98      	it	ls
   b700c:	220a      	movls	r2, #10
   b700e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7010:	460d      	mov	r5, r1
   b7012:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7016:	fb01 5312 	mls	r3, r1, r2, r5
   b701a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b701e:	2b09      	cmp	r3, #9
   b7020:	bf94      	ite	ls
   b7022:	3330      	addls	r3, #48	; 0x30
   b7024:	3337      	addhi	r3, #55	; 0x37
   b7026:	b2db      	uxtb	r3, r3
  } while(n);
   b7028:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b702a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b702e:	d9ef      	bls.n	b7010 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7030:	4621      	mov	r1, r4
   b7032:	f7ff ffbf 	bl	b6fb4 <_ZN5Print5writeEPKc>
}
   b7036:	b00b      	add	sp, #44	; 0x2c
   b7038:	bd30      	pop	{r4, r5, pc}
	...

000b703c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b703c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7040:	ec55 4b10 	vmov	r4, r5, d0
   b7044:	4606      	mov	r6, r0
   b7046:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b7048:	ee10 2a10 	vmov	r2, s0
   b704c:	ee10 0a10 	vmov	r0, s0
   b7050:	462b      	mov	r3, r5
   b7052:	4629      	mov	r1, r5
   b7054:	f7fd fc3a 	bl	b48cc <__aeabi_dcmpun>
   b7058:	b140      	cbz	r0, b706c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b705a:	4953      	ldr	r1, [pc, #332]	; (b71a8 <_ZN5Print10printFloatEdh+0x16c>)
   b705c:	4630      	mov	r0, r6
   b705e:	f7ff ffa9 	bl	b6fb4 <_ZN5Print5writeEPKc>
   b7062:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b7064:	4650      	mov	r0, sl
   b7066:	b003      	add	sp, #12
   b7068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b706c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b7070:	4b4e      	ldr	r3, [pc, #312]	; (b71ac <_ZN5Print10printFloatEdh+0x170>)
   b7072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7076:	4620      	mov	r0, r4
   b7078:	4649      	mov	r1, r9
   b707a:	f7fd fc27 	bl	b48cc <__aeabi_dcmpun>
   b707e:	b948      	cbnz	r0, b7094 <_ZN5Print10printFloatEdh+0x58>
   b7080:	4b4a      	ldr	r3, [pc, #296]	; (b71ac <_ZN5Print10printFloatEdh+0x170>)
   b7082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7086:	4620      	mov	r0, r4
   b7088:	4649      	mov	r1, r9
   b708a:	f7fd fc01 	bl	b4890 <__aeabi_dcmple>
   b708e:	b908      	cbnz	r0, b7094 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b7090:	4947      	ldr	r1, [pc, #284]	; (b71b0 <_ZN5Print10printFloatEdh+0x174>)
   b7092:	e7e3      	b.n	b705c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b7094:	4b47      	ldr	r3, [pc, #284]	; (b71b4 <_ZN5Print10printFloatEdh+0x178>)
   b7096:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b709a:	4620      	mov	r0, r4
   b709c:	4629      	mov	r1, r5
   b709e:	f7fd fc0b 	bl	b48b8 <__aeabi_dcmpgt>
   b70a2:	b108      	cbz	r0, b70a8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b70a4:	4944      	ldr	r1, [pc, #272]	; (b71b8 <_ZN5Print10printFloatEdh+0x17c>)
   b70a6:	e7d9      	b.n	b705c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b70a8:	4b44      	ldr	r3, [pc, #272]	; (b71bc <_ZN5Print10printFloatEdh+0x180>)
   b70aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b70ae:	4620      	mov	r0, r4
   b70b0:	4629      	mov	r1, r5
   b70b2:	f7fd fbe3 	bl	b487c <__aeabi_dcmplt>
   b70b6:	2800      	cmp	r0, #0
   b70b8:	d1f4      	bne.n	b70a4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b70ba:	2200      	movs	r2, #0
   b70bc:	2300      	movs	r3, #0
   b70be:	4620      	mov	r0, r4
   b70c0:	4629      	mov	r1, r5
   b70c2:	f7fd fbdb 	bl	b487c <__aeabi_dcmplt>
   b70c6:	b1d0      	cbz	r0, b70fe <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b70c8:	212d      	movs	r1, #45	; 0x2d
   b70ca:	4630      	mov	r0, r6
   b70cc:	f7ff ff88 	bl	b6fe0 <_ZN5Print5printEc>
     number = -number;
   b70d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b70d4:	4682      	mov	sl, r0
     number = -number;
   b70d6:	461d      	mov	r5, r3
  double rounding = 0.5;
   b70d8:	4939      	ldr	r1, [pc, #228]	; (b71c0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b70da:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b71c8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b70de:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b70e2:	2000      	movs	r0, #0
    rounding /= 10.0;
   b70e4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b70e8:	fa5f f38b 	uxtb.w	r3, fp
   b70ec:	429f      	cmp	r7, r3
   b70ee:	d908      	bls.n	b7102 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b70f0:	4642      	mov	r2, r8
   b70f2:	464b      	mov	r3, r9
   b70f4:	f7fd fa7a 	bl	b45ec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b70f8:	f10b 0b01 	add.w	fp, fp, #1
   b70fc:	e7f4      	b.n	b70e8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b70fe:	4682      	mov	sl, r0
   b7100:	e7ea      	b.n	b70d8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b7102:	4622      	mov	r2, r4
   b7104:	462b      	mov	r3, r5
   b7106:	f7fc ff91 	bl	b402c <__adddf3>
   b710a:	460d      	mov	r5, r1
   b710c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b710e:	f7fd fc1b 	bl	b4948 <__aeabi_d2uiz>
   b7112:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b7114:	f7fd f8c6 	bl	b42a4 <__aeabi_ui2d>
   b7118:	4602      	mov	r2, r0
   b711a:	460b      	mov	r3, r1
   b711c:	4620      	mov	r0, r4
   b711e:	4629      	mov	r1, r5
   b7120:	f7fc ff82 	bl	b4028 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b7124:	220a      	movs	r2, #10
   b7126:	4604      	mov	r4, r0
   b7128:	460d      	mov	r5, r1
   b712a:	4630      	mov	r0, r6
   b712c:	4641      	mov	r1, r8
   b712e:	f7ff ff66 	bl	b6ffe <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b7132:	4482      	add	sl, r0
  if (digits > 0) {
   b7134:	2f00      	cmp	r7, #0
   b7136:	d095      	beq.n	b7064 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b7138:	4922      	ldr	r1, [pc, #136]	; (b71c4 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b713a:	f8df 908c 	ldr.w	r9, [pc, #140]	; b71c8 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b713e:	4630      	mov	r0, r6
   b7140:	f7ff ff38 	bl	b6fb4 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b7144:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b7148:	4482      	add	sl, r0
  while (digits-- > 0)
   b714a:	2f00      	cmp	r7, #0
   b714c:	d08a      	beq.n	b7064 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b714e:	4642      	mov	r2, r8
   b7150:	464b      	mov	r3, r9
   b7152:	4620      	mov	r0, r4
   b7154:	4629      	mov	r1, r5
   b7156:	f7fd f91f 	bl	b4398 <__aeabi_dmul>
   b715a:	4604      	mov	r4, r0
   b715c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b715e:	f7fd fbcb 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b7162:	f1b0 0b00 	subs.w	fp, r0, #0
   b7166:	da1c      	bge.n	b71a2 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b7168:	212d      	movs	r1, #45	; 0x2d
   b716a:	4630      	mov	r0, r6
   b716c:	f7ff ff38 	bl	b6fe0 <_ZN5Print5printEc>
            val = -n;
   b7170:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b7174:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b7176:	220a      	movs	r2, #10
   b7178:	4630      	mov	r0, r6
   b717a:	9301      	str	r3, [sp, #4]
   b717c:	f7ff ff3f 	bl	b6ffe <_ZN5Print11printNumberEmh>
   b7180:	9b01      	ldr	r3, [sp, #4]
   b7182:	4418      	add	r0, r3
    n += print(toPrint);
   b7184:	4482      	add	sl, r0
    remainder -= toPrint;
   b7186:	4658      	mov	r0, fp
   b7188:	f7fd f89c 	bl	b42c4 <__aeabi_i2d>
   b718c:	4602      	mov	r2, r0
   b718e:	460b      	mov	r3, r1
   b7190:	4620      	mov	r0, r4
   b7192:	4629      	mov	r1, r5
   b7194:	f7fc ff48 	bl	b4028 <__aeabi_dsub>
   b7198:	3f01      	subs	r7, #1
   b719a:	4604      	mov	r4, r0
   b719c:	460d      	mov	r5, r1
   b719e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b71a0:	e7d3      	b.n	b714a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b71a2:	4659      	mov	r1, fp
        size_t t = 0;
   b71a4:	2300      	movs	r3, #0
   b71a6:	e7e6      	b.n	b7176 <_ZN5Print10printFloatEdh+0x13a>
   b71a8:	000ba11c 	.word	0x000ba11c
   b71ac:	7fefffff 	.word	0x7fefffff
   b71b0:	000ba120 	.word	0x000ba120
   b71b4:	41efffff 	.word	0x41efffff
   b71b8:	000ba124 	.word	0x000ba124
   b71bc:	c1efffff 	.word	0xc1efffff
   b71c0:	3fe00000 	.word	0x3fe00000
   b71c4:	000ba128 	.word	0x000ba128
   b71c8:	40240000 	.word	0x40240000

000b71cc <_ZN5Print5printEfi>:
{
   b71cc:	b538      	push	{r3, r4, r5, lr}
   b71ce:	4604      	mov	r4, r0
   b71d0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b71d4:	b2cd      	uxtb	r5, r1
   b71d6:	f7fd f887 	bl	b42e8 <__aeabi_f2d>
   b71da:	ec41 0b10 	vmov	d0, r0, r1
   b71de:	4629      	mov	r1, r5
   b71e0:	4620      	mov	r0, r4
}
   b71e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b71e6:	f7ff bf29 	b.w	b703c <_ZN5Print10printFloatEdh>

000b71ea <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b71ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b71ee:	b086      	sub	sp, #24
   b71f0:	af00      	add	r7, sp, #0
   b71f2:	4605      	mov	r5, r0
   b71f4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b71f6:	1d38      	adds	r0, r7, #4
   b71f8:	2114      	movs	r1, #20
{
   b71fa:	4614      	mov	r4, r2
    va_copy(args2, args);
   b71fc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b71fe:	f7ff f9d5 	bl	b65ac <vsnprintf>

    if (n<bufsize)
   b7202:	2813      	cmp	r0, #19
   b7204:	d80e      	bhi.n	b7224 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7206:	1d39      	adds	r1, r7, #4
   b7208:	4628      	mov	r0, r5
   b720a:	f7ff fed3 	bl	b6fb4 <_ZN5Print5writeEPKc>
   b720e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7210:	b11e      	cbz	r6, b721a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7212:	4628      	mov	r0, r5
   b7214:	f7ff fee7 	bl	b6fe6 <_ZN5Print7printlnEv>
   b7218:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b721a:	4620      	mov	r0, r4
   b721c:	3718      	adds	r7, #24
   b721e:	46bd      	mov	sp, r7
   b7220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7224:	f100 0308 	add.w	r3, r0, #8
   b7228:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b722c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b722e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7232:	4622      	mov	r2, r4
   b7234:	1c41      	adds	r1, r0, #1
   b7236:	683b      	ldr	r3, [r7, #0]
   b7238:	4668      	mov	r0, sp
   b723a:	f7ff f9b7 	bl	b65ac <vsnprintf>
  return write(str);
   b723e:	4669      	mov	r1, sp
   b7240:	4628      	mov	r0, r5
   b7242:	f7ff feb7 	bl	b6fb4 <_ZN5Print5writeEPKc>
   b7246:	4604      	mov	r4, r0
   b7248:	46c5      	mov	sp, r8
   b724a:	e7e1      	b.n	b7210 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b724c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b724c:	4b01      	ldr	r3, [pc, #4]	; (b7254 <_GLOBAL__sub_I_RGB+0x8>)
   b724e:	2200      	movs	r2, #0
   b7250:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7252:	4770      	bx	lr
   b7254:	2003e6dc 	.word	0x2003e6dc

000b7258 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7258:	2100      	movs	r1, #0
   b725a:	f7ff b86b 	b.w	b6334 <hal_spi_release>

000b725e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b725e:	2100      	movs	r1, #0
   b7260:	f7ff b860 	b.w	b6324 <hal_spi_acquire>

000b7264 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7264:	b510      	push	{r4, lr}
   b7266:	4604      	mov	r4, r0
   b7268:	4608      	mov	r0, r1
{
    _spi = spi;
   b726a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b726c:	f7ff f83a 	bl	b62e4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7270:	2300      	movs	r3, #0
   b7272:	6063      	str	r3, [r4, #4]
}
   b7274:	4620      	mov	r0, r4
   b7276:	bd10      	pop	{r4, pc}

000b7278 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7278:	b513      	push	{r0, r1, r4, lr}
   b727a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b727c:	7800      	ldrb	r0, [r0, #0]
   b727e:	f7ff ffee 	bl	b725e <_ZN8SPIClass4lockEv.isra.0>
   b7282:	b958      	cbnz	r0, b729c <_ZN8SPIClass5beginEv+0x24>
   b7284:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7286:	9001      	str	r0, [sp, #4]
   b7288:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b728c:	f7ff f802 	bl	b6294 <hal_spi_begin>
        unlock();
   b7290:	9801      	ldr	r0, [sp, #4]
    }
}
   b7292:	b002      	add	sp, #8
   b7294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7298:	f7ff bfde 	b.w	b7258 <_ZN8SPIClass6unlockEv.isra.0>
   b729c:	b002      	add	sp, #8
   b729e:	bd10      	pop	{r4, pc}

000b72a0 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b72a0:	b513      	push	{r0, r1, r4, lr}
   b72a2:	4604      	mov	r4, r0
    if (!lock())
   b72a4:	7800      	ldrb	r0, [r0, #0]
{
   b72a6:	9101      	str	r1, [sp, #4]
    if (!lock())
   b72a8:	f7ff ffd9 	bl	b725e <_ZN8SPIClass4lockEv.isra.0>
   b72ac:	9901      	ldr	r1, [sp, #4]
   b72ae:	b948      	cbnz	r0, b72c4 <_ZN8SPIClass11setBitOrderEh+0x24>
   b72b0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b72b2:	9001      	str	r0, [sp, #4]
   b72b4:	f7fe fff6 	bl	b62a4 <hal_spi_set_bit_order>
        unlock();
   b72b8:	9801      	ldr	r0, [sp, #4]
    }
}
   b72ba:	b002      	add	sp, #8
   b72bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b72c0:	f7ff bfca 	b.w	b7258 <_ZN8SPIClass6unlockEv.isra.0>
   b72c4:	b002      	add	sp, #8
   b72c6:	bd10      	pop	{r4, pc}

000b72c8 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b72c8:	b513      	push	{r0, r1, r4, lr}
   b72ca:	4604      	mov	r4, r0
    if (!lock())
   b72cc:	7800      	ldrb	r0, [r0, #0]
{
   b72ce:	9101      	str	r1, [sp, #4]
    if (!lock())
   b72d0:	f7ff ffc5 	bl	b725e <_ZN8SPIClass4lockEv.isra.0>
   b72d4:	9901      	ldr	r1, [sp, #4]
   b72d6:	b948      	cbnz	r0, b72ec <_ZN8SPIClass11setDataModeEh+0x24>
   b72d8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b72da:	9001      	str	r0, [sp, #4]
   b72dc:	f7fe ffea 	bl	b62b4 <hal_spi_set_data_mode>
        unlock();
   b72e0:	9801      	ldr	r0, [sp, #4]
    }
}
   b72e2:	b002      	add	sp, #8
   b72e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b72e8:	f7ff bfb6 	b.w	b7258 <_ZN8SPIClass6unlockEv.isra.0>
   b72ec:	b002      	add	sp, #8
   b72ee:	bd10      	pop	{r4, pc}

000b72f0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b72f0:	7800      	ldrb	r0, [r0, #0]
   b72f2:	f7ff bfb1 	b.w	b7258 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b72f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b72f8:	0840      	lsrs	r0, r0, #1
{
   b72fa:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b72fc:	6018      	str	r0, [r3, #0]
   b72fe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7300:	6818      	ldr	r0, [r3, #0]
   b7302:	4288      	cmp	r0, r1
   b7304:	b2e5      	uxtb	r5, r4
   b7306:	d906      	bls.n	b7316 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7308:	3401      	adds	r4, #1
   b730a:	2c08      	cmp	r4, #8
   b730c:	d002      	beq.n	b7314 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b730e:	0840      	lsrs	r0, r0, #1
   b7310:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7312:	e7f5      	b.n	b7300 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7314:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7316:	4b02      	ldr	r3, [pc, #8]	; (b7320 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7318:	5d5b      	ldrb	r3, [r3, r5]
   b731a:	7013      	strb	r3, [r2, #0]
}
   b731c:	bd30      	pop	{r4, r5, pc}
   b731e:	bf00      	nop
   b7320:	000ba12a 	.word	0x000ba12a

000b7324 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7328:	4606      	mov	r6, r0
   b732a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b732c:	7800      	ldrb	r0, [r0, #0]
{
   b732e:	460c      	mov	r4, r1
    CHECK(lock());
   b7330:	f7ff ff95 	bl	b725e <_ZN8SPIClass4lockEv.isra.0>
   b7334:	2800      	cmp	r0, #0
   b7336:	db1b      	blt.n	b7370 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7338:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b733a:	2214      	movs	r2, #20
   b733c:	2100      	movs	r1, #0
   b733e:	a809      	add	r0, sp, #36	; 0x24
   b7340:	f001 fdbc 	bl	b8ebc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7344:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7346:	2200      	movs	r2, #0
   b7348:	a909      	add	r1, sp, #36	; 0x24
   b734a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b734c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7350:	f7fe ffd8 	bl	b6304 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7354:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7358:	b113      	cbz	r3, b7360 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b735a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b735e:	b155      	cbz	r5, b7376 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7360:	2700      	movs	r7, #0
   b7362:	46b9      	mov	r9, r7
   b7364:	46b8      	mov	r8, r7
   b7366:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7368:	7923      	ldrb	r3, [r4, #4]
   b736a:	b15d      	cbz	r5, b7384 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b736c:	b1c3      	cbz	r3, b73a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b736e:	2000      	movs	r0, #0
}
   b7370:	b00f      	add	sp, #60	; 0x3c
   b7372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7376:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b737a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b737e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7382:	e7f1      	b.n	b7368 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7384:	2b00      	cmp	r3, #0
   b7386:	d135      	bne.n	b73f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7388:	68a3      	ldr	r3, [r4, #8]
   b738a:	4543      	cmp	r3, r8
   b738c:	d108      	bne.n	b73a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b738e:	f88d 9020 	strb.w	r9, [sp, #32]
   b7392:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7396:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b739a:	89a3      	ldrh	r3, [r4, #12]
   b739c:	429a      	cmp	r2, r3
   b739e:	d0e6      	beq.n	b736e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b73a0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b73a2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b73a4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b73a8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b73aa:	ab04      	add	r3, sp, #16
   b73ac:	f10d 020f 	add.w	r2, sp, #15
   b73b0:	f7ff ffa2 	bl	b72f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b73b4:	7921      	ldrb	r1, [r4, #4]
   b73b6:	b985      	cbnz	r5, b73da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b73b8:	b989      	cbnz	r1, b73de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b73ba:	68a3      	ldr	r3, [r4, #8]
   b73bc:	4543      	cmp	r3, r8
   b73be:	d30e      	bcc.n	b73de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b73c0:	f88d 9020 	strb.w	r9, [sp, #32]
   b73c4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b73c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b73cc:	89a3      	ldrh	r3, [r4, #12]
   b73ce:	429a      	cmp	r2, r3
   b73d0:	d105      	bne.n	b73de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b73d2:	9b04      	ldr	r3, [sp, #16]
   b73d4:	4543      	cmp	r3, r8
   b73d6:	d102      	bne.n	b73de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b73d8:	e7c9      	b.n	b736e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b73da:	2900      	cmp	r1, #0
   b73dc:	d1f9      	bne.n	b73d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b73de:	2300      	movs	r3, #0
   b73e0:	9301      	str	r3, [sp, #4]
   b73e2:	7b63      	ldrb	r3, [r4, #13]
   b73e4:	9300      	str	r3, [sp, #0]
   b73e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b73ea:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b73ec:	7830      	ldrb	r0, [r6, #0]
   b73ee:	f7fe ff91 	bl	b6314 <hal_spi_set_settings>
   b73f2:	e7bc      	b.n	b736e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b73f4:	e9cd 5500 	strd	r5, r5, [sp]
   b73f8:	462b      	mov	r3, r5
   b73fa:	462a      	mov	r2, r5
   b73fc:	2101      	movs	r1, #1
   b73fe:	e7f5      	b.n	b73ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7400 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b7400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7404:	b088      	sub	sp, #32
    unsigned clock = 0;
   b7406:	2300      	movs	r3, #0
{
   b7408:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b740a:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b740c:	9302      	str	r3, [sp, #8]
{
   b740e:	460e      	mov	r6, r1
   b7410:	4617      	mov	r7, r2
    if (!lock())
   b7412:	f7ff ff24 	bl	b725e <_ZN8SPIClass4lockEv.isra.0>
   b7416:	4605      	mov	r5, r0
   b7418:	bb00      	cbnz	r0, b745c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b741a:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b741e:	4601      	mov	r1, r0
   b7420:	2214      	movs	r2, #20
   b7422:	a803      	add	r0, sp, #12
   b7424:	f001 fd4a 	bl	b8ebc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7428:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b742a:	462a      	mov	r2, r5
   b742c:	a903      	add	r1, sp, #12
   b742e:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b7430:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b7434:	f7fe ff66 	bl	b6304 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b7438:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b743a:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b743e:	ab02      	add	r3, sp, #8
   b7440:	f10d 0207 	add.w	r2, sp, #7
   b7444:	fb07 f106 	mul.w	r1, r7, r6
   b7448:	f7ff ff56 	bl	b72f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b744c:	7820      	ldrb	r0, [r4, #0]
   b744e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b7452:	f7fe ff37 	bl	b62c4 <hal_spi_set_clock_divider>
        unlock();
   b7456:	7820      	ldrb	r0, [r4, #0]
   b7458:	f7ff fefe 	bl	b7258 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b745c:	9802      	ldr	r0, [sp, #8]
   b745e:	b008      	add	sp, #32
   b7460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7464 <_ZN8SPIClass15setClockDividerEh>:
{
   b7464:	b538      	push	{r3, r4, r5, lr}
   b7466:	4604      	mov	r4, r0
    if (!lock())
   b7468:	7800      	ldrb	r0, [r0, #0]
{
   b746a:	460d      	mov	r5, r1
    if (!lock())
   b746c:	f7ff fef7 	bl	b725e <_ZN8SPIClass4lockEv.isra.0>
   b7470:	4603      	mov	r3, r0
   b7472:	b9d0      	cbnz	r0, b74aa <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b7474:	6861      	ldr	r1, [r4, #4]
   b7476:	b199      	cbz	r1, b74a0 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b7478:	4a0c      	ldr	r2, [pc, #48]	; (b74ac <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b747a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b747e:	4285      	cmp	r5, r0
   b7480:	d002      	beq.n	b7488 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b7482:	3301      	adds	r3, #1
   b7484:	2b08      	cmp	r3, #8
   b7486:	d1f8      	bne.n	b747a <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b7488:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b748a:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b748c:	2201      	movs	r2, #1
   b748e:	40d9      	lsrs	r1, r3
   b7490:	4620      	mov	r0, r4
   b7492:	f7ff ffb5 	bl	b7400 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b7496:	7820      	ldrb	r0, [r4, #0]
}
   b7498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b749c:	f7ff bedc 	b.w	b7258 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b74a0:	7820      	ldrb	r0, [r4, #0]
   b74a2:	4629      	mov	r1, r5
   b74a4:	f7fe ff0e 	bl	b62c4 <hal_spi_set_clock_divider>
   b74a8:	e7f5      	b.n	b7496 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b74aa:	bd38      	pop	{r3, r4, r5, pc}
   b74ac:	000ba12a 	.word	0x000ba12a

000b74b0 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b74b0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b74b2:	7800      	ldrb	r0, [r0, #0]
   b74b4:	f7fe ff0e 	bl	b62d4 <hal_spi_transfer>
}
   b74b8:	b2c0      	uxtb	r0, r0
   b74ba:	bd08      	pop	{r3, pc}

000b74bc <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b74bc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b74c0:	ec57 6b10 	vmov	r6, r7, d0
   b74c4:	4680      	mov	r8, r0
   b74c6:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b74c8:	ee10 0a10 	vmov	r0, s0
   b74cc:	2200      	movs	r2, #0
   b74ce:	2300      	movs	r3, #0
   b74d0:	4639      	mov	r1, r7
   b74d2:	f7fd f9d3 	bl	b487c <__aeabi_dcmplt>
   b74d6:	b128      	cbz	r0, b74e4 <_Z4dtoadhPc+0x28>
        val = -val;
   b74d8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b74dc:	461f      	mov	r7, r3
        *sout++ = '-';
   b74de:	232d      	movs	r3, #45	; 0x2d
   b74e0:	f804 3b01 	strb.w	r3, [r4], #1
   b74e4:	2300      	movs	r3, #0
    }
    long scale = 1;
   b74e6:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b74ea:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b74ec:	b2d9      	uxtb	r1, r3
   b74ee:	4588      	cmp	r8, r1
   b74f0:	d903      	bls.n	b74fa <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b74f2:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b74f6:	3301      	adds	r3, #1
   b74f8:	e7f8      	b.n	b74ec <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b74fa:	4648      	mov	r0, r9
   b74fc:	f7fc fee2 	bl	b42c4 <__aeabi_i2d>
   b7500:	4632      	mov	r2, r6
   b7502:	463b      	mov	r3, r7
   b7504:	f7fc ff48 	bl	b4398 <__aeabi_dmul>
   b7508:	4606      	mov	r6, r0
   b750a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b750c:	f7fd fc02 	bl	b4d14 <__aeabi_d2ulz>
   b7510:	468a      	mov	sl, r1
   b7512:	4605      	mov	r5, r0
   b7514:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b7516:	f7fc ff09 	bl	b432c <__aeabi_ul2d>
   b751a:	4602      	mov	r2, r0
   b751c:	460b      	mov	r3, r1
   b751e:	4630      	mov	r0, r6
   b7520:	4639      	mov	r1, r7
   b7522:	f7fc fd81 	bl	b4028 <__aeabi_dsub>
   b7526:	4b14      	ldr	r3, [pc, #80]	; (b7578 <_Z4dtoadhPc+0xbc>)
   b7528:	2200      	movs	r2, #0
   b752a:	f7fd f9bb 	bl	b48a4 <__aeabi_dcmpge>
   b752e:	b110      	cbz	r0, b7536 <_Z4dtoadhPc+0x7a>
        fixed++;
   b7530:	3501      	adds	r5, #1
   b7532:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b7536:	464a      	mov	r2, r9
   b7538:	4628      	mov	r0, r5
   b753a:	17d3      	asrs	r3, r2, #31
   b753c:	4659      	mov	r1, fp
   b753e:	f7fd fbd1 	bl	b4ce4 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b7542:	2301      	movs	r3, #1
   b7544:	4615      	mov	r5, r2
   b7546:	4621      	mov	r1, r4
   b7548:	220a      	movs	r2, #10
   b754a:	f000 fa44 	bl	b79d6 <ultoa>
    if (prec) {
   b754e:	f1b8 0f00 	cmp.w	r8, #0
   b7552:	d00e      	beq.n	b7572 <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b7554:	4620      	mov	r0, r4
   b7556:	f7fd fd65 	bl	b5024 <strlen>
        *sout++ = '.';
   b755a:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b755c:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b755e:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b7560:	220a      	movs	r2, #10
   b7562:	4643      	mov	r3, r8
   b7564:	3101      	adds	r1, #1
   b7566:	4628      	mov	r0, r5
    }
}
   b7568:	b001      	add	sp, #4
   b756a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b756e:	f000 ba32 	b.w	b79d6 <ultoa>
}
   b7572:	b001      	add	sp, #4
   b7574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7578:	3fe00000 	.word	0x3fe00000

000b757c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b757c:	b510      	push	{r4, lr}
   b757e:	4604      	mov	r4, r0
{
	free(buffer);
   b7580:	6800      	ldr	r0, [r0, #0]
   b7582:	f7ff f803 	bl	b658c <free>
}
   b7586:	4620      	mov	r0, r4
   b7588:	bd10      	pop	{r4, pc}

000b758a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b758a:	b510      	push	{r4, lr}
   b758c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b758e:	6800      	ldr	r0, [r0, #0]
   b7590:	b108      	cbz	r0, b7596 <_ZN6String10invalidateEv+0xc>
   b7592:	f7fe fffb 	bl	b658c <free>
	buffer = NULL;
   b7596:	2300      	movs	r3, #0
	capacity = len = 0;
   b7598:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b759c:	6023      	str	r3, [r4, #0]
}
   b759e:	bd10      	pop	{r4, pc}

000b75a0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b75a0:	b538      	push	{r3, r4, r5, lr}
   b75a2:	4604      	mov	r4, r0
   b75a4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b75a6:	6800      	ldr	r0, [r0, #0]
   b75a8:	3101      	adds	r1, #1
   b75aa:	f7fe fff7 	bl	b659c <realloc>
	if (newbuffer) {
   b75ae:	b110      	cbz	r0, b75b6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b75b0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b75b4:	2001      	movs	r0, #1
	}
	return 0;
}
   b75b6:	bd38      	pop	{r3, r4, r5, pc}

000b75b8 <_ZN6String7reserveEj>:
{
   b75b8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b75ba:	6803      	ldr	r3, [r0, #0]
{
   b75bc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b75be:	b123      	cbz	r3, b75ca <_ZN6String7reserveEj+0x12>
   b75c0:	6843      	ldr	r3, [r0, #4]
   b75c2:	428b      	cmp	r3, r1
   b75c4:	d301      	bcc.n	b75ca <_ZN6String7reserveEj+0x12>
   b75c6:	2001      	movs	r0, #1
}
   b75c8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b75ca:	4620      	mov	r0, r4
   b75cc:	f7ff ffe8 	bl	b75a0 <_ZN6String12changeBufferEj>
   b75d0:	2800      	cmp	r0, #0
   b75d2:	d0f9      	beq.n	b75c8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b75d4:	68a3      	ldr	r3, [r4, #8]
   b75d6:	2b00      	cmp	r3, #0
   b75d8:	d1f5      	bne.n	b75c6 <_ZN6String7reserveEj+0xe>
   b75da:	6822      	ldr	r2, [r4, #0]
   b75dc:	7013      	strb	r3, [r2, #0]
   b75de:	e7f2      	b.n	b75c6 <_ZN6String7reserveEj+0xe>

000b75e0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b75e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b75e2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b75e4:	4611      	mov	r1, r2
   b75e6:	9201      	str	r2, [sp, #4]
{
   b75e8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b75ea:	f7ff ffe5 	bl	b75b8 <_ZN6String7reserveEj>
   b75ee:	9a01      	ldr	r2, [sp, #4]
   b75f0:	b928      	cbnz	r0, b75fe <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b75f2:	4620      	mov	r0, r4
   b75f4:	f7ff ffc9 	bl	b758a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b75f8:	4620      	mov	r0, r4
   b75fa:	b003      	add	sp, #12
   b75fc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b75fe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7600:	4629      	mov	r1, r5
   b7602:	6820      	ldr	r0, [r4, #0]
   b7604:	f001 fc4c 	bl	b8ea0 <memcpy>
	buffer[len] = 0;
   b7608:	6822      	ldr	r2, [r4, #0]
   b760a:	68a3      	ldr	r3, [r4, #8]
   b760c:	2100      	movs	r1, #0
   b760e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7610:	e7f2      	b.n	b75f8 <_ZN6String4copyEPKcj+0x18>

000b7612 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7612:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7614:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7616:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b761a:	4604      	mov	r4, r0
	len = 0;
   b761c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b761e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7620:	b141      	cbz	r1, b7634 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7622:	4608      	mov	r0, r1
   b7624:	9101      	str	r1, [sp, #4]
   b7626:	f7fd fcfd 	bl	b5024 <strlen>
   b762a:	9901      	ldr	r1, [sp, #4]
   b762c:	4602      	mov	r2, r0
   b762e:	4620      	mov	r0, r4
   b7630:	f7ff ffd6 	bl	b75e0 <_ZN6String4copyEPKcj>
}
   b7634:	4620      	mov	r0, r4
   b7636:	b002      	add	sp, #8
   b7638:	bd10      	pop	{r4, pc}

000b763a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b763a:	4288      	cmp	r0, r1
{
   b763c:	b510      	push	{r4, lr}
   b763e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7640:	d005      	beq.n	b764e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7642:	680b      	ldr	r3, [r1, #0]
   b7644:	b12b      	cbz	r3, b7652 <_ZN6StringaSERKS_+0x18>
   b7646:	688a      	ldr	r2, [r1, #8]
   b7648:	4619      	mov	r1, r3
   b764a:	f7ff ffc9 	bl	b75e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b764e:	4620      	mov	r0, r4
   b7650:	bd10      	pop	{r4, pc}
	else invalidate();
   b7652:	f7ff ff9a 	bl	b758a <_ZN6String10invalidateEv>
   b7656:	e7fa      	b.n	b764e <_ZN6StringaSERKS_+0x14>

000b7658 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7658:	b510      	push	{r4, lr}
	buffer = NULL;
   b765a:	2300      	movs	r3, #0
String::String(const String &value)
   b765c:	4604      	mov	r4, r0
	capacity = 0;
   b765e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7662:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7664:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7666:	f7ff ffe8 	bl	b763a <_ZN6StringaSERKS_>
}
   b766a:	4620      	mov	r0, r4
   b766c:	bd10      	pop	{r4, pc}

000b766e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b766e:	b513      	push	{r0, r1, r4, lr}
   b7670:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7672:	b159      	cbz	r1, b768c <_ZN6StringaSEPKc+0x1e>
   b7674:	4608      	mov	r0, r1
   b7676:	9101      	str	r1, [sp, #4]
   b7678:	f7fd fcd4 	bl	b5024 <strlen>
   b767c:	9901      	ldr	r1, [sp, #4]
   b767e:	4602      	mov	r2, r0
   b7680:	4620      	mov	r0, r4
   b7682:	f7ff ffad 	bl	b75e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7686:	4620      	mov	r0, r4
   b7688:	b002      	add	sp, #8
   b768a:	bd10      	pop	{r4, pc}
	else invalidate();
   b768c:	f7ff ff7d 	bl	b758a <_ZN6String10invalidateEv>
   b7690:	e7f9      	b.n	b7686 <_ZN6StringaSEPKc+0x18>

000b7692 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b7692:	b510      	push	{r4, lr}
   b7694:	4604      	mov	r4, r0
   b7696:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7698:	2300      	movs	r3, #0
	capacity = 0;
   b769a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b769e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b76a0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b76a2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b76a4:	a901      	add	r1, sp, #4
   b76a6:	f000 f9bb 	bl	b7a20 <itoa>
	*this = buf;
   b76aa:	a901      	add	r1, sp, #4
   b76ac:	4620      	mov	r0, r4
   b76ae:	f7ff ffde 	bl	b766e <_ZN6StringaSEPKc>
}
   b76b2:	4620      	mov	r0, r4
   b76b4:	b00a      	add	sp, #40	; 0x28
   b76b6:	bd10      	pop	{r4, pc}

000b76b8 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   b76b8:	b530      	push	{r4, r5, lr}
   b76ba:	4604      	mov	r4, r0
	buffer = NULL;
   b76bc:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   b76be:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   b76c0:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b76c4:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b76c6:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   b76c8:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   b76cc:	b2cd      	uxtb	r5, r1
   b76ce:	f7fc fe0b 	bl	b42e8 <__aeabi_f2d>
   b76d2:	ec41 0b10 	vmov	d0, r0, r1
   b76d6:	a901      	add	r1, sp, #4
   b76d8:	4628      	mov	r0, r5
   b76da:	f7ff feef 	bl	b74bc <_Z4dtoadhPc>
        *this = buf;
   b76de:	a901      	add	r1, sp, #4
   b76e0:	4620      	mov	r0, r4
   b76e2:	f7ff ffc4 	bl	b766e <_ZN6StringaSEPKc>
}
   b76e6:	4620      	mov	r0, r4
   b76e8:	b00b      	add	sp, #44	; 0x2c
   b76ea:	bd30      	pop	{r4, r5, pc}

000b76ec <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b76ec:	b570      	push	{r4, r5, r6, lr}
   b76ee:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b76f0:	460e      	mov	r6, r1
   b76f2:	b909      	cbnz	r1, b76f8 <_ZN6String6concatEPKcj+0xc>
   b76f4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b76f6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b76f8:	b16a      	cbz	r2, b7716 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b76fa:	6884      	ldr	r4, [r0, #8]
   b76fc:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b76fe:	4621      	mov	r1, r4
   b7700:	f7ff ff5a 	bl	b75b8 <_ZN6String7reserveEj>
   b7704:	2800      	cmp	r0, #0
   b7706:	d0f5      	beq.n	b76f4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7708:	6828      	ldr	r0, [r5, #0]
   b770a:	68ab      	ldr	r3, [r5, #8]
   b770c:	4631      	mov	r1, r6
   b770e:	4418      	add	r0, r3
   b7710:	f001 fc0a 	bl	b8f28 <strcpy>
	len = newlen;
   b7714:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7716:	2001      	movs	r0, #1
   b7718:	e7ed      	b.n	b76f6 <_ZN6String6concatEPKcj+0xa>

000b771a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b771a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b771c:	688a      	ldr	r2, [r1, #8]
   b771e:	6809      	ldr	r1, [r1, #0]
{
   b7720:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7722:	f7ff ffe3 	bl	b76ec <_ZN6String6concatEPKcj>
   b7726:	b910      	cbnz	r0, b772e <_ZplRK15StringSumHelperRK6String+0x14>
   b7728:	4620      	mov	r0, r4
   b772a:	f7ff ff2e 	bl	b758a <_ZN6String10invalidateEv>
	return a;
}
   b772e:	4620      	mov	r0, r4
   b7730:	bd10      	pop	{r4, pc}

000b7732 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b7732:	b513      	push	{r0, r1, r4, lr}
   b7734:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7736:	b929      	cbnz	r1, b7744 <_ZplRK15StringSumHelperPKc+0x12>
   b7738:	4620      	mov	r0, r4
   b773a:	f7ff ff26 	bl	b758a <_ZN6String10invalidateEv>
	return a;
}
   b773e:	4620      	mov	r0, r4
   b7740:	b002      	add	sp, #8
   b7742:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7744:	4608      	mov	r0, r1
   b7746:	9101      	str	r1, [sp, #4]
   b7748:	f7fd fc6c 	bl	b5024 <strlen>
   b774c:	9901      	ldr	r1, [sp, #4]
   b774e:	4602      	mov	r2, r0
   b7750:	4620      	mov	r0, r4
   b7752:	f7ff ffcb 	bl	b76ec <_ZN6String6concatEPKcj>
   b7756:	2800      	cmp	r0, #0
   b7758:	d0ee      	beq.n	b7738 <_ZplRK15StringSumHelperPKc+0x6>
   b775a:	e7f0      	b.n	b773e <_ZplRK15StringSumHelperPKc+0xc>

000b775c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b775c:	4b05      	ldr	r3, [pc, #20]	; (b7774 <_GLOBAL__sub_I_System+0x18>)
   b775e:	2202      	movs	r2, #2
   b7760:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7762:	4b05      	ldr	r3, [pc, #20]	; (b7778 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7764:	4a05      	ldr	r2, [pc, #20]	; (b777c <_GLOBAL__sub_I_System+0x20>)
   b7766:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7768:	2000      	movs	r0, #0
   b776a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b776e:	f7fe be59 	b.w	b6424 <set_system_mode>
   b7772:	bf00      	nop
   b7774:	2003e6f8 	.word	0x2003e6f8
   b7778:	2003e6ec 	.word	0x2003e6ec
   b777c:	ffff0000 	.word	0xffff0000

000b7780 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7780:	4b02      	ldr	r3, [pc, #8]	; (b778c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7782:	681a      	ldr	r2, [r3, #0]
   b7784:	4b02      	ldr	r3, [pc, #8]	; (b7790 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7786:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7788:	4770      	bx	lr
   b778a:	bf00      	nop
   b778c:	2003e598 	.word	0x2003e598
   b7790:	2003e6fc 	.word	0x2003e6fc

000b7794 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7794:	4770      	bx	lr

000b7796 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7796:	7441      	strb	r1, [r0, #17]
}
   b7798:	4770      	bx	lr

000b779a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b779a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b779c:	7c00      	ldrb	r0, [r0, #16]
   b779e:	f7fe fe01 	bl	b63a4 <hal_usart_available_data_for_write>
}
   b77a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b77a6:	bd08      	pop	{r3, pc}

000b77a8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b77a8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b77aa:	7c00      	ldrb	r0, [r0, #16]
   b77ac:	f7fe fdd2 	bl	b6354 <hal_usart_available>
}
   b77b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b77b4:	bd08      	pop	{r3, pc}

000b77b6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b77b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b77b8:	7c00      	ldrb	r0, [r0, #16]
   b77ba:	f7fe fddb 	bl	b6374 <hal_usart_peek>
}
   b77be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b77c2:	bd08      	pop	{r3, pc}

000b77c4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b77c4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b77c6:	7c00      	ldrb	r0, [r0, #16]
   b77c8:	f7fe fdcc 	bl	b6364 <hal_usart_read>
}
   b77cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b77d0:	bd08      	pop	{r3, pc}

000b77d2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b77d2:	7c00      	ldrb	r0, [r0, #16]
   b77d4:	f7fe bdd6 	b.w	b6384 <hal_usart_flush>

000b77d8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b77d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b77da:	7c45      	ldrb	r5, [r0, #17]
{
   b77dc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b77de:	b12d      	cbz	r5, b77ec <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b77e0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b77e2:	b003      	add	sp, #12
   b77e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b77e8:	f7fe bdac 	b.w	b6344 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b77ec:	7c00      	ldrb	r0, [r0, #16]
   b77ee:	9101      	str	r1, [sp, #4]
   b77f0:	f7fe fdd8 	bl	b63a4 <hal_usart_available_data_for_write>
   b77f4:	2800      	cmp	r0, #0
   b77f6:	9901      	ldr	r1, [sp, #4]
   b77f8:	dcf2      	bgt.n	b77e0 <_ZN11USARTSerial5writeEh+0x8>
}
   b77fa:	4628      	mov	r0, r5
   b77fc:	b003      	add	sp, #12
   b77fe:	bd30      	pop	{r4, r5, pc}

000b7800 <_ZN11USARTSerialD0Ev>:
   b7800:	b510      	push	{r4, lr}
   b7802:	2114      	movs	r1, #20
   b7804:	4604      	mov	r4, r0
   b7806:	f7fd fc54 	bl	b50b2 <_ZdlPvj>
   b780a:	4620      	mov	r0, r4
   b780c:	bd10      	pop	{r4, pc}
	...

000b7810 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7810:	b510      	push	{r4, lr}
   b7812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7816:	4604      	mov	r4, r0
   b7818:	4608      	mov	r0, r1
   b781a:	4611      	mov	r1, r2
   b781c:	2200      	movs	r2, #0
   b781e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7822:	4b04      	ldr	r3, [pc, #16]	; (b7834 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7824:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7826:	2301      	movs	r3, #1
  _serial = serial;
   b7828:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b782a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b782c:	f7fe fdc2 	bl	b63b4 <hal_usart_init_ex>
}
   b7830:	4620      	mov	r0, r4
   b7832:	bd10      	pop	{r4, pc}
   b7834:	000ba158 	.word	0x000ba158

000b7838 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7838:	7441      	strb	r1, [r0, #17]
}
   b783a:	4770      	bx	lr

000b783c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b783c:	4770      	bx	lr

000b783e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b783e:	4770      	bx	lr

000b7840 <_ZN9USBSerial4readEv>:
{
   b7840:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7842:	2100      	movs	r1, #0
   b7844:	7c00      	ldrb	r0, [r0, #16]
   b7846:	f7fe fdd5 	bl	b63f4 <HAL_USB_USART_Receive_Data>
}
   b784a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b784e:	bd08      	pop	{r3, pc}

000b7850 <_ZN9USBSerial4peekEv>:
{
   b7850:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7852:	2101      	movs	r1, #1
   b7854:	7c00      	ldrb	r0, [r0, #16]
   b7856:	f7fe fdcd 	bl	b63f4 <HAL_USB_USART_Receive_Data>
}
   b785a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b785e:	bd08      	pop	{r3, pc}

000b7860 <_ZN9USBSerial17availableForWriteEv>:
{
   b7860:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7862:	7c00      	ldrb	r0, [r0, #16]
   b7864:	f7fe fdbe 	bl	b63e4 <HAL_USB_USART_Available_Data_For_Write>
}
   b7868:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b786c:	bd08      	pop	{r3, pc}

000b786e <_ZN9USBSerial9availableEv>:
{
   b786e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7870:	7c00      	ldrb	r0, [r0, #16]
   b7872:	f7fe fdaf 	bl	b63d4 <HAL_USB_USART_Available_Data>
}
   b7876:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b787a:	bd08      	pop	{r3, pc}

000b787c <_ZN9USBSerial5writeEh>:
{
   b787c:	b513      	push	{r0, r1, r4, lr}
   b787e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7880:	7c00      	ldrb	r0, [r0, #16]
{
   b7882:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7884:	f7fe fdae 	bl	b63e4 <HAL_USB_USART_Available_Data_For_Write>
   b7888:	2800      	cmp	r0, #0
   b788a:	9901      	ldr	r1, [sp, #4]
   b788c:	dc01      	bgt.n	b7892 <_ZN9USBSerial5writeEh+0x16>
   b788e:	7c60      	ldrb	r0, [r4, #17]
   b7890:	b120      	cbz	r0, b789c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7892:	7c20      	ldrb	r0, [r4, #16]
   b7894:	f7fe fdb6 	bl	b6404 <HAL_USB_USART_Send_Data>
   b7898:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b789c:	b002      	add	sp, #8
   b789e:	bd10      	pop	{r4, pc}

000b78a0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b78a0:	7c00      	ldrb	r0, [r0, #16]
   b78a2:	f7fe bdb7 	b.w	b6414 <HAL_USB_USART_Flush_Data>

000b78a6 <_ZN9USBSerialD0Ev>:
   b78a6:	b510      	push	{r4, lr}
   b78a8:	2114      	movs	r1, #20
   b78aa:	4604      	mov	r4, r0
   b78ac:	f7fd fc01 	bl	b50b2 <_ZdlPvj>
   b78b0:	4620      	mov	r0, r4
   b78b2:	bd10      	pop	{r4, pc}

000b78b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b78b4:	b510      	push	{r4, lr}
   b78b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b78ba:	4604      	mov	r4, r0
   b78bc:	4608      	mov	r0, r1
   b78be:	2100      	movs	r1, #0
   b78c0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b78c4:	4b04      	ldr	r3, [pc, #16]	; (b78d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b78c6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b78c8:	2301      	movs	r3, #1
  _serial = serial;
   b78ca:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b78cc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b78ce:	4611      	mov	r1, r2
   b78d0:	f7fe fd78 	bl	b63c4 <HAL_USB_USART_Init>
}
   b78d4:	4620      	mov	r0, r4
   b78d6:	bd10      	pop	{r4, pc}
   b78d8:	000ba188 	.word	0x000ba188

000b78dc <_Z19acquireSerialBufferv>:
{
   b78dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b78de:	2214      	movs	r2, #20
{
   b78e0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b78e2:	2100      	movs	r1, #0
   b78e4:	f001 faea 	bl	b8ebc <memset>
}
   b78e8:	4620      	mov	r0, r4
   b78ea:	bd10      	pop	{r4, pc}

000b78ec <_Z16_fetch_usbserialv>:
{
   b78ec:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b78ee:	4c0f      	ldr	r4, [pc, #60]	; (b792c <_Z16_fetch_usbserialv+0x40>)
{
   b78f0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b78f2:	a803      	add	r0, sp, #12
   b78f4:	f7ff fff2 	bl	b78dc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b78f8:	7821      	ldrb	r1, [r4, #0]
   b78fa:	f3bf 8f5b 	dmb	ish
   b78fe:	f011 0101 	ands.w	r1, r1, #1
   b7902:	d10f      	bne.n	b7924 <_Z16_fetch_usbserialv+0x38>
   b7904:	4620      	mov	r0, r4
   b7906:	9101      	str	r1, [sp, #4]
   b7908:	f7fd fbd5 	bl	b50b6 <__cxa_guard_acquire>
   b790c:	9901      	ldr	r1, [sp, #4]
   b790e:	b148      	cbz	r0, b7924 <_Z16_fetch_usbserialv+0x38>
   b7910:	aa03      	add	r2, sp, #12
   b7912:	4807      	ldr	r0, [pc, #28]	; (b7930 <_Z16_fetch_usbserialv+0x44>)
   b7914:	f7ff ffce 	bl	b78b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7918:	4620      	mov	r0, r4
   b791a:	f7fd fbd1 	bl	b50c0 <__cxa_guard_release>
   b791e:	4805      	ldr	r0, [pc, #20]	; (b7934 <_Z16_fetch_usbserialv+0x48>)
   b7920:	f001 fab8 	bl	b8e94 <atexit>
	return _usbserial;
}
   b7924:	4802      	ldr	r0, [pc, #8]	; (b7930 <_Z16_fetch_usbserialv+0x44>)
   b7926:	b008      	add	sp, #32
   b7928:	bd10      	pop	{r4, pc}
   b792a:	bf00      	nop
   b792c:	2003e700 	.word	0x2003e700
   b7930:	2003e704 	.word	0x2003e704
   b7934:	000b783d 	.word	0x000b783d

000b7938 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7938:	2200      	movs	r2, #0
   b793a:	6840      	ldr	r0, [r0, #4]
   b793c:	4611      	mov	r1, r2
   b793e:	f7fe bdd5 	b.w	b64ec <network_ready>

000b7942 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7942:	2200      	movs	r2, #0
   b7944:	6840      	ldr	r0, [r0, #4]
   b7946:	4611      	mov	r1, r2
   b7948:	f7fe bdf0 	b.w	b652c <network_listening>

000b794c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b794c:	2200      	movs	r2, #0
   b794e:	6840      	ldr	r0, [r0, #4]
   b7950:	4611      	mov	r1, r2
   b7952:	f7fe bdfb 	b.w	b654c <network_get_listen_timeout>

000b7956 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7956:	6840      	ldr	r0, [r0, #4]
   b7958:	2200      	movs	r2, #0
   b795a:	f7fe bdef 	b.w	b653c <network_set_listen_timeout>

000b795e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b795e:	6840      	ldr	r0, [r0, #4]
   b7960:	2200      	movs	r2, #0
   b7962:	f081 0101 	eor.w	r1, r1, #1
   b7966:	f7fe bdd9 	b.w	b651c <network_listen>

000b796a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b796a:	2300      	movs	r3, #0
   b796c:	6840      	ldr	r0, [r0, #4]
   b796e:	461a      	mov	r2, r3
   b7970:	4619      	mov	r1, r3
   b7972:	f7fe bdcb 	b.w	b650c <network_off>

000b7976 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7976:	2300      	movs	r3, #0
   b7978:	6840      	ldr	r0, [r0, #4]
   b797a:	461a      	mov	r2, r3
   b797c:	4619      	mov	r1, r3
   b797e:	f7fe bdbd 	b.w	b64fc <network_on>

000b7982 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7982:	2200      	movs	r2, #0
   b7984:	6840      	ldr	r0, [r0, #4]
   b7986:	4611      	mov	r1, r2
   b7988:	f7fe bda0 	b.w	b64cc <network_connecting>

000b798c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b798c:	6840      	ldr	r0, [r0, #4]
   b798e:	2200      	movs	r2, #0
   b7990:	2102      	movs	r1, #2
   b7992:	f7fe bda3 	b.w	b64dc <network_disconnect>

000b7996 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7996:	2300      	movs	r3, #0
   b7998:	6840      	ldr	r0, [r0, #4]
   b799a:	461a      	mov	r2, r3
   b799c:	f7fe bd8e 	b.w	b64bc <network_connect>

000b79a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b79a0:	4b02      	ldr	r3, [pc, #8]	; (b79ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b79a2:	2204      	movs	r2, #4
   b79a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b79a6:	4a02      	ldr	r2, [pc, #8]	; (b79b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b79a8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b79aa:	4770      	bx	lr
   b79ac:	2003e718 	.word	0x2003e718
   b79b0:	000ba1b8 	.word	0x000ba1b8

000b79b4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b79b4:	b510      	push	{r4, lr}
   b79b6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b79b8:	f7fd fb34 	bl	b5024 <strlen>
   b79bc:	3801      	subs	r0, #1
   b79be:	1823      	adds	r3, r4, r0
   b79c0:	4620      	mov	r0, r4
	while(i<j){
   b79c2:	4283      	cmp	r3, r0
   b79c4:	d906      	bls.n	b79d4 <_Z11str_reversePc+0x20>
		c = *i;
   b79c6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b79c8:	7819      	ldrb	r1, [r3, #0]
   b79ca:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b79ce:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b79d2:	e7f6      	b.n	b79c2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b79d4:	bd10      	pop	{r4, pc}

000b79d6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b79d6:	b570      	push	{r4, r5, r6, lr}
   b79d8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b79da:	1e91      	subs	r1, r2, #2
   b79dc:	2922      	cmp	r1, #34	; 0x22
   b79de:	d81d      	bhi.n	b7a1c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b79e0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b79e2:	b930      	cbnz	r0, b79f2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b79e4:	4423      	add	r3, r4
            *ptr++ = '0';
   b79e6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b79e8:	429d      	cmp	r5, r3
   b79ea:	d210      	bcs.n	b7a0e <ultoa+0x38>
            *ptr++ = '0';
   b79ec:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b79f0:	e7fa      	b.n	b79e8 <ultoa+0x12>
            result.quot = a/radix;
   b79f2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b79f6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b79fa:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b79fc:	2809      	cmp	r0, #9
                *ptr += '0';
   b79fe:	bf94      	ite	ls
   b7a00:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7a02:	3157      	addhi	r1, #87	; 0x57
   b7a04:	b2c9      	uxtb	r1, r1
   b7a06:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7a0a:	4630      	mov	r0, r6
	while(a){
   b7a0c:	e7e9      	b.n	b79e2 <ultoa+0xc>

	*ptr = '\0';
   b7a0e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7a10:	4620      	mov	r0, r4
	*ptr = '\0';
   b7a12:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7a14:	f7ff ffce 	bl	b79b4 <_Z11str_reversePc>
	return buffer;
   b7a18:	4620      	mov	r0, r4
}
   b7a1a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7a1c:	2000      	movs	r0, #0
   b7a1e:	e7fc      	b.n	b7a1a <ultoa+0x44>

000b7a20 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7a20:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7a22:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7a24:	460c      	mov	r4, r1
   b7a26:	4615      	mov	r5, r2
	if(a<0){
   b7a28:	da0e      	bge.n	b7a48 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7a2e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7a32:	bf14      	ite	ne
   b7a34:	4258      	negne	r0, r3
   b7a36:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7a38:	2301      	movs	r3, #1
		*buffer = '-';
   b7a3a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7a3c:	462a      	mov	r2, r5
   b7a3e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7a40:	f7ff ffc9 	bl	b79d6 <ultoa>
	}
	return buffer;
}
   b7a44:	4620      	mov	r0, r4
   b7a46:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7a48:	2301      	movs	r3, #1
   b7a4a:	e7f9      	b.n	b7a40 <itoa+0x20>

000b7a4c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7a4c:	4b01      	ldr	r3, [pc, #4]	; (b7a54 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7a4e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7a50:	4770      	bx	lr
   b7a52:	bf00      	nop
   b7a54:	2003e5a0 	.word	0x2003e5a0

000b7a58 <serialEventRun>:
{
   b7a58:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7a5a:	4b0b      	ldr	r3, [pc, #44]	; (b7a88 <serialEventRun+0x30>)
   b7a5c:	b143      	cbz	r3, b7a70 <serialEventRun+0x18>
   b7a5e:	f7ff ff45 	bl	b78ec <_Z16_fetch_usbserialv>
   b7a62:	6803      	ldr	r3, [r0, #0]
   b7a64:	691b      	ldr	r3, [r3, #16]
   b7a66:	4798      	blx	r3
   b7a68:	2800      	cmp	r0, #0
   b7a6a:	dd01      	ble.n	b7a70 <serialEventRun+0x18>
        serialEvent();
   b7a6c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7a70:	4b06      	ldr	r3, [pc, #24]	; (b7a8c <serialEventRun+0x34>)
   b7a72:	b143      	cbz	r3, b7a86 <serialEventRun+0x2e>
   b7a74:	f000 f95c 	bl	b7d30 <_Z22__fetch_global_Serial1v>
   b7a78:	6803      	ldr	r3, [r0, #0]
   b7a7a:	691b      	ldr	r3, [r3, #16]
   b7a7c:	4798      	blx	r3
   b7a7e:	2800      	cmp	r0, #0
   b7a80:	dd01      	ble.n	b7a86 <serialEventRun+0x2e>
        serialEvent1();
   b7a82:	f3af 8000 	nop.w
}
   b7a86:	bd08      	pop	{r3, pc}
	...

000b7a90 <_post_loop>:
{
   b7a90:	b508      	push	{r3, lr}
	serialEventRun();
   b7a92:	f7ff ffe1 	bl	b7a58 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7a96:	f7fe fb5d 	bl	b6154 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7a9a:	4b01      	ldr	r3, [pc, #4]	; (b7aa0 <_post_loop+0x10>)
   b7a9c:	6018      	str	r0, [r3, #0]
}
   b7a9e:	bd08      	pop	{r3, pc}
   b7aa0:	2003e728 	.word	0x2003e728

000b7aa4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7aa4:	4805      	ldr	r0, [pc, #20]	; (b7abc <_Z33system_initialize_user_backup_ramv+0x18>)
   b7aa6:	4a06      	ldr	r2, [pc, #24]	; (b7ac0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7aa8:	4906      	ldr	r1, [pc, #24]	; (b7ac4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7aaa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7aac:	1a12      	subs	r2, r2, r0
   b7aae:	f001 f9f7 	bl	b8ea0 <memcpy>
    __backup_sram_signature = signature;
   b7ab2:	4b05      	ldr	r3, [pc, #20]	; (b7ac8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7ab4:	4a05      	ldr	r2, [pc, #20]	; (b7acc <_Z33system_initialize_user_backup_ramv+0x28>)
   b7ab6:	601a      	str	r2, [r3, #0]
}
   b7ab8:	bd08      	pop	{r3, pc}
   b7aba:	bf00      	nop
   b7abc:	2003f400 	.word	0x2003f400
   b7ac0:	2003f404 	.word	0x2003f404
   b7ac4:	000ba4d0 	.word	0x000ba4d0
   b7ac8:	2003f400 	.word	0x2003f400
   b7acc:	9a271c1e 	.word	0x9a271c1e

000b7ad0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7ad0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7ad2:	2300      	movs	r3, #0
   b7ad4:	9300      	str	r3, [sp, #0]
   b7ad6:	461a      	mov	r2, r3
   b7ad8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7adc:	f7fe fccc 	bl	b6478 <system_ctrl_set_result>
}
   b7ae0:	b003      	add	sp, #12
   b7ae2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7ae8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7ae8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7aea:	8843      	ldrh	r3, [r0, #2]
   b7aec:	2b0a      	cmp	r3, #10
   b7aee:	d008      	beq.n	b7b02 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7af0:	2b50      	cmp	r3, #80	; 0x50
   b7af2:	d10b      	bne.n	b7b0c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7af4:	4b09      	ldr	r3, [pc, #36]	; (b7b1c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7af6:	681b      	ldr	r3, [r3, #0]
   b7af8:	b14b      	cbz	r3, b7b0e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7afa:	b003      	add	sp, #12
   b7afc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7b00:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7b02:	f7ff ffe5 	bl	b7ad0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7b06:	b003      	add	sp, #12
   b7b08:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7b0c:	2300      	movs	r3, #0
   b7b0e:	9300      	str	r3, [sp, #0]
   b7b10:	461a      	mov	r2, r3
   b7b12:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7b16:	f7fe fcaf 	bl	b6478 <system_ctrl_set_result>
}
   b7b1a:	e7f4      	b.n	b7b06 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7b1c:	2003e724 	.word	0x2003e724

000b7b20 <module_user_init_hook>:
{
   b7b20:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7b22:	4812      	ldr	r0, [pc, #72]	; (b7b6c <module_user_init_hook+0x4c>)
   b7b24:	2100      	movs	r1, #0
   b7b26:	f7fe fd69 	bl	b65fc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7b2a:	4b11      	ldr	r3, [pc, #68]	; (b7b70 <module_user_init_hook+0x50>)
   b7b2c:	681a      	ldr	r2, [r3, #0]
   b7b2e:	4b11      	ldr	r3, [pc, #68]	; (b7b74 <module_user_init_hook+0x54>)
   b7b30:	429a      	cmp	r2, r3
   b7b32:	4b11      	ldr	r3, [pc, #68]	; (b7b78 <module_user_init_hook+0x58>)
   b7b34:	bf0c      	ite	eq
   b7b36:	2201      	moveq	r2, #1
   b7b38:	2200      	movne	r2, #0
   b7b3a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7b3c:	d001      	beq.n	b7b42 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7b3e:	f7ff ffb1 	bl	b7aa4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7b42:	f7fe faff 	bl	b6144 <HAL_RNG_GetRandomNumber>
   b7b46:	4604      	mov	r4, r0
    srand(seed);
   b7b48:	f001 f9c0 	bl	b8ecc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7b4c:	4b0b      	ldr	r3, [pc, #44]	; (b7b7c <module_user_init_hook+0x5c>)
   b7b4e:	b113      	cbz	r3, b7b56 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7b50:	4620      	mov	r0, r4
   b7b52:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7b56:	2100      	movs	r1, #0
   b7b58:	4808      	ldr	r0, [pc, #32]	; (b7b7c <module_user_init_hook+0x5c>)
   b7b5a:	f7fe fca7 	bl	b64ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7b62:	4807      	ldr	r0, [pc, #28]	; (b7b80 <module_user_init_hook+0x60>)
   b7b64:	2100      	movs	r1, #0
   b7b66:	f7fe bc7d 	b.w	b6464 <system_ctrl_set_app_request_handler>
   b7b6a:	bf00      	nop
   b7b6c:	000b7a4d 	.word	0x000b7a4d
   b7b70:	2003f400 	.word	0x2003f400
   b7b74:	9a271c1e 	.word	0x9a271c1e
   b7b78:	2003e720 	.word	0x2003e720
   b7b7c:	00000000 	.word	0x00000000
   b7b80:	000b7ae9 	.word	0x000b7ae9

000b7b84 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7b84:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7b86:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7b88:	d902      	bls.n	b7b90 <pinAvailable+0xc>
    return false;
   b7b8a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7b8c:	b002      	add	sp, #8
   b7b8e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7b90:	f1a0 030b 	sub.w	r3, r0, #11
   b7b94:	2b02      	cmp	r3, #2
   b7b96:	d81a      	bhi.n	b7bce <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7b98:	4c17      	ldr	r4, [pc, #92]	; (b7bf8 <pinAvailable+0x74>)
   b7b9a:	7821      	ldrb	r1, [r4, #0]
   b7b9c:	f3bf 8f5b 	dmb	ish
   b7ba0:	f011 0101 	ands.w	r1, r1, #1
   b7ba4:	d10b      	bne.n	b7bbe <pinAvailable+0x3a>
   b7ba6:	4620      	mov	r0, r4
   b7ba8:	9101      	str	r1, [sp, #4]
   b7baa:	f7fd fa84 	bl	b50b6 <__cxa_guard_acquire>
   b7bae:	9901      	ldr	r1, [sp, #4]
   b7bb0:	b128      	cbz	r0, b7bbe <pinAvailable+0x3a>
   b7bb2:	4812      	ldr	r0, [pc, #72]	; (b7bfc <pinAvailable+0x78>)
   b7bb4:	f7ff fb56 	bl	b7264 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7bb8:	4620      	mov	r0, r4
   b7bba:	f7fd fa81 	bl	b50c0 <__cxa_guard_release>
   b7bbe:	4b0f      	ldr	r3, [pc, #60]	; (b7bfc <pinAvailable+0x78>)
   b7bc0:	7818      	ldrb	r0, [r3, #0]
   b7bc2:	f7fe fb97 	bl	b62f4 <hal_spi_is_enabled>
   b7bc6:	2800      	cmp	r0, #0
   b7bc8:	d1df      	bne.n	b7b8a <pinAvailable+0x6>
  return true; // 'pin' is available
   b7bca:	2001      	movs	r0, #1
   b7bcc:	e7de      	b.n	b7b8c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7bce:	2801      	cmp	r0, #1
   b7bd0:	d809      	bhi.n	b7be6 <pinAvailable+0x62>
   b7bd2:	f000 f86d 	bl	b7cb0 <_Z19__fetch_global_Wirev>
   b7bd6:	2100      	movs	r1, #0
   b7bd8:	7c00      	ldrb	r0, [r0, #16]
   b7bda:	f7fe fb2b 	bl	b6234 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7bde:	f080 0001 	eor.w	r0, r0, #1
   b7be2:	b2c0      	uxtb	r0, r0
   b7be4:	e7d2      	b.n	b7b8c <pinAvailable+0x8>
   b7be6:	3809      	subs	r0, #9
   b7be8:	2801      	cmp	r0, #1
   b7bea:	d8ee      	bhi.n	b7bca <pinAvailable+0x46>
   b7bec:	f000 f8a0 	bl	b7d30 <_Z22__fetch_global_Serial1v>
   b7bf0:	7c00      	ldrb	r0, [r0, #16]
   b7bf2:	f7fe fbcf 	bl	b6394 <hal_usart_is_enabled>
   b7bf6:	e7f2      	b.n	b7bde <pinAvailable+0x5a>
   b7bf8:	2003e6a8 	.word	0x2003e6a8
   b7bfc:	2003e6ac 	.word	0x2003e6ac

000b7c00 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7c00:	2823      	cmp	r0, #35	; 0x23
{
   b7c02:	b538      	push	{r3, r4, r5, lr}
   b7c04:	4604      	mov	r4, r0
   b7c06:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7c08:	d80a      	bhi.n	b7c20 <pinMode+0x20>
   b7c0a:	29ff      	cmp	r1, #255	; 0xff
   b7c0c:	d008      	beq.n	b7c20 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7c0e:	f7ff ffb9 	bl	b7b84 <pinAvailable>
   b7c12:	b128      	cbz	r0, b7c20 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7c14:	4629      	mov	r1, r5
   b7c16:	4620      	mov	r0, r4
}
   b7c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7c1c:	f7fe baaa 	b.w	b6174 <hal_gpio_mode>
}
   b7c20:	bd38      	pop	{r3, r4, r5, pc}

000b7c22 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b7c22:	b538      	push	{r3, r4, r5, lr}
   b7c24:	4604      	mov	r4, r0
   b7c26:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b7c28:	f7fe faac 	bl	b6184 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7c2c:	28ff      	cmp	r0, #255	; 0xff
   b7c2e:	d010      	beq.n	b7c52 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7c30:	2806      	cmp	r0, #6
   b7c32:	d804      	bhi.n	b7c3e <digitalWrite+0x1c>
   b7c34:	234d      	movs	r3, #77	; 0x4d
   b7c36:	fa23 f000 	lsr.w	r0, r3, r0
   b7c3a:	07c3      	lsls	r3, r0, #31
   b7c3c:	d409      	bmi.n	b7c52 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7c3e:	4620      	mov	r0, r4
   b7c40:	f7ff ffa0 	bl	b7b84 <pinAvailable>
   b7c44:	b128      	cbz	r0, b7c52 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b7c46:	4629      	mov	r1, r5
   b7c48:	4620      	mov	r0, r4
}
   b7c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b7c4e:	f7fe baa1 	b.w	b6194 <hal_gpio_write>
}
   b7c52:	bd38      	pop	{r3, r4, r5, pc}

000b7c54 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7c54:	280d      	cmp	r0, #13
{
   b7c56:	b510      	push	{r4, lr}
   b7c58:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7c5a:	bf9c      	itt	ls
   b7c5c:	340e      	addls	r4, #14
   b7c5e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b7c60:	4620      	mov	r0, r4
   b7c62:	f7ff ff8f 	bl	b7b84 <pinAvailable>
   b7c66:	b150      	cbz	r0, b7c7e <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b7c68:	2103      	movs	r1, #3
   b7c6a:	4620      	mov	r0, r4
   b7c6c:	f7fe fa7a 	bl	b6164 <hal_pin_validate_function>
   b7c70:	2803      	cmp	r0, #3
   b7c72:	d104      	bne.n	b7c7e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7c74:	4620      	mov	r0, r4
}
   b7c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7c7a:	f7fe ba93 	b.w	b61a4 <hal_adc_read>
}
   b7c7e:	2000      	movs	r0, #0
   b7c80:	bd10      	pop	{r4, pc}

000b7c82 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7c82:	4770      	bx	lr

000b7c84 <_Z17acquireWireBufferv>:
{
   b7c84:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7c86:	2520      	movs	r5, #32
   b7c88:	2314      	movs	r3, #20
{
   b7c8a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7c8c:	6003      	str	r3, [r0, #0]
   b7c8e:	6085      	str	r5, [r0, #8]
   b7c90:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7c92:	4906      	ldr	r1, [pc, #24]	; (b7cac <_Z17acquireWireBufferv+0x28>)
   b7c94:	4628      	mov	r0, r5
   b7c96:	f000 f86f 	bl	b7d78 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7c9a:	4904      	ldr	r1, [pc, #16]	; (b7cac <_Z17acquireWireBufferv+0x28>)
	};
   b7c9c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7c9e:	4628      	mov	r0, r5
   b7ca0:	f000 f86a 	bl	b7d78 <_ZnajRKSt9nothrow_t>
	};
   b7ca4:	60e0      	str	r0, [r4, #12]
}
   b7ca6:	4620      	mov	r0, r4
   b7ca8:	bd38      	pop	{r3, r4, r5, pc}
   b7caa:	bf00      	nop
   b7cac:	000ba1ec 	.word	0x000ba1ec

000b7cb0 <_Z19__fetch_global_Wirev>:
{
   b7cb0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7cb2:	4d0e      	ldr	r5, [pc, #56]	; (b7cec <_Z19__fetch_global_Wirev+0x3c>)
   b7cb4:	7829      	ldrb	r1, [r5, #0]
   b7cb6:	f3bf 8f5b 	dmb	ish
   b7cba:	f011 0401 	ands.w	r4, r1, #1
{
   b7cbe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7cc0:	d111      	bne.n	b7ce6 <_Z19__fetch_global_Wirev+0x36>
   b7cc2:	4628      	mov	r0, r5
   b7cc4:	f7fd f9f7 	bl	b50b6 <__cxa_guard_acquire>
   b7cc8:	b168      	cbz	r0, b7ce6 <_Z19__fetch_global_Wirev+0x36>
   b7cca:	a801      	add	r0, sp, #4
   b7ccc:	f7ff ffda 	bl	b7c84 <_Z17acquireWireBufferv>
   b7cd0:	aa01      	add	r2, sp, #4
   b7cd2:	4621      	mov	r1, r4
   b7cd4:	4806      	ldr	r0, [pc, #24]	; (b7cf0 <_Z19__fetch_global_Wirev+0x40>)
   b7cd6:	f7fe ffd5 	bl	b6c84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7cda:	4628      	mov	r0, r5
   b7cdc:	f7fd f9f0 	bl	b50c0 <__cxa_guard_release>
   b7ce0:	4804      	ldr	r0, [pc, #16]	; (b7cf4 <_Z19__fetch_global_Wirev+0x44>)
   b7ce2:	f001 f8d7 	bl	b8e94 <atexit>
	return wire;
}
   b7ce6:	4802      	ldr	r0, [pc, #8]	; (b7cf0 <_Z19__fetch_global_Wirev+0x40>)
   b7ce8:	b007      	add	sp, #28
   b7cea:	bd30      	pop	{r4, r5, pc}
   b7cec:	2003e72c 	.word	0x2003e72c
   b7cf0:	2003e730 	.word	0x2003e730
   b7cf4:	000b7c83 	.word	0x000b7c83

000b7cf8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7cf8:	4770      	bx	lr
	...

000b7cfc <_Z20acquireSerial1Bufferv>:
{
   b7cfc:	b538      	push	{r3, r4, r5, lr}
   b7cfe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7d00:	2514      	movs	r5, #20
   b7d02:	462a      	mov	r2, r5
   b7d04:	2100      	movs	r1, #0
   b7d06:	f001 f8d9 	bl	b8ebc <memset>
   b7d0a:	8025      	strh	r5, [r4, #0]
   b7d0c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d0e:	4907      	ldr	r1, [pc, #28]	; (b7d2c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7d10:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d12:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7d14:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d16:	f000 f82f 	bl	b7d78 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d1a:	4904      	ldr	r1, [pc, #16]	; (b7d2c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7d1c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7d1e:	4628      	mov	r0, r5
   b7d20:	f000 f82a 	bl	b7d78 <_ZnajRKSt9nothrow_t>
    };
   b7d24:	60e0      	str	r0, [r4, #12]
}
   b7d26:	4620      	mov	r0, r4
   b7d28:	bd38      	pop	{r3, r4, r5, pc}
   b7d2a:	bf00      	nop
   b7d2c:	000ba1ec 	.word	0x000ba1ec

000b7d30 <_Z22__fetch_global_Serial1v>:
{
   b7d30:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7d32:	4d0e      	ldr	r5, [pc, #56]	; (b7d6c <_Z22__fetch_global_Serial1v+0x3c>)
   b7d34:	7829      	ldrb	r1, [r5, #0]
   b7d36:	f3bf 8f5b 	dmb	ish
   b7d3a:	f011 0401 	ands.w	r4, r1, #1
{
   b7d3e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7d40:	d111      	bne.n	b7d66 <_Z22__fetch_global_Serial1v+0x36>
   b7d42:	4628      	mov	r0, r5
   b7d44:	f7fd f9b7 	bl	b50b6 <__cxa_guard_acquire>
   b7d48:	b168      	cbz	r0, b7d66 <_Z22__fetch_global_Serial1v+0x36>
   b7d4a:	a801      	add	r0, sp, #4
   b7d4c:	f7ff ffd6 	bl	b7cfc <_Z20acquireSerial1Bufferv>
   b7d50:	aa01      	add	r2, sp, #4
   b7d52:	4621      	mov	r1, r4
   b7d54:	4806      	ldr	r0, [pc, #24]	; (b7d70 <_Z22__fetch_global_Serial1v+0x40>)
   b7d56:	f7ff fd5b 	bl	b7810 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7d5a:	4628      	mov	r0, r5
   b7d5c:	f7fd f9b0 	bl	b50c0 <__cxa_guard_release>
   b7d60:	4804      	ldr	r0, [pc, #16]	; (b7d74 <_Z22__fetch_global_Serial1v+0x44>)
   b7d62:	f001 f897 	bl	b8e94 <atexit>
    return serial1;
}
   b7d66:	4802      	ldr	r0, [pc, #8]	; (b7d70 <_Z22__fetch_global_Serial1v+0x40>)
   b7d68:	b007      	add	sp, #28
   b7d6a:	bd30      	pop	{r4, r5, pc}
   b7d6c:	2003e744 	.word	0x2003e744
   b7d70:	2003e748 	.word	0x2003e748
   b7d74:	000b7cf9 	.word	0x000b7cf9

000b7d78 <_ZnajRKSt9nothrow_t>:
   b7d78:	f7fd b999 	b.w	b50ae <_Znaj>

000b7d7c <_ZSt25__throw_bad_function_callv>:
   b7d7c:	b508      	push	{r3, lr}
   b7d7e:	f7fe fc1d 	bl	b65bc <abort>
   b7d82:	0000      	movs	r0, r0
   b7d84:	0000      	movs	r0, r0
	...

000b7d88 <pow>:
   b7d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d8a:	ed2d 8b02 	vpush	{d8}
   b7d8e:	ec57 6b10 	vmov	r6, r7, d0
   b7d92:	ec55 4b11 	vmov	r4, r5, d1
   b7d96:	f000 f8cb 	bl	b7f30 <__ieee754_pow>
   b7d9a:	4b63      	ldr	r3, [pc, #396]	; (b7f28 <pow+0x1a0>)
   b7d9c:	eeb0 8a40 	vmov.f32	s16, s0
   b7da0:	eef0 8a60 	vmov.f32	s17, s1
   b7da4:	f993 3000 	ldrsb.w	r3, [r3]
   b7da8:	3301      	adds	r3, #1
   b7daa:	d02a      	beq.n	b7e02 <pow+0x7a>
   b7dac:	4622      	mov	r2, r4
   b7dae:	462b      	mov	r3, r5
   b7db0:	4620      	mov	r0, r4
   b7db2:	4629      	mov	r1, r5
   b7db4:	f7fc fd8a 	bl	b48cc <__aeabi_dcmpun>
   b7db8:	bb18      	cbnz	r0, b7e02 <pow+0x7a>
   b7dba:	4632      	mov	r2, r6
   b7dbc:	463b      	mov	r3, r7
   b7dbe:	4630      	mov	r0, r6
   b7dc0:	4639      	mov	r1, r7
   b7dc2:	f7fc fd83 	bl	b48cc <__aeabi_dcmpun>
   b7dc6:	2800      	cmp	r0, #0
   b7dc8:	d144      	bne.n	b7e54 <pow+0xcc>
   b7dca:	2200      	movs	r2, #0
   b7dcc:	2300      	movs	r3, #0
   b7dce:	4630      	mov	r0, r6
   b7dd0:	4639      	mov	r1, r7
   b7dd2:	f7fc fd49 	bl	b4868 <__aeabi_dcmpeq>
   b7dd6:	b1d8      	cbz	r0, b7e10 <pow+0x88>
   b7dd8:	2200      	movs	r2, #0
   b7dda:	2300      	movs	r3, #0
   b7ddc:	4620      	mov	r0, r4
   b7dde:	4629      	mov	r1, r5
   b7de0:	f7fc fd42 	bl	b4868 <__aeabi_dcmpeq>
   b7de4:	2800      	cmp	r0, #0
   b7de6:	d13d      	bne.n	b7e64 <pow+0xdc>
   b7de8:	ec45 4b10 	vmov	d0, r4, r5
   b7dec:	f000 ff10 	bl	b8c10 <finite>
   b7df0:	b138      	cbz	r0, b7e02 <pow+0x7a>
   b7df2:	4620      	mov	r0, r4
   b7df4:	4629      	mov	r1, r5
   b7df6:	2200      	movs	r2, #0
   b7df8:	2300      	movs	r3, #0
   b7dfa:	f7fc fd3f 	bl	b487c <__aeabi_dcmplt>
   b7dfe:	2800      	cmp	r0, #0
   b7e00:	d15c      	bne.n	b7ebc <pow+0x134>
   b7e02:	eeb0 0a48 	vmov.f32	s0, s16
   b7e06:	eef0 0a68 	vmov.f32	s1, s17
   b7e0a:	ecbd 8b02 	vpop	{d8}
   b7e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7e10:	eeb0 0a48 	vmov.f32	s0, s16
   b7e14:	eef0 0a68 	vmov.f32	s1, s17
   b7e18:	f000 fefa 	bl	b8c10 <finite>
   b7e1c:	b358      	cbz	r0, b7e76 <pow+0xee>
   b7e1e:	ec51 0b18 	vmov	r0, r1, d8
   b7e22:	2200      	movs	r2, #0
   b7e24:	2300      	movs	r3, #0
   b7e26:	f7fc fd1f 	bl	b4868 <__aeabi_dcmpeq>
   b7e2a:	2800      	cmp	r0, #0
   b7e2c:	d0e9      	beq.n	b7e02 <pow+0x7a>
   b7e2e:	ec47 6b10 	vmov	d0, r6, r7
   b7e32:	f000 feed 	bl	b8c10 <finite>
   b7e36:	2800      	cmp	r0, #0
   b7e38:	d0e3      	beq.n	b7e02 <pow+0x7a>
   b7e3a:	ec45 4b10 	vmov	d0, r4, r5
   b7e3e:	f000 fee7 	bl	b8c10 <finite>
   b7e42:	2800      	cmp	r0, #0
   b7e44:	d0dd      	beq.n	b7e02 <pow+0x7a>
   b7e46:	f7fe fbc9 	bl	b65dc <__errno>
   b7e4a:	2322      	movs	r3, #34	; 0x22
   b7e4c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b7f08 <pow+0x180>
   b7e50:	6003      	str	r3, [r0, #0]
   b7e52:	e7d6      	b.n	b7e02 <pow+0x7a>
   b7e54:	4620      	mov	r0, r4
   b7e56:	4629      	mov	r1, r5
   b7e58:	2200      	movs	r2, #0
   b7e5a:	2300      	movs	r3, #0
   b7e5c:	f7fc fd04 	bl	b4868 <__aeabi_dcmpeq>
   b7e60:	2800      	cmp	r0, #0
   b7e62:	d0ce      	beq.n	b7e02 <pow+0x7a>
   b7e64:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b7f10 <pow+0x188>
   b7e68:	eeb0 0a48 	vmov.f32	s0, s16
   b7e6c:	eef0 0a68 	vmov.f32	s1, s17
   b7e70:	ecbd 8b02 	vpop	{d8}
   b7e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7e76:	ec47 6b10 	vmov	d0, r6, r7
   b7e7a:	f000 fec9 	bl	b8c10 <finite>
   b7e7e:	2800      	cmp	r0, #0
   b7e80:	d0cd      	beq.n	b7e1e <pow+0x96>
   b7e82:	ec45 4b10 	vmov	d0, r4, r5
   b7e86:	f000 fec3 	bl	b8c10 <finite>
   b7e8a:	2800      	cmp	r0, #0
   b7e8c:	d0c7      	beq.n	b7e1e <pow+0x96>
   b7e8e:	ec53 2b18 	vmov	r2, r3, d8
   b7e92:	ee18 0a10 	vmov	r0, s16
   b7e96:	4619      	mov	r1, r3
   b7e98:	f7fc fd18 	bl	b48cc <__aeabi_dcmpun>
   b7e9c:	bb20      	cbnz	r0, b7ee8 <pow+0x160>
   b7e9e:	f7fe fb9d 	bl	b65dc <__errno>
   b7ea2:	4603      	mov	r3, r0
   b7ea4:	2222      	movs	r2, #34	; 0x22
   b7ea6:	601a      	str	r2, [r3, #0]
   b7ea8:	4630      	mov	r0, r6
   b7eaa:	4639      	mov	r1, r7
   b7eac:	2200      	movs	r2, #0
   b7eae:	2300      	movs	r3, #0
   b7eb0:	f7fc fce4 	bl	b487c <__aeabi_dcmplt>
   b7eb4:	b948      	cbnz	r0, b7eca <pow+0x142>
   b7eb6:	ed9f 8b18 	vldr	d8, [pc, #96]	; b7f18 <pow+0x190>
   b7eba:	e7a2      	b.n	b7e02 <pow+0x7a>
   b7ebc:	f7fe fb8e 	bl	b65dc <__errno>
   b7ec0:	2321      	movs	r3, #33	; 0x21
   b7ec2:	ed9f 8b17 	vldr	d8, [pc, #92]	; b7f20 <pow+0x198>
   b7ec6:	6003      	str	r3, [r0, #0]
   b7ec8:	e79b      	b.n	b7e02 <pow+0x7a>
   b7eca:	ec45 4b10 	vmov	d0, r4, r5
   b7ece:	f000 feb3 	bl	b8c38 <rint>
   b7ed2:	4622      	mov	r2, r4
   b7ed4:	ec51 0b10 	vmov	r0, r1, d0
   b7ed8:	462b      	mov	r3, r5
   b7eda:	f7fc fcc5 	bl	b4868 <__aeabi_dcmpeq>
   b7ede:	2800      	cmp	r0, #0
   b7ee0:	d1e9      	bne.n	b7eb6 <pow+0x12e>
   b7ee2:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b7f20 <pow+0x198>
   b7ee6:	e78c      	b.n	b7e02 <pow+0x7a>
   b7ee8:	f7fe fb78 	bl	b65dc <__errno>
   b7eec:	2200      	movs	r2, #0
   b7eee:	2300      	movs	r3, #0
   b7ef0:	2121      	movs	r1, #33	; 0x21
   b7ef2:	6001      	str	r1, [r0, #0]
   b7ef4:	4610      	mov	r0, r2
   b7ef6:	4619      	mov	r1, r3
   b7ef8:	f7fc fb78 	bl	b45ec <__aeabi_ddiv>
   b7efc:	ec41 0b18 	vmov	d8, r0, r1
   b7f00:	e77f      	b.n	b7e02 <pow+0x7a>
   b7f02:	bf00      	nop
   b7f04:	f3af 8000 	nop.w
	...
   b7f14:	3ff00000 	.word	0x3ff00000
   b7f18:	00000000 	.word	0x00000000
   b7f1c:	7ff00000 	.word	0x7ff00000
   b7f20:	00000000 	.word	0x00000000
   b7f24:	fff00000 	.word	0xfff00000
   b7f28:	2003e59c 	.word	0x2003e59c
   b7f2c:	00000000 	.word	0x00000000

000b7f30 <__ieee754_pow>:
   b7f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f34:	ec57 6b11 	vmov	r6, r7, d1
   b7f38:	ed2d 8b0c 	vpush	{d8-d13}
   b7f3c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b7f40:	ea5a 0206 	orrs.w	r2, sl, r6
   b7f44:	b087      	sub	sp, #28
   b7f46:	d03d      	beq.n	b7fc4 <__ieee754_pow+0x94>
   b7f48:	ec55 4b10 	vmov	r4, r5, d0
   b7f4c:	4972      	ldr	r1, [pc, #456]	; (b8118 <__ieee754_pow+0x1e8>)
   b7f4e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b7f52:	4588      	cmp	r8, r1
   b7f54:	ee10 2a10 	vmov	r2, s0
   b7f58:	46a9      	mov	r9, r5
   b7f5a:	dc2c      	bgt.n	b7fb6 <__ieee754_pow+0x86>
   b7f5c:	ee11 3a10 	vmov	r3, s2
   b7f60:	46bb      	mov	fp, r7
   b7f62:	d036      	beq.n	b7fd2 <__ieee754_pow+0xa2>
   b7f64:	458a      	cmp	sl, r1
   b7f66:	dc26      	bgt.n	b7fb6 <__ieee754_pow+0x86>
   b7f68:	496b      	ldr	r1, [pc, #428]	; (b8118 <__ieee754_pow+0x1e8>)
   b7f6a:	458a      	cmp	sl, r1
   b7f6c:	d021      	beq.n	b7fb2 <__ieee754_pow+0x82>
   b7f6e:	f1b9 0f00 	cmp.w	r9, #0
   b7f72:	db39      	blt.n	b7fe8 <__ieee754_pow+0xb8>
   b7f74:	2100      	movs	r1, #0
   b7f76:	9100      	str	r1, [sp, #0]
   b7f78:	2b00      	cmp	r3, #0
   b7f7a:	d151      	bne.n	b8020 <__ieee754_pow+0xf0>
   b7f7c:	4b66      	ldr	r3, [pc, #408]	; (b8118 <__ieee754_pow+0x1e8>)
   b7f7e:	459a      	cmp	sl, r3
   b7f80:	f000 80a2 	beq.w	b80c8 <__ieee754_pow+0x198>
   b7f84:	4b65      	ldr	r3, [pc, #404]	; (b811c <__ieee754_pow+0x1ec>)
   b7f86:	459a      	cmp	sl, r3
   b7f88:	f000 80b0 	beq.w	b80ec <__ieee754_pow+0x1bc>
   b7f8c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b7f90:	f000 84c0 	beq.w	b8914 <__ieee754_pow+0x9e4>
   b7f94:	4b62      	ldr	r3, [pc, #392]	; (b8120 <__ieee754_pow+0x1f0>)
   b7f96:	459b      	cmp	fp, r3
   b7f98:	d142      	bne.n	b8020 <__ieee754_pow+0xf0>
   b7f9a:	f1b9 0f00 	cmp.w	r9, #0
   b7f9e:	db3f      	blt.n	b8020 <__ieee754_pow+0xf0>
   b7fa0:	ec45 4b10 	vmov	d0, r4, r5
   b7fa4:	b007      	add	sp, #28
   b7fa6:	ecbd 8b0c 	vpop	{d8-d13}
   b7faa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7fae:	f000 bd59 	b.w	b8a64 <__ieee754_sqrt>
   b7fb2:	2b00      	cmp	r3, #0
   b7fb4:	d0db      	beq.n	b7f6e <__ieee754_pow+0x3e>
   b7fb6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b7fba:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b7fbe:	ea58 0302 	orrs.w	r3, r8, r2
   b7fc2:	d109      	bne.n	b7fd8 <__ieee754_pow+0xa8>
   b7fc4:	ed9f 0b50 	vldr	d0, [pc, #320]	; b8108 <__ieee754_pow+0x1d8>
   b7fc8:	b007      	add	sp, #28
   b7fca:	ecbd 8b0c 	vpop	{d8-d13}
   b7fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7fd2:	b90c      	cbnz	r4, b7fd8 <__ieee754_pow+0xa8>
   b7fd4:	45c2      	cmp	sl, r8
   b7fd6:	ddc7      	ble.n	b7f68 <__ieee754_pow+0x38>
   b7fd8:	4852      	ldr	r0, [pc, #328]	; (b8124 <__ieee754_pow+0x1f4>)
   b7fda:	b007      	add	sp, #28
   b7fdc:	ecbd 8b0c 	vpop	{d8-d13}
   b7fe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7fe4:	f000 be20 	b.w	b8c28 <nan>
   b7fe8:	494f      	ldr	r1, [pc, #316]	; (b8128 <__ieee754_pow+0x1f8>)
   b7fea:	458a      	cmp	sl, r1
   b7fec:	f300 8085 	bgt.w	b80fa <__ieee754_pow+0x1ca>
   b7ff0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b7ff4:	458a      	cmp	sl, r1
   b7ff6:	dd0f      	ble.n	b8018 <__ieee754_pow+0xe8>
   b7ff8:	ea4f 512a 	mov.w	r1, sl, asr #20
   b7ffc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b8000:	2914      	cmp	r1, #20
   b8002:	f340 849b 	ble.w	b893c <__ieee754_pow+0xa0c>
   b8006:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b800a:	fa23 f001 	lsr.w	r0, r3, r1
   b800e:	fa00 f101 	lsl.w	r1, r0, r1
   b8012:	4299      	cmp	r1, r3
   b8014:	f000 84ed 	beq.w	b89f2 <__ieee754_pow+0xac2>
   b8018:	2100      	movs	r1, #0
   b801a:	9100      	str	r1, [sp, #0]
   b801c:	2b00      	cmp	r3, #0
   b801e:	d0b1      	beq.n	b7f84 <__ieee754_pow+0x54>
   b8020:	ec45 4b10 	vmov	d0, r4, r5
   b8024:	9202      	str	r2, [sp, #8]
   b8026:	f000 fde9 	bl	b8bfc <fabs>
   b802a:	9a02      	ldr	r2, [sp, #8]
   b802c:	bb5a      	cbnz	r2, b8086 <__ieee754_pow+0x156>
   b802e:	f1b8 0f00 	cmp.w	r8, #0
   b8032:	d004      	beq.n	b803e <__ieee754_pow+0x10e>
   b8034:	4b39      	ldr	r3, [pc, #228]	; (b811c <__ieee754_pow+0x1ec>)
   b8036:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b803a:	429a      	cmp	r2, r3
   b803c:	d123      	bne.n	b8086 <__ieee754_pow+0x156>
   b803e:	f1bb 0f00 	cmp.w	fp, #0
   b8042:	da07      	bge.n	b8054 <__ieee754_pow+0x124>
   b8044:	ec53 2b10 	vmov	r2, r3, d0
   b8048:	4934      	ldr	r1, [pc, #208]	; (b811c <__ieee754_pow+0x1ec>)
   b804a:	2000      	movs	r0, #0
   b804c:	f7fc face 	bl	b45ec <__aeabi_ddiv>
   b8050:	ec41 0b10 	vmov	d0, r0, r1
   b8054:	f1b9 0f00 	cmp.w	r9, #0
   b8058:	dab6      	bge.n	b7fc8 <__ieee754_pow+0x98>
   b805a:	9b00      	ldr	r3, [sp, #0]
   b805c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b8060:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b8064:	ea58 0303 	orrs.w	r3, r8, r3
   b8068:	f040 848d 	bne.w	b8986 <__ieee754_pow+0xa56>
   b806c:	ec53 2b10 	vmov	r2, r3, d0
   b8070:	4610      	mov	r0, r2
   b8072:	4619      	mov	r1, r3
   b8074:	f7fb ffd8 	bl	b4028 <__aeabi_dsub>
   b8078:	4602      	mov	r2, r0
   b807a:	460b      	mov	r3, r1
   b807c:	f7fc fab6 	bl	b45ec <__aeabi_ddiv>
   b8080:	ec41 0b10 	vmov	d0, r0, r1
   b8084:	e7a0      	b.n	b7fc8 <__ieee754_pow+0x98>
   b8086:	9a00      	ldr	r2, [sp, #0]
   b8088:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b808c:	3b01      	subs	r3, #1
   b808e:	9304      	str	r3, [sp, #16]
   b8090:	4313      	orrs	r3, r2
   b8092:	d035      	beq.n	b8100 <__ieee754_pow+0x1d0>
   b8094:	4b25      	ldr	r3, [pc, #148]	; (b812c <__ieee754_pow+0x1fc>)
   b8096:	459a      	cmp	sl, r3
   b8098:	dd4c      	ble.n	b8134 <__ieee754_pow+0x204>
   b809a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b809e:	459a      	cmp	sl, r3
   b80a0:	4b23      	ldr	r3, [pc, #140]	; (b8130 <__ieee754_pow+0x200>)
   b80a2:	f340 83db 	ble.w	b885c <__ieee754_pow+0x92c>
   b80a6:	4598      	cmp	r8, r3
   b80a8:	f340 8360 	ble.w	b876c <__ieee754_pow+0x83c>
   b80ac:	f1bb 0f00 	cmp.w	fp, #0
   b80b0:	f340 8360 	ble.w	b8774 <__ieee754_pow+0x844>
   b80b4:	a316      	add	r3, pc, #88	; (adr r3, b8110 <__ieee754_pow+0x1e0>)
   b80b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b80ba:	4610      	mov	r0, r2
   b80bc:	4619      	mov	r1, r3
   b80be:	f7fc f96b 	bl	b4398 <__aeabi_dmul>
   b80c2:	ec41 0b10 	vmov	d0, r0, r1
   b80c6:	e77f      	b.n	b7fc8 <__ieee754_pow+0x98>
   b80c8:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b80cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b80d0:	4313      	orrs	r3, r2
   b80d2:	f43f af77 	beq.w	b7fc4 <__ieee754_pow+0x94>
   b80d6:	4b16      	ldr	r3, [pc, #88]	; (b8130 <__ieee754_pow+0x200>)
   b80d8:	4598      	cmp	r8, r3
   b80da:	f340 837a 	ble.w	b87d2 <__ieee754_pow+0x8a2>
   b80de:	f1bb 0f00 	cmp.w	fp, #0
   b80e2:	f2c0 8347 	blt.w	b8774 <__ieee754_pow+0x844>
   b80e6:	ec47 6b10 	vmov	d0, r6, r7
   b80ea:	e76d      	b.n	b7fc8 <__ieee754_pow+0x98>
   b80ec:	f1bb 0f00 	cmp.w	fp, #0
   b80f0:	f2c0 841a 	blt.w	b8928 <__ieee754_pow+0x9f8>
   b80f4:	ec45 4b10 	vmov	d0, r4, r5
   b80f8:	e766      	b.n	b7fc8 <__ieee754_pow+0x98>
   b80fa:	2102      	movs	r1, #2
   b80fc:	9100      	str	r1, [sp, #0]
   b80fe:	e73b      	b.n	b7f78 <__ieee754_pow+0x48>
   b8100:	4622      	mov	r2, r4
   b8102:	462b      	mov	r3, r5
   b8104:	e7b4      	b.n	b8070 <__ieee754_pow+0x140>
   b8106:	bf00      	nop
   b8108:	00000000 	.word	0x00000000
   b810c:	3ff00000 	.word	0x3ff00000
   b8110:	8800759c 	.word	0x8800759c
   b8114:	7e37e43c 	.word	0x7e37e43c
   b8118:	7ff00000 	.word	0x7ff00000
   b811c:	3ff00000 	.word	0x3ff00000
   b8120:	3fe00000 	.word	0x3fe00000
   b8124:	000ba1f0 	.word	0x000ba1f0
   b8128:	433fffff 	.word	0x433fffff
   b812c:	41e00000 	.word	0x41e00000
   b8130:	3fefffff 	.word	0x3fefffff
   b8134:	4be4      	ldr	r3, [pc, #912]	; (b84c8 <__ieee754_pow+0x598>)
   b8136:	ea09 0303 	and.w	r3, r9, r3
   b813a:	2200      	movs	r2, #0
   b813c:	b953      	cbnz	r3, b8154 <__ieee754_pow+0x224>
   b813e:	ec51 0b10 	vmov	r0, r1, d0
   b8142:	4be2      	ldr	r3, [pc, #904]	; (b84cc <__ieee754_pow+0x59c>)
   b8144:	f7fc f928 	bl	b4398 <__aeabi_dmul>
   b8148:	ec41 0b10 	vmov	d0, r0, r1
   b814c:	ee10 8a90 	vmov	r8, s1
   b8150:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b8154:	ea4f 5328 	mov.w	r3, r8, asr #20
   b8158:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b815c:	189a      	adds	r2, r3, r2
   b815e:	4bdc      	ldr	r3, [pc, #880]	; (b84d0 <__ieee754_pow+0x5a0>)
   b8160:	9205      	str	r2, [sp, #20]
   b8162:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b8166:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b816a:	4598      	cmp	r8, r3
   b816c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b8170:	dd07      	ble.n	b8182 <__ieee754_pow+0x252>
   b8172:	4bd8      	ldr	r3, [pc, #864]	; (b84d4 <__ieee754_pow+0x5a4>)
   b8174:	4598      	cmp	r8, r3
   b8176:	f340 8414 	ble.w	b89a2 <__ieee754_pow+0xa72>
   b817a:	3201      	adds	r2, #1
   b817c:	9205      	str	r2, [sp, #20]
   b817e:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b8182:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b8468 <__ieee754_pow+0x538>
   b8186:	ed9f 7bba 	vldr	d7, [pc, #744]	; b8470 <__ieee754_pow+0x540>
   b818a:	ec53 2b16 	vmov	r2, r3, d6
   b818e:	eeb0 ca47 	vmov.f32	s24, s14
   b8192:	eef0 ca67 	vmov.f32	s25, s15
   b8196:	2500      	movs	r5, #0
   b8198:	eeb0 da47 	vmov.f32	s26, s14
   b819c:	eef0 da67 	vmov.f32	s27, s15
   b81a0:	ec5b ab10 	vmov	sl, fp, d0
   b81a4:	46a3      	mov	fp, r4
   b81a6:	4650      	mov	r0, sl
   b81a8:	4659      	mov	r1, fp
   b81aa:	ec43 2b1a 	vmov	d10, r2, r3
   b81ae:	f7fb ff3b 	bl	b4028 <__aeabi_dsub>
   b81b2:	ec53 2b1a 	vmov	r2, r3, d10
   b81b6:	4680      	mov	r8, r0
   b81b8:	4689      	mov	r9, r1
   b81ba:	4650      	mov	r0, sl
   b81bc:	4659      	mov	r1, fp
   b81be:	f7fb ff35 	bl	b402c <__adddf3>
   b81c2:	4602      	mov	r2, r0
   b81c4:	460b      	mov	r3, r1
   b81c6:	2000      	movs	r0, #0
   b81c8:	49c3      	ldr	r1, [pc, #780]	; (b84d8 <__ieee754_pow+0x5a8>)
   b81ca:	f7fc fa0f 	bl	b45ec <__aeabi_ddiv>
   b81ce:	ec41 0b1b 	vmov	d11, r0, r1
   b81d2:	4640      	mov	r0, r8
   b81d4:	ec53 2b1b 	vmov	r2, r3, d11
   b81d8:	4649      	mov	r1, r9
   b81da:	f7fc f8dd 	bl	b4398 <__aeabi_dmul>
   b81de:	ec41 0b18 	vmov	d8, r0, r1
   b81e2:	460a      	mov	r2, r1
   b81e4:	4601      	mov	r1, r0
   b81e6:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b81ea:	2100      	movs	r1, #0
   b81ec:	9102      	str	r1, [sp, #8]
   b81ee:	1064      	asrs	r4, r4, #1
   b81f0:	ec4b ab19 	vmov	d9, sl, fp
   b81f4:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b81f8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b81fc:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b8200:	2000      	movs	r0, #0
   b8202:	1959      	adds	r1, r3, r5
   b8204:	4604      	mov	r4, r0
   b8206:	460d      	mov	r5, r1
   b8208:	4602      	mov	r2, r0
   b820a:	460b      	mov	r3, r1
   b820c:	4650      	mov	r0, sl
   b820e:	4659      	mov	r1, fp
   b8210:	f7fc f8c2 	bl	b4398 <__aeabi_dmul>
   b8214:	4602      	mov	r2, r0
   b8216:	460b      	mov	r3, r1
   b8218:	4640      	mov	r0, r8
   b821a:	4649      	mov	r1, r9
   b821c:	f7fb ff04 	bl	b4028 <__aeabi_dsub>
   b8220:	ec53 2b1a 	vmov	r2, r3, d10
   b8224:	4680      	mov	r8, r0
   b8226:	4689      	mov	r9, r1
   b8228:	4620      	mov	r0, r4
   b822a:	4629      	mov	r1, r5
   b822c:	f7fb fefc 	bl	b4028 <__aeabi_dsub>
   b8230:	4602      	mov	r2, r0
   b8232:	460b      	mov	r3, r1
   b8234:	ec51 0b19 	vmov	r0, r1, d9
   b8238:	f7fb fef6 	bl	b4028 <__aeabi_dsub>
   b823c:	4652      	mov	r2, sl
   b823e:	465b      	mov	r3, fp
   b8240:	f7fc f8aa 	bl	b4398 <__aeabi_dmul>
   b8244:	4602      	mov	r2, r0
   b8246:	460b      	mov	r3, r1
   b8248:	4640      	mov	r0, r8
   b824a:	4649      	mov	r1, r9
   b824c:	f7fb feec 	bl	b4028 <__aeabi_dsub>
   b8250:	ec53 2b1b 	vmov	r2, r3, d11
   b8254:	f7fc f8a0 	bl	b4398 <__aeabi_dmul>
   b8258:	ec53 2b18 	vmov	r2, r3, d8
   b825c:	ec41 0b19 	vmov	d9, r0, r1
   b8260:	ec51 0b18 	vmov	r0, r1, d8
   b8264:	f7fc f898 	bl	b4398 <__aeabi_dmul>
   b8268:	a383      	add	r3, pc, #524	; (adr r3, b8478 <__ieee754_pow+0x548>)
   b826a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b826e:	4604      	mov	r4, r0
   b8270:	460d      	mov	r5, r1
   b8272:	f7fc f891 	bl	b4398 <__aeabi_dmul>
   b8276:	a382      	add	r3, pc, #520	; (adr r3, b8480 <__ieee754_pow+0x550>)
   b8278:	e9d3 2300 	ldrd	r2, r3, [r3]
   b827c:	f7fb fed6 	bl	b402c <__adddf3>
   b8280:	4622      	mov	r2, r4
   b8282:	462b      	mov	r3, r5
   b8284:	f7fc f888 	bl	b4398 <__aeabi_dmul>
   b8288:	a37f      	add	r3, pc, #508	; (adr r3, b8488 <__ieee754_pow+0x558>)
   b828a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b828e:	f7fb fecd 	bl	b402c <__adddf3>
   b8292:	4622      	mov	r2, r4
   b8294:	462b      	mov	r3, r5
   b8296:	f7fc f87f 	bl	b4398 <__aeabi_dmul>
   b829a:	a37d      	add	r3, pc, #500	; (adr r3, b8490 <__ieee754_pow+0x560>)
   b829c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b82a0:	f7fb fec4 	bl	b402c <__adddf3>
   b82a4:	4622      	mov	r2, r4
   b82a6:	462b      	mov	r3, r5
   b82a8:	f7fc f876 	bl	b4398 <__aeabi_dmul>
   b82ac:	a37a      	add	r3, pc, #488	; (adr r3, b8498 <__ieee754_pow+0x568>)
   b82ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b82b2:	f7fb febb 	bl	b402c <__adddf3>
   b82b6:	4622      	mov	r2, r4
   b82b8:	462b      	mov	r3, r5
   b82ba:	f7fc f86d 	bl	b4398 <__aeabi_dmul>
   b82be:	a378      	add	r3, pc, #480	; (adr r3, b84a0 <__ieee754_pow+0x570>)
   b82c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b82c4:	f7fb feb2 	bl	b402c <__adddf3>
   b82c8:	4622      	mov	r2, r4
   b82ca:	4680      	mov	r8, r0
   b82cc:	4689      	mov	r9, r1
   b82ce:	462b      	mov	r3, r5
   b82d0:	4620      	mov	r0, r4
   b82d2:	4629      	mov	r1, r5
   b82d4:	f7fc f860 	bl	b4398 <__aeabi_dmul>
   b82d8:	4602      	mov	r2, r0
   b82da:	460b      	mov	r3, r1
   b82dc:	4640      	mov	r0, r8
   b82de:	4649      	mov	r1, r9
   b82e0:	f7fc f85a 	bl	b4398 <__aeabi_dmul>
   b82e4:	4652      	mov	r2, sl
   b82e6:	4604      	mov	r4, r0
   b82e8:	460d      	mov	r5, r1
   b82ea:	465b      	mov	r3, fp
   b82ec:	ec51 0b18 	vmov	r0, r1, d8
   b82f0:	f7fb fe9c 	bl	b402c <__adddf3>
   b82f4:	ec53 2b19 	vmov	r2, r3, d9
   b82f8:	f7fc f84e 	bl	b4398 <__aeabi_dmul>
   b82fc:	4622      	mov	r2, r4
   b82fe:	462b      	mov	r3, r5
   b8300:	f7fb fe94 	bl	b402c <__adddf3>
   b8304:	4652      	mov	r2, sl
   b8306:	4680      	mov	r8, r0
   b8308:	4689      	mov	r9, r1
   b830a:	465b      	mov	r3, fp
   b830c:	4650      	mov	r0, sl
   b830e:	4659      	mov	r1, fp
   b8310:	f7fc f842 	bl	b4398 <__aeabi_dmul>
   b8314:	4602      	mov	r2, r0
   b8316:	460b      	mov	r3, r1
   b8318:	ec43 2b1a 	vmov	d10, r2, r3
   b831c:	4b6f      	ldr	r3, [pc, #444]	; (b84dc <__ieee754_pow+0x5ac>)
   b831e:	2200      	movs	r2, #0
   b8320:	f7fb fe84 	bl	b402c <__adddf3>
   b8324:	4642      	mov	r2, r8
   b8326:	464b      	mov	r3, r9
   b8328:	f7fb fe80 	bl	b402c <__adddf3>
   b832c:	2400      	movs	r4, #0
   b832e:	460d      	mov	r5, r1
   b8330:	4622      	mov	r2, r4
   b8332:	462b      	mov	r3, r5
   b8334:	4650      	mov	r0, sl
   b8336:	4659      	mov	r1, fp
   b8338:	f7fc f82e 	bl	b4398 <__aeabi_dmul>
   b833c:	4b67      	ldr	r3, [pc, #412]	; (b84dc <__ieee754_pow+0x5ac>)
   b833e:	4682      	mov	sl, r0
   b8340:	468b      	mov	fp, r1
   b8342:	2200      	movs	r2, #0
   b8344:	4620      	mov	r0, r4
   b8346:	4629      	mov	r1, r5
   b8348:	f7fb fe6e 	bl	b4028 <__aeabi_dsub>
   b834c:	ec53 2b1a 	vmov	r2, r3, d10
   b8350:	f7fb fe6a 	bl	b4028 <__aeabi_dsub>
   b8354:	4602      	mov	r2, r0
   b8356:	460b      	mov	r3, r1
   b8358:	4640      	mov	r0, r8
   b835a:	4649      	mov	r1, r9
   b835c:	f7fb fe64 	bl	b4028 <__aeabi_dsub>
   b8360:	ec53 2b18 	vmov	r2, r3, d8
   b8364:	f7fc f818 	bl	b4398 <__aeabi_dmul>
   b8368:	4622      	mov	r2, r4
   b836a:	462b      	mov	r3, r5
   b836c:	4604      	mov	r4, r0
   b836e:	460d      	mov	r5, r1
   b8370:	ec51 0b19 	vmov	r0, r1, d9
   b8374:	f7fc f810 	bl	b4398 <__aeabi_dmul>
   b8378:	4602      	mov	r2, r0
   b837a:	460b      	mov	r3, r1
   b837c:	4620      	mov	r0, r4
   b837e:	4629      	mov	r1, r5
   b8380:	f7fb fe54 	bl	b402c <__adddf3>
   b8384:	4680      	mov	r8, r0
   b8386:	4689      	mov	r9, r1
   b8388:	4642      	mov	r2, r8
   b838a:	464b      	mov	r3, r9
   b838c:	4650      	mov	r0, sl
   b838e:	4659      	mov	r1, fp
   b8390:	f7fb fe4c 	bl	b402c <__adddf3>
   b8394:	a344      	add	r3, pc, #272	; (adr r3, b84a8 <__ieee754_pow+0x578>)
   b8396:	e9d3 2300 	ldrd	r2, r3, [r3]
   b839a:	2000      	movs	r0, #0
   b839c:	4604      	mov	r4, r0
   b839e:	460d      	mov	r5, r1
   b83a0:	f7fb fffa 	bl	b4398 <__aeabi_dmul>
   b83a4:	4652      	mov	r2, sl
   b83a6:	ec41 0b19 	vmov	d9, r0, r1
   b83aa:	465b      	mov	r3, fp
   b83ac:	4620      	mov	r0, r4
   b83ae:	4629      	mov	r1, r5
   b83b0:	f7fb fe3a 	bl	b4028 <__aeabi_dsub>
   b83b4:	4602      	mov	r2, r0
   b83b6:	460b      	mov	r3, r1
   b83b8:	4640      	mov	r0, r8
   b83ba:	4649      	mov	r1, r9
   b83bc:	f7fb fe34 	bl	b4028 <__aeabi_dsub>
   b83c0:	a33b      	add	r3, pc, #236	; (adr r3, b84b0 <__ieee754_pow+0x580>)
   b83c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b83c6:	f7fb ffe7 	bl	b4398 <__aeabi_dmul>
   b83ca:	4602      	mov	r2, r0
   b83cc:	460b      	mov	r3, r1
   b83ce:	4620      	mov	r0, r4
   b83d0:	4629      	mov	r1, r5
   b83d2:	4614      	mov	r4, r2
   b83d4:	461d      	mov	r5, r3
   b83d6:	a338      	add	r3, pc, #224	; (adr r3, b84b8 <__ieee754_pow+0x588>)
   b83d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b83dc:	f7fb ffdc 	bl	b4398 <__aeabi_dmul>
   b83e0:	4602      	mov	r2, r0
   b83e2:	460b      	mov	r3, r1
   b83e4:	4620      	mov	r0, r4
   b83e6:	4629      	mov	r1, r5
   b83e8:	f7fb fe20 	bl	b402c <__adddf3>
   b83ec:	ec53 2b1d 	vmov	r2, r3, d13
   b83f0:	f7fb fe1c 	bl	b402c <__adddf3>
   b83f4:	4680      	mov	r8, r0
   b83f6:	9805      	ldr	r0, [sp, #20]
   b83f8:	4689      	mov	r9, r1
   b83fa:	f7fb ff63 	bl	b42c4 <__aeabi_i2d>
   b83fe:	4642      	mov	r2, r8
   b8400:	4682      	mov	sl, r0
   b8402:	468b      	mov	fp, r1
   b8404:	464b      	mov	r3, r9
   b8406:	ec51 0b19 	vmov	r0, r1, d9
   b840a:	f7fb fe0f 	bl	b402c <__adddf3>
   b840e:	ec53 2b1c 	vmov	r2, r3, d12
   b8412:	f7fb fe0b 	bl	b402c <__adddf3>
   b8416:	4652      	mov	r2, sl
   b8418:	465b      	mov	r3, fp
   b841a:	f7fb fe07 	bl	b402c <__adddf3>
   b841e:	4652      	mov	r2, sl
   b8420:	465b      	mov	r3, fp
   b8422:	2000      	movs	r0, #0
   b8424:	4604      	mov	r4, r0
   b8426:	460d      	mov	r5, r1
   b8428:	f7fb fdfe 	bl	b4028 <__aeabi_dsub>
   b842c:	ec53 2b1c 	vmov	r2, r3, d12
   b8430:	f7fb fdfa 	bl	b4028 <__aeabi_dsub>
   b8434:	ec53 2b19 	vmov	r2, r3, d9
   b8438:	f7fb fdf6 	bl	b4028 <__aeabi_dsub>
   b843c:	4602      	mov	r2, r0
   b843e:	460b      	mov	r3, r1
   b8440:	4640      	mov	r0, r8
   b8442:	4649      	mov	r1, r9
   b8444:	f7fb fdf0 	bl	b4028 <__aeabi_dsub>
   b8448:	9b00      	ldr	r3, [sp, #0]
   b844a:	9a04      	ldr	r2, [sp, #16]
   b844c:	3b01      	subs	r3, #1
   b844e:	4313      	orrs	r3, r2
   b8450:	4682      	mov	sl, r0
   b8452:	468b      	mov	fp, r1
   b8454:	f040 81b6 	bne.w	b87c4 <__ieee754_pow+0x894>
   b8458:	ed9f 7b19 	vldr	d7, [pc, #100]	; b84c0 <__ieee754_pow+0x590>
   b845c:	eeb0 8a47 	vmov.f32	s16, s14
   b8460:	eef0 8a67 	vmov.f32	s17, s15
   b8464:	e03c      	b.n	b84e0 <__ieee754_pow+0x5b0>
   b8466:	bf00      	nop
   b8468:	00000000 	.word	0x00000000
   b846c:	3ff00000 	.word	0x3ff00000
	...
   b8478:	4a454eef 	.word	0x4a454eef
   b847c:	3fca7e28 	.word	0x3fca7e28
   b8480:	93c9db65 	.word	0x93c9db65
   b8484:	3fcd864a 	.word	0x3fcd864a
   b8488:	a91d4101 	.word	0xa91d4101
   b848c:	3fd17460 	.word	0x3fd17460
   b8490:	518f264d 	.word	0x518f264d
   b8494:	3fd55555 	.word	0x3fd55555
   b8498:	db6fabff 	.word	0xdb6fabff
   b849c:	3fdb6db6 	.word	0x3fdb6db6
   b84a0:	33333303 	.word	0x33333303
   b84a4:	3fe33333 	.word	0x3fe33333
   b84a8:	e0000000 	.word	0xe0000000
   b84ac:	3feec709 	.word	0x3feec709
   b84b0:	dc3a03fd 	.word	0xdc3a03fd
   b84b4:	3feec709 	.word	0x3feec709
   b84b8:	145b01f5 	.word	0x145b01f5
   b84bc:	be3e2fe0 	.word	0xbe3e2fe0
   b84c0:	00000000 	.word	0x00000000
   b84c4:	bff00000 	.word	0xbff00000
   b84c8:	7ff00000 	.word	0x7ff00000
   b84cc:	43400000 	.word	0x43400000
   b84d0:	0003988e 	.word	0x0003988e
   b84d4:	000bb679 	.word	0x000bb679
   b84d8:	3ff00000 	.word	0x3ff00000
   b84dc:	40080000 	.word	0x40080000
   b84e0:	2300      	movs	r3, #0
   b84e2:	e9cd 6700 	strd	r6, r7, [sp]
   b84e6:	9300      	str	r3, [sp, #0]
   b84e8:	e9dd 8900 	ldrd	r8, r9, [sp]
   b84ec:	4630      	mov	r0, r6
   b84ee:	4642      	mov	r2, r8
   b84f0:	464b      	mov	r3, r9
   b84f2:	4639      	mov	r1, r7
   b84f4:	f7fb fd98 	bl	b4028 <__aeabi_dsub>
   b84f8:	4622      	mov	r2, r4
   b84fa:	462b      	mov	r3, r5
   b84fc:	f7fb ff4c 	bl	b4398 <__aeabi_dmul>
   b8500:	4632      	mov	r2, r6
   b8502:	463b      	mov	r3, r7
   b8504:	4606      	mov	r6, r0
   b8506:	460f      	mov	r7, r1
   b8508:	4650      	mov	r0, sl
   b850a:	4659      	mov	r1, fp
   b850c:	f7fb ff44 	bl	b4398 <__aeabi_dmul>
   b8510:	4602      	mov	r2, r0
   b8512:	460b      	mov	r3, r1
   b8514:	4630      	mov	r0, r6
   b8516:	4639      	mov	r1, r7
   b8518:	f7fb fd88 	bl	b402c <__adddf3>
   b851c:	4642      	mov	r2, r8
   b851e:	464b      	mov	r3, r9
   b8520:	4606      	mov	r6, r0
   b8522:	460f      	mov	r7, r1
   b8524:	4620      	mov	r0, r4
   b8526:	4629      	mov	r1, r5
   b8528:	f7fb ff36 	bl	b4398 <__aeabi_dmul>
   b852c:	4604      	mov	r4, r0
   b852e:	460d      	mov	r5, r1
   b8530:	462b      	mov	r3, r5
   b8532:	4630      	mov	r0, r6
   b8534:	4639      	mov	r1, r7
   b8536:	4622      	mov	r2, r4
   b8538:	f7fb fd78 	bl	b402c <__adddf3>
   b853c:	4bc2      	ldr	r3, [pc, #776]	; (b8848 <__ieee754_pow+0x918>)
   b853e:	4299      	cmp	r1, r3
   b8540:	4680      	mov	r8, r0
   b8542:	4689      	mov	r9, r1
   b8544:	468a      	mov	sl, r1
   b8546:	f340 8118 	ble.w	b877a <__ieee754_pow+0x84a>
   b854a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b854e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b8552:	4303      	orrs	r3, r0
   b8554:	f040 8207 	bne.w	b8966 <__ieee754_pow+0xa36>
   b8558:	a3a3      	add	r3, pc, #652	; (adr r3, b87e8 <__ieee754_pow+0x8b8>)
   b855a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b855e:	4630      	mov	r0, r6
   b8560:	4639      	mov	r1, r7
   b8562:	f7fb fd63 	bl	b402c <__adddf3>
   b8566:	4602      	mov	r2, r0
   b8568:	460b      	mov	r3, r1
   b856a:	4640      	mov	r0, r8
   b856c:	4649      	mov	r1, r9
   b856e:	4690      	mov	r8, r2
   b8570:	4699      	mov	r9, r3
   b8572:	4622      	mov	r2, r4
   b8574:	462b      	mov	r3, r5
   b8576:	f7fb fd57 	bl	b4028 <__aeabi_dsub>
   b857a:	4602      	mov	r2, r0
   b857c:	460b      	mov	r3, r1
   b857e:	4640      	mov	r0, r8
   b8580:	4649      	mov	r1, r9
   b8582:	f7fc f999 	bl	b48b8 <__aeabi_dcmpgt>
   b8586:	2800      	cmp	r0, #0
   b8588:	f040 81ed 	bne.w	b8966 <__ieee754_pow+0xa36>
   b858c:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b8590:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b8594:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b8598:	fa42 f303 	asr.w	r3, r2, r3
   b859c:	4453      	add	r3, sl
   b859e:	49ab      	ldr	r1, [pc, #684]	; (b884c <__ieee754_pow+0x91c>)
   b85a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b85a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b85a8:	fa41 fc02 	asr.w	ip, r1, r2
   b85ac:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b85b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b85b4:	f1c2 0214 	rsb	r2, r2, #20
   b85b8:	fa41 f202 	asr.w	r2, r1, r2
   b85bc:	2000      	movs	r0, #0
   b85be:	ea23 010c 	bic.w	r1, r3, ip
   b85c2:	f1ba 0f00 	cmp.w	sl, #0
   b85c6:	9200      	str	r2, [sp, #0]
   b85c8:	460b      	mov	r3, r1
   b85ca:	4602      	mov	r2, r0
   b85cc:	da02      	bge.n	b85d4 <__ieee754_pow+0x6a4>
   b85ce:	9900      	ldr	r1, [sp, #0]
   b85d0:	4249      	negs	r1, r1
   b85d2:	9100      	str	r1, [sp, #0]
   b85d4:	4620      	mov	r0, r4
   b85d6:	4629      	mov	r1, r5
   b85d8:	f7fb fd26 	bl	b4028 <__aeabi_dsub>
   b85dc:	9b00      	ldr	r3, [sp, #0]
   b85de:	051b      	lsls	r3, r3, #20
   b85e0:	9302      	str	r3, [sp, #8]
   b85e2:	4602      	mov	r2, r0
   b85e4:	460b      	mov	r3, r1
   b85e6:	4604      	mov	r4, r0
   b85e8:	460d      	mov	r5, r1
   b85ea:	4630      	mov	r0, r6
   b85ec:	4639      	mov	r1, r7
   b85ee:	f7fb fd1d 	bl	b402c <__adddf3>
   b85f2:	4689      	mov	r9, r1
   b85f4:	f04f 0800 	mov.w	r8, #0
   b85f8:	a37d      	add	r3, pc, #500	; (adr r3, b87f0 <__ieee754_pow+0x8c0>)
   b85fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b85fe:	4640      	mov	r0, r8
   b8600:	4649      	mov	r1, r9
   b8602:	f7fb fec9 	bl	b4398 <__aeabi_dmul>
   b8606:	4622      	mov	r2, r4
   b8608:	462b      	mov	r3, r5
   b860a:	4682      	mov	sl, r0
   b860c:	468b      	mov	fp, r1
   b860e:	4640      	mov	r0, r8
   b8610:	4649      	mov	r1, r9
   b8612:	f7fb fd09 	bl	b4028 <__aeabi_dsub>
   b8616:	4602      	mov	r2, r0
   b8618:	460b      	mov	r3, r1
   b861a:	4630      	mov	r0, r6
   b861c:	4639      	mov	r1, r7
   b861e:	f7fb fd03 	bl	b4028 <__aeabi_dsub>
   b8622:	a375      	add	r3, pc, #468	; (adr r3, b87f8 <__ieee754_pow+0x8c8>)
   b8624:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8628:	f7fb feb6 	bl	b4398 <__aeabi_dmul>
   b862c:	a374      	add	r3, pc, #464	; (adr r3, b8800 <__ieee754_pow+0x8d0>)
   b862e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8632:	4604      	mov	r4, r0
   b8634:	460d      	mov	r5, r1
   b8636:	4640      	mov	r0, r8
   b8638:	4649      	mov	r1, r9
   b863a:	f7fb fead 	bl	b4398 <__aeabi_dmul>
   b863e:	4602      	mov	r2, r0
   b8640:	460b      	mov	r3, r1
   b8642:	4620      	mov	r0, r4
   b8644:	4629      	mov	r1, r5
   b8646:	f7fb fcf1 	bl	b402c <__adddf3>
   b864a:	4606      	mov	r6, r0
   b864c:	460f      	mov	r7, r1
   b864e:	4632      	mov	r2, r6
   b8650:	463b      	mov	r3, r7
   b8652:	4650      	mov	r0, sl
   b8654:	4659      	mov	r1, fp
   b8656:	f7fb fce9 	bl	b402c <__adddf3>
   b865a:	4652      	mov	r2, sl
   b865c:	465b      	mov	r3, fp
   b865e:	4604      	mov	r4, r0
   b8660:	460d      	mov	r5, r1
   b8662:	f7fb fce1 	bl	b4028 <__aeabi_dsub>
   b8666:	4602      	mov	r2, r0
   b8668:	460b      	mov	r3, r1
   b866a:	4630      	mov	r0, r6
   b866c:	4639      	mov	r1, r7
   b866e:	f7fb fcdb 	bl	b4028 <__aeabi_dsub>
   b8672:	4622      	mov	r2, r4
   b8674:	4680      	mov	r8, r0
   b8676:	4689      	mov	r9, r1
   b8678:	462b      	mov	r3, r5
   b867a:	4620      	mov	r0, r4
   b867c:	4629      	mov	r1, r5
   b867e:	f7fb fe8b 	bl	b4398 <__aeabi_dmul>
   b8682:	a361      	add	r3, pc, #388	; (adr r3, b8808 <__ieee754_pow+0x8d8>)
   b8684:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8688:	4606      	mov	r6, r0
   b868a:	460f      	mov	r7, r1
   b868c:	f7fb fe84 	bl	b4398 <__aeabi_dmul>
   b8690:	a35f      	add	r3, pc, #380	; (adr r3, b8810 <__ieee754_pow+0x8e0>)
   b8692:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8696:	f7fb fcc7 	bl	b4028 <__aeabi_dsub>
   b869a:	4632      	mov	r2, r6
   b869c:	463b      	mov	r3, r7
   b869e:	f7fb fe7b 	bl	b4398 <__aeabi_dmul>
   b86a2:	a35d      	add	r3, pc, #372	; (adr r3, b8818 <__ieee754_pow+0x8e8>)
   b86a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b86a8:	f7fb fcc0 	bl	b402c <__adddf3>
   b86ac:	4632      	mov	r2, r6
   b86ae:	463b      	mov	r3, r7
   b86b0:	f7fb fe72 	bl	b4398 <__aeabi_dmul>
   b86b4:	a35a      	add	r3, pc, #360	; (adr r3, b8820 <__ieee754_pow+0x8f0>)
   b86b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b86ba:	f7fb fcb5 	bl	b4028 <__aeabi_dsub>
   b86be:	4632      	mov	r2, r6
   b86c0:	463b      	mov	r3, r7
   b86c2:	f7fb fe69 	bl	b4398 <__aeabi_dmul>
   b86c6:	a358      	add	r3, pc, #352	; (adr r3, b8828 <__ieee754_pow+0x8f8>)
   b86c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b86cc:	f7fb fcae 	bl	b402c <__adddf3>
   b86d0:	4632      	mov	r2, r6
   b86d2:	463b      	mov	r3, r7
   b86d4:	f7fb fe60 	bl	b4398 <__aeabi_dmul>
   b86d8:	4602      	mov	r2, r0
   b86da:	460b      	mov	r3, r1
   b86dc:	4620      	mov	r0, r4
   b86de:	4629      	mov	r1, r5
   b86e0:	f7fb fca2 	bl	b4028 <__aeabi_dsub>
   b86e4:	4606      	mov	r6, r0
   b86e6:	460f      	mov	r7, r1
   b86e8:	4632      	mov	r2, r6
   b86ea:	463b      	mov	r3, r7
   b86ec:	4620      	mov	r0, r4
   b86ee:	4629      	mov	r1, r5
   b86f0:	f7fb fe52 	bl	b4398 <__aeabi_dmul>
   b86f4:	4602      	mov	r2, r0
   b86f6:	460b      	mov	r3, r1
   b86f8:	4630      	mov	r0, r6
   b86fa:	4639      	mov	r1, r7
   b86fc:	4616      	mov	r6, r2
   b86fe:	461f      	mov	r7, r3
   b8700:	2200      	movs	r2, #0
   b8702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8706:	f7fb fc8f 	bl	b4028 <__aeabi_dsub>
   b870a:	4602      	mov	r2, r0
   b870c:	460b      	mov	r3, r1
   b870e:	4630      	mov	r0, r6
   b8710:	4639      	mov	r1, r7
   b8712:	f7fb ff6b 	bl	b45ec <__aeabi_ddiv>
   b8716:	4642      	mov	r2, r8
   b8718:	4606      	mov	r6, r0
   b871a:	460f      	mov	r7, r1
   b871c:	464b      	mov	r3, r9
   b871e:	4620      	mov	r0, r4
   b8720:	4629      	mov	r1, r5
   b8722:	f7fb fe39 	bl	b4398 <__aeabi_dmul>
   b8726:	4642      	mov	r2, r8
   b8728:	464b      	mov	r3, r9
   b872a:	f7fb fc7f 	bl	b402c <__adddf3>
   b872e:	4602      	mov	r2, r0
   b8730:	460b      	mov	r3, r1
   b8732:	4630      	mov	r0, r6
   b8734:	4639      	mov	r1, r7
   b8736:	f7fb fc77 	bl	b4028 <__aeabi_dsub>
   b873a:	4622      	mov	r2, r4
   b873c:	462b      	mov	r3, r5
   b873e:	f7fb fc73 	bl	b4028 <__aeabi_dsub>
   b8742:	4602      	mov	r2, r0
   b8744:	460b      	mov	r3, r1
   b8746:	2000      	movs	r0, #0
   b8748:	4941      	ldr	r1, [pc, #260]	; (b8850 <__ieee754_pow+0x920>)
   b874a:	f7fb fc6d 	bl	b4028 <__aeabi_dsub>
   b874e:	9a02      	ldr	r2, [sp, #8]
   b8750:	460b      	mov	r3, r1
   b8752:	4413      	add	r3, r2
   b8754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b8758:	f2c0 8143 	blt.w	b89e2 <__ieee754_pow+0xab2>
   b875c:	4619      	mov	r1, r3
   b875e:	ec53 2b18 	vmov	r2, r3, d8
   b8762:	f7fb fe19 	bl	b4398 <__aeabi_dmul>
   b8766:	ec41 0b10 	vmov	d0, r0, r1
   b876a:	e42d      	b.n	b7fc8 <__ieee754_pow+0x98>
   b876c:	f1bb 0f00 	cmp.w	fp, #0
   b8770:	f6ff aca0 	blt.w	b80b4 <__ieee754_pow+0x184>
   b8774:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b8830 <__ieee754_pow+0x900>
   b8778:	e426      	b.n	b7fc8 <__ieee754_pow+0x98>
   b877a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b8858 <__ieee754_pow+0x928>
   b877e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b8782:	4563      	cmp	r3, ip
   b8784:	f340 80e7 	ble.w	b8956 <__ieee754_pow+0xa26>
   b8788:	4b32      	ldr	r3, [pc, #200]	; (b8854 <__ieee754_pow+0x924>)
   b878a:	440b      	add	r3, r1
   b878c:	4303      	orrs	r3, r0
   b878e:	d10a      	bne.n	b87a6 <__ieee754_pow+0x876>
   b8790:	4622      	mov	r2, r4
   b8792:	462b      	mov	r3, r5
   b8794:	f7fb fc48 	bl	b4028 <__aeabi_dsub>
   b8798:	4632      	mov	r2, r6
   b879a:	463b      	mov	r3, r7
   b879c:	f7fc f882 	bl	b48a4 <__aeabi_dcmpge>
   b87a0:	2800      	cmp	r0, #0
   b87a2:	f43f aef3 	beq.w	b858c <__ieee754_pow+0x65c>
   b87a6:	a324      	add	r3, pc, #144	; (adr r3, b8838 <__ieee754_pow+0x908>)
   b87a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b87ac:	ec51 0b18 	vmov	r0, r1, d8
   b87b0:	f7fb fdf2 	bl	b4398 <__aeabi_dmul>
   b87b4:	a320      	add	r3, pc, #128	; (adr r3, b8838 <__ieee754_pow+0x908>)
   b87b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b87ba:	f7fb fded 	bl	b4398 <__aeabi_dmul>
   b87be:	ec41 0b10 	vmov	d0, r0, r1
   b87c2:	e401      	b.n	b7fc8 <__ieee754_pow+0x98>
   b87c4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b8840 <__ieee754_pow+0x910>
   b87c8:	eeb0 8a47 	vmov.f32	s16, s14
   b87cc:	eef0 8a67 	vmov.f32	s17, s15
   b87d0:	e686      	b.n	b84e0 <__ieee754_pow+0x5b0>
   b87d2:	f1bb 0f00 	cmp.w	fp, #0
   b87d6:	dacd      	bge.n	b8774 <__ieee754_pow+0x844>
   b87d8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b87dc:	ee00 6a10 	vmov	s0, r6
   b87e0:	ee00 3a90 	vmov	s1, r3
   b87e4:	f7ff bbf0 	b.w	b7fc8 <__ieee754_pow+0x98>
   b87e8:	652b82fe 	.word	0x652b82fe
   b87ec:	3c971547 	.word	0x3c971547
   b87f0:	00000000 	.word	0x00000000
   b87f4:	3fe62e43 	.word	0x3fe62e43
   b87f8:	fefa39ef 	.word	0xfefa39ef
   b87fc:	3fe62e42 	.word	0x3fe62e42
   b8800:	0ca86c39 	.word	0x0ca86c39
   b8804:	be205c61 	.word	0xbe205c61
   b8808:	72bea4d0 	.word	0x72bea4d0
   b880c:	3e663769 	.word	0x3e663769
   b8810:	c5d26bf1 	.word	0xc5d26bf1
   b8814:	3ebbbd41 	.word	0x3ebbbd41
   b8818:	af25de2c 	.word	0xaf25de2c
   b881c:	3f11566a 	.word	0x3f11566a
   b8820:	16bebd93 	.word	0x16bebd93
   b8824:	3f66c16c 	.word	0x3f66c16c
   b8828:	5555553e 	.word	0x5555553e
   b882c:	3fc55555 	.word	0x3fc55555
	...
   b8838:	c2f8f359 	.word	0xc2f8f359
   b883c:	01a56e1f 	.word	0x01a56e1f
   b8840:	00000000 	.word	0x00000000
   b8844:	3ff00000 	.word	0x3ff00000
   b8848:	408fffff 	.word	0x408fffff
   b884c:	000fffff 	.word	0x000fffff
   b8850:	3ff00000 	.word	0x3ff00000
   b8854:	3f6f3400 	.word	0x3f6f3400
   b8858:	4090cbff 	.word	0x4090cbff
   b885c:	4598      	cmp	r8, r3
   b885e:	db85      	blt.n	b876c <__ieee754_pow+0x83c>
   b8860:	4b7d      	ldr	r3, [pc, #500]	; (b8a58 <__ieee754_pow+0xb28>)
   b8862:	4598      	cmp	r8, r3
   b8864:	f73f ac22 	bgt.w	b80ac <__ieee754_pow+0x17c>
   b8868:	ec51 0b10 	vmov	r0, r1, d0
   b886c:	4b7a      	ldr	r3, [pc, #488]	; (b8a58 <__ieee754_pow+0xb28>)
   b886e:	2200      	movs	r2, #0
   b8870:	f7fb fbda 	bl	b4028 <__aeabi_dsub>
   b8874:	a368      	add	r3, pc, #416	; (adr r3, b8a18 <__ieee754_pow+0xae8>)
   b8876:	e9d3 2300 	ldrd	r2, r3, [r3]
   b887a:	4604      	mov	r4, r0
   b887c:	460d      	mov	r5, r1
   b887e:	f7fb fd8b 	bl	b4398 <__aeabi_dmul>
   b8882:	a367      	add	r3, pc, #412	; (adr r3, b8a20 <__ieee754_pow+0xaf0>)
   b8884:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8888:	4682      	mov	sl, r0
   b888a:	468b      	mov	fp, r1
   b888c:	4620      	mov	r0, r4
   b888e:	4629      	mov	r1, r5
   b8890:	f7fb fd82 	bl	b4398 <__aeabi_dmul>
   b8894:	4b71      	ldr	r3, [pc, #452]	; (b8a5c <__ieee754_pow+0xb2c>)
   b8896:	ec41 0b18 	vmov	d8, r0, r1
   b889a:	2200      	movs	r2, #0
   b889c:	4620      	mov	r0, r4
   b889e:	4629      	mov	r1, r5
   b88a0:	f7fb fd7a 	bl	b4398 <__aeabi_dmul>
   b88a4:	4602      	mov	r2, r0
   b88a6:	460b      	mov	r3, r1
   b88a8:	a15f      	add	r1, pc, #380	; (adr r1, b8a28 <__ieee754_pow+0xaf8>)
   b88aa:	e9d1 0100 	ldrd	r0, r1, [r1]
   b88ae:	f7fb fbbb 	bl	b4028 <__aeabi_dsub>
   b88b2:	4622      	mov	r2, r4
   b88b4:	462b      	mov	r3, r5
   b88b6:	f7fb fd6f 	bl	b4398 <__aeabi_dmul>
   b88ba:	4602      	mov	r2, r0
   b88bc:	460b      	mov	r3, r1
   b88be:	2000      	movs	r0, #0
   b88c0:	4967      	ldr	r1, [pc, #412]	; (b8a60 <__ieee754_pow+0xb30>)
   b88c2:	f7fb fbb1 	bl	b4028 <__aeabi_dsub>
   b88c6:	4622      	mov	r2, r4
   b88c8:	4680      	mov	r8, r0
   b88ca:	4689      	mov	r9, r1
   b88cc:	462b      	mov	r3, r5
   b88ce:	4620      	mov	r0, r4
   b88d0:	4629      	mov	r1, r5
   b88d2:	f7fb fd61 	bl	b4398 <__aeabi_dmul>
   b88d6:	4602      	mov	r2, r0
   b88d8:	460b      	mov	r3, r1
   b88da:	4640      	mov	r0, r8
   b88dc:	4649      	mov	r1, r9
   b88de:	f7fb fd5b 	bl	b4398 <__aeabi_dmul>
   b88e2:	a353      	add	r3, pc, #332	; (adr r3, b8a30 <__ieee754_pow+0xb00>)
   b88e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b88e8:	f7fb fd56 	bl	b4398 <__aeabi_dmul>
   b88ec:	4602      	mov	r2, r0
   b88ee:	460b      	mov	r3, r1
   b88f0:	ec51 0b18 	vmov	r0, r1, d8
   b88f4:	f7fb fb98 	bl	b4028 <__aeabi_dsub>
   b88f8:	4680      	mov	r8, r0
   b88fa:	4689      	mov	r9, r1
   b88fc:	4642      	mov	r2, r8
   b88fe:	464b      	mov	r3, r9
   b8900:	4650      	mov	r0, sl
   b8902:	4659      	mov	r1, fp
   b8904:	f7fb fb92 	bl	b402c <__adddf3>
   b8908:	2000      	movs	r0, #0
   b890a:	4652      	mov	r2, sl
   b890c:	465b      	mov	r3, fp
   b890e:	4604      	mov	r4, r0
   b8910:	460d      	mov	r5, r1
   b8912:	e591      	b.n	b8438 <__ieee754_pow+0x508>
   b8914:	4622      	mov	r2, r4
   b8916:	462b      	mov	r3, r5
   b8918:	4620      	mov	r0, r4
   b891a:	4629      	mov	r1, r5
   b891c:	f7fb fd3c 	bl	b4398 <__aeabi_dmul>
   b8920:	ec41 0b10 	vmov	d0, r0, r1
   b8924:	f7ff bb50 	b.w	b7fc8 <__ieee754_pow+0x98>
   b8928:	494b      	ldr	r1, [pc, #300]	; (b8a58 <__ieee754_pow+0xb28>)
   b892a:	2000      	movs	r0, #0
   b892c:	4622      	mov	r2, r4
   b892e:	462b      	mov	r3, r5
   b8930:	f7fb fe5c 	bl	b45ec <__aeabi_ddiv>
   b8934:	ec41 0b10 	vmov	d0, r0, r1
   b8938:	f7ff bb46 	b.w	b7fc8 <__ieee754_pow+0x98>
   b893c:	2b00      	cmp	r3, #0
   b893e:	d144      	bne.n	b89ca <__ieee754_pow+0xa9a>
   b8940:	f1c1 0114 	rsb	r1, r1, #20
   b8944:	fa4a f001 	asr.w	r0, sl, r1
   b8948:	fa00 f101 	lsl.w	r1, r0, r1
   b894c:	4551      	cmp	r1, sl
   b894e:	d05a      	beq.n	b8a06 <__ieee754_pow+0xad6>
   b8950:	9300      	str	r3, [sp, #0]
   b8952:	f7ff bb17 	b.w	b7f84 <__ieee754_pow+0x54>
   b8956:	4a42      	ldr	r2, [pc, #264]	; (b8a60 <__ieee754_pow+0xb30>)
   b8958:	4293      	cmp	r3, r2
   b895a:	dc5b      	bgt.n	b8a14 <__ieee754_pow+0xae4>
   b895c:	e9dd 1200 	ldrd	r1, r2, [sp]
   b8960:	9102      	str	r1, [sp, #8]
   b8962:	9100      	str	r1, [sp, #0]
   b8964:	e646      	b.n	b85f4 <__ieee754_pow+0x6c4>
   b8966:	a334      	add	r3, pc, #208	; (adr r3, b8a38 <__ieee754_pow+0xb08>)
   b8968:	e9d3 2300 	ldrd	r2, r3, [r3]
   b896c:	ec51 0b18 	vmov	r0, r1, d8
   b8970:	f7fb fd12 	bl	b4398 <__aeabi_dmul>
   b8974:	a330      	add	r3, pc, #192	; (adr r3, b8a38 <__ieee754_pow+0xb08>)
   b8976:	e9d3 2300 	ldrd	r2, r3, [r3]
   b897a:	f7fb fd0d 	bl	b4398 <__aeabi_dmul>
   b897e:	ec41 0b10 	vmov	d0, r0, r1
   b8982:	f7ff bb21 	b.w	b7fc8 <__ieee754_pow+0x98>
   b8986:	9b00      	ldr	r3, [sp, #0]
   b8988:	2b01      	cmp	r3, #1
   b898a:	f47f ab1d 	bne.w	b7fc8 <__ieee754_pow+0x98>
   b898e:	ee10 1a90 	vmov	r1, s1
   b8992:	ee10 2a10 	vmov	r2, s0
   b8996:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b899a:	ec43 2b10 	vmov	d0, r2, r3
   b899e:	f7ff bb13 	b.w	b7fc8 <__ieee754_pow+0x98>
   b89a2:	ed9f 7b27 	vldr	d7, [pc, #156]	; b8a40 <__ieee754_pow+0xb10>
   b89a6:	eeb0 ca47 	vmov.f32	s24, s14
   b89aa:	eef0 ca67 	vmov.f32	s25, s15
   b89ae:	ed9f 7b26 	vldr	d7, [pc, #152]	; b8a48 <__ieee754_pow+0xb18>
   b89b2:	eeb0 da47 	vmov.f32	s26, s14
   b89b6:	eef0 da67 	vmov.f32	s27, s15
   b89ba:	ed9f 7b25 	vldr	d7, [pc, #148]	; b8a50 <__ieee754_pow+0xb20>
   b89be:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b89c2:	ec53 2b17 	vmov	r2, r3, d7
   b89c6:	f7ff bbeb 	b.w	b81a0 <__ieee754_pow+0x270>
   b89ca:	ec45 4b10 	vmov	d0, r4, r5
   b89ce:	9200      	str	r2, [sp, #0]
   b89d0:	f000 f914 	bl	b8bfc <fabs>
   b89d4:	9a00      	ldr	r2, [sp, #0]
   b89d6:	2a00      	cmp	r2, #0
   b89d8:	f47f ab92 	bne.w	b8100 <__ieee754_pow+0x1d0>
   b89dc:	9200      	str	r2, [sp, #0]
   b89de:	f7ff bb26 	b.w	b802e <__ieee754_pow+0xfe>
   b89e2:	ec41 0b10 	vmov	d0, r0, r1
   b89e6:	9800      	ldr	r0, [sp, #0]
   b89e8:	f000 f9c2 	bl	b8d70 <scalbn>
   b89ec:	ec51 0b10 	vmov	r0, r1, d0
   b89f0:	e6b5      	b.n	b875e <__ieee754_pow+0x82e>
   b89f2:	f000 0001 	and.w	r0, r0, #1
   b89f6:	f1c0 0102 	rsb	r1, r0, #2
   b89fa:	9100      	str	r1, [sp, #0]
   b89fc:	2b00      	cmp	r3, #0
   b89fe:	f43f aac1 	beq.w	b7f84 <__ieee754_pow+0x54>
   b8a02:	f7ff bb0d 	b.w	b8020 <__ieee754_pow+0xf0>
   b8a06:	f000 0001 	and.w	r0, r0, #1
   b8a0a:	f1c0 0302 	rsb	r3, r0, #2
   b8a0e:	9300      	str	r3, [sp, #0]
   b8a10:	f7ff bab8 	b.w	b7f84 <__ieee754_pow+0x54>
   b8a14:	151b      	asrs	r3, r3, #20
   b8a16:	e5bb      	b.n	b8590 <__ieee754_pow+0x660>
   b8a18:	60000000 	.word	0x60000000
   b8a1c:	3ff71547 	.word	0x3ff71547
   b8a20:	f85ddf44 	.word	0xf85ddf44
   b8a24:	3e54ae0b 	.word	0x3e54ae0b
   b8a28:	55555555 	.word	0x55555555
   b8a2c:	3fd55555 	.word	0x3fd55555
   b8a30:	652b82fe 	.word	0x652b82fe
   b8a34:	3ff71547 	.word	0x3ff71547
   b8a38:	8800759c 	.word	0x8800759c
   b8a3c:	7e37e43c 	.word	0x7e37e43c
   b8a40:	40000000 	.word	0x40000000
   b8a44:	3fe2b803 	.word	0x3fe2b803
   b8a48:	43cfd006 	.word	0x43cfd006
   b8a4c:	3e4cfdeb 	.word	0x3e4cfdeb
   b8a50:	00000000 	.word	0x00000000
   b8a54:	3ff80000 	.word	0x3ff80000
   b8a58:	3ff00000 	.word	0x3ff00000
   b8a5c:	3fd00000 	.word	0x3fd00000
   b8a60:	3fe00000 	.word	0x3fe00000

000b8a64 <__ieee754_sqrt>:
   b8a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8a68:	4a63      	ldr	r2, [pc, #396]	; (b8bf8 <__ieee754_sqrt+0x194>)
   b8a6a:	ec55 4b10 	vmov	r4, r5, d0
   b8a6e:	43aa      	bics	r2, r5
   b8a70:	f000 809f 	beq.w	b8bb2 <__ieee754_sqrt+0x14e>
   b8a74:	2d00      	cmp	r5, #0
   b8a76:	ee10 ca10 	vmov	ip, s0
   b8a7a:	462b      	mov	r3, r5
   b8a7c:	dd54      	ble.n	b8b28 <__ieee754_sqrt+0xc4>
   b8a7e:	1529      	asrs	r1, r5, #20
   b8a80:	d063      	beq.n	b8b4a <__ieee754_sqrt+0xe6>
   b8a82:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b8a86:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b8a8a:	07c9      	lsls	r1, r1, #31
   b8a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8a90:	d404      	bmi.n	b8a9c <__ieee754_sqrt+0x38>
   b8a92:	005b      	lsls	r3, r3, #1
   b8a94:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8a98:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8a9c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b8aa0:	2600      	movs	r6, #0
   b8aa2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b8aa6:	107f      	asrs	r7, r7, #1
   b8aa8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8aac:	f04f 0e16 	mov.w	lr, #22
   b8ab0:	4634      	mov	r4, r6
   b8ab2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b8ab6:	18a1      	adds	r1, r4, r2
   b8ab8:	4299      	cmp	r1, r3
   b8aba:	dc02      	bgt.n	b8ac2 <__ieee754_sqrt+0x5e>
   b8abc:	1a5b      	subs	r3, r3, r1
   b8abe:	188c      	adds	r4, r1, r2
   b8ac0:	4416      	add	r6, r2
   b8ac2:	005b      	lsls	r3, r3, #1
   b8ac4:	f1be 0e01 	subs.w	lr, lr, #1
   b8ac8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8acc:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8ad0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8ad4:	d1ef      	bne.n	b8ab6 <__ieee754_sqrt+0x52>
   b8ad6:	4675      	mov	r5, lr
   b8ad8:	2020      	movs	r0, #32
   b8ada:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b8ade:	e00a      	b.n	b8af6 <__ieee754_sqrt+0x92>
   b8ae0:	d044      	beq.n	b8b6c <__ieee754_sqrt+0x108>
   b8ae2:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b8ae6:	3801      	subs	r0, #1
   b8ae8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b8aec:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8af0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8af4:	d043      	beq.n	b8b7e <__ieee754_sqrt+0x11a>
   b8af6:	42a3      	cmp	r3, r4
   b8af8:	eb02 010e 	add.w	r1, r2, lr
   b8afc:	ddf0      	ble.n	b8ae0 <__ieee754_sqrt+0x7c>
   b8afe:	2900      	cmp	r1, #0
   b8b00:	eb01 0e02 	add.w	lr, r1, r2
   b8b04:	db0a      	blt.n	b8b1c <__ieee754_sqrt+0xb8>
   b8b06:	46a0      	mov	r8, r4
   b8b08:	1b1b      	subs	r3, r3, r4
   b8b0a:	4561      	cmp	r1, ip
   b8b0c:	bf88      	it	hi
   b8b0e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b8b12:	ebac 0c01 	sub.w	ip, ip, r1
   b8b16:	4415      	add	r5, r2
   b8b18:	4644      	mov	r4, r8
   b8b1a:	e7e2      	b.n	b8ae2 <__ieee754_sqrt+0x7e>
   b8b1c:	f1be 0f00 	cmp.w	lr, #0
   b8b20:	dbf1      	blt.n	b8b06 <__ieee754_sqrt+0xa2>
   b8b22:	f104 0801 	add.w	r8, r4, #1
   b8b26:	e7ef      	b.n	b8b08 <__ieee754_sqrt+0xa4>
   b8b28:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b8b2c:	4322      	orrs	r2, r4
   b8b2e:	d038      	beq.n	b8ba2 <__ieee754_sqrt+0x13e>
   b8b30:	2d00      	cmp	r5, #0
   b8b32:	d14e      	bne.n	b8bd2 <__ieee754_sqrt+0x16e>
   b8b34:	4629      	mov	r1, r5
   b8b36:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b8b3a:	3915      	subs	r1, #21
   b8b3c:	4613      	mov	r3, r2
   b8b3e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b8b42:	2a00      	cmp	r2, #0
   b8b44:	d0f7      	beq.n	b8b36 <__ieee754_sqrt+0xd2>
   b8b46:	02d6      	lsls	r6, r2, #11
   b8b48:	d450      	bmi.n	b8bec <__ieee754_sqrt+0x188>
   b8b4a:	2000      	movs	r0, #0
   b8b4c:	005b      	lsls	r3, r3, #1
   b8b4e:	02dd      	lsls	r5, r3, #11
   b8b50:	4604      	mov	r4, r0
   b8b52:	f100 0001 	add.w	r0, r0, #1
   b8b56:	d5f9      	bpl.n	b8b4c <__ieee754_sqrt+0xe8>
   b8b58:	461a      	mov	r2, r3
   b8b5a:	4663      	mov	r3, ip
   b8b5c:	fa0c fc00 	lsl.w	ip, ip, r0
   b8b60:	f1c0 0020 	rsb	r0, r0, #32
   b8b64:	40c3      	lsrs	r3, r0
   b8b66:	1b09      	subs	r1, r1, r4
   b8b68:	4313      	orrs	r3, r2
   b8b6a:	e78a      	b.n	b8a82 <__ieee754_sqrt+0x1e>
   b8b6c:	4561      	cmp	r1, ip
   b8b6e:	d8b8      	bhi.n	b8ae2 <__ieee754_sqrt+0x7e>
   b8b70:	2900      	cmp	r1, #0
   b8b72:	eb01 0e02 	add.w	lr, r1, r2
   b8b76:	dbd1      	blt.n	b8b1c <__ieee754_sqrt+0xb8>
   b8b78:	4698      	mov	r8, r3
   b8b7a:	2300      	movs	r3, #0
   b8b7c:	e7c9      	b.n	b8b12 <__ieee754_sqrt+0xae>
   b8b7e:	ea53 030c 	orrs.w	r3, r3, ip
   b8b82:	d110      	bne.n	b8ba6 <__ieee754_sqrt+0x142>
   b8b84:	0868      	lsrs	r0, r5, #1
   b8b86:	1071      	asrs	r1, r6, #1
   b8b88:	07f3      	lsls	r3, r6, #31
   b8b8a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b8b8e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b8b92:	bf48      	it	mi
   b8b94:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b8b98:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b8b9c:	4602      	mov	r2, r0
   b8b9e:	ec43 2b10 	vmov	d0, r2, r3
   b8ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8ba6:	1c6a      	adds	r2, r5, #1
   b8ba8:	bf16      	itet	ne
   b8baa:	1c68      	addne	r0, r5, #1
   b8bac:	3601      	addeq	r6, #1
   b8bae:	0840      	lsrne	r0, r0, #1
   b8bb0:	e7e9      	b.n	b8b86 <__ieee754_sqrt+0x122>
   b8bb2:	ee10 2a10 	vmov	r2, s0
   b8bb6:	ee10 0a10 	vmov	r0, s0
   b8bba:	462b      	mov	r3, r5
   b8bbc:	4629      	mov	r1, r5
   b8bbe:	f7fb fbeb 	bl	b4398 <__aeabi_dmul>
   b8bc2:	4622      	mov	r2, r4
   b8bc4:	462b      	mov	r3, r5
   b8bc6:	f7fb fa31 	bl	b402c <__adddf3>
   b8bca:	ec41 0b10 	vmov	d0, r0, r1
   b8bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8bd2:	ee10 2a10 	vmov	r2, s0
   b8bd6:	4620      	mov	r0, r4
   b8bd8:	4629      	mov	r1, r5
   b8bda:	f7fb fa25 	bl	b4028 <__aeabi_dsub>
   b8bde:	4602      	mov	r2, r0
   b8be0:	460b      	mov	r3, r1
   b8be2:	f7fb fd03 	bl	b45ec <__aeabi_ddiv>
   b8be6:	ec41 0b10 	vmov	d0, r0, r1
   b8bea:	e7da      	b.n	b8ba2 <__ieee754_sqrt+0x13e>
   b8bec:	4663      	mov	r3, ip
   b8bee:	2020      	movs	r0, #32
   b8bf0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8bf4:	e7b6      	b.n	b8b64 <__ieee754_sqrt+0x100>
   b8bf6:	bf00      	nop
   b8bf8:	7ff00000 	.word	0x7ff00000

000b8bfc <fabs>:
   b8bfc:	ec51 0b10 	vmov	r0, r1, d0
   b8c00:	ee10 2a10 	vmov	r2, s0
   b8c04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b8c08:	ec43 2b10 	vmov	d0, r2, r3
   b8c0c:	4770      	bx	lr
   b8c0e:	bf00      	nop

000b8c10 <finite>:
   b8c10:	b082      	sub	sp, #8
   b8c12:	ed8d 0b00 	vstr	d0, [sp]
   b8c16:	9801      	ldr	r0, [sp, #4]
   b8c18:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b8c1c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b8c20:	0fc0      	lsrs	r0, r0, #31
   b8c22:	b002      	add	sp, #8
   b8c24:	4770      	bx	lr
   b8c26:	bf00      	nop

000b8c28 <nan>:
   b8c28:	ed9f 0b01 	vldr	d0, [pc, #4]	; b8c30 <nan+0x8>
   b8c2c:	4770      	bx	lr
   b8c2e:	bf00      	nop
   b8c30:	00000000 	.word	0x00000000
   b8c34:	7ff80000 	.word	0x7ff80000

000b8c38 <rint>:
   b8c38:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8c3a:	ec53 2b10 	vmov	r2, r3, d0
   b8c3e:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b8c42:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b8c46:	2913      	cmp	r1, #19
   b8c48:	ee10 0a10 	vmov	r0, s0
   b8c4c:	b083      	sub	sp, #12
   b8c4e:	461c      	mov	r4, r3
   b8c50:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b8c54:	dc3a      	bgt.n	b8ccc <rint+0x94>
   b8c56:	2900      	cmp	r1, #0
   b8c58:	db30      	blt.n	b8cbc <rint+0x84>
   b8c5a:	4d42      	ldr	r5, [pc, #264]	; (b8d64 <rint+0x12c>)
   b8c5c:	fa45 fc01 	asr.w	ip, r5, r1
   b8c60:	ea03 050c 	and.w	r5, r3, ip
   b8c64:	4315      	orrs	r5, r2
   b8c66:	d02d      	beq.n	b8cc4 <rint+0x8c>
   b8c68:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b8c6c:	4318      	orrs	r0, r3
   b8c6e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b8c72:	d00c      	beq.n	b8c8e <rint+0x56>
   b8c74:	ea24 0c0c 	bic.w	ip, r4, ip
   b8c78:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b8c7c:	2913      	cmp	r1, #19
   b8c7e:	fa44 f101 	asr.w	r1, r4, r1
   b8c82:	bf0c      	ite	eq
   b8c84:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b8c88:	2000      	movne	r0, #0
   b8c8a:	ea4c 0401 	orr.w	r4, ip, r1
   b8c8e:	4936      	ldr	r1, [pc, #216]	; (b8d68 <rint+0x130>)
   b8c90:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b8c94:	4623      	mov	r3, r4
   b8c96:	e9de 4500 	ldrd	r4, r5, [lr]
   b8c9a:	4602      	mov	r2, r0
   b8c9c:	4629      	mov	r1, r5
   b8c9e:	4620      	mov	r0, r4
   b8ca0:	f7fb f9c4 	bl	b402c <__adddf3>
   b8ca4:	e9cd 0100 	strd	r0, r1, [sp]
   b8ca8:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8cac:	4622      	mov	r2, r4
   b8cae:	462b      	mov	r3, r5
   b8cb0:	f7fb f9ba 	bl	b4028 <__aeabi_dsub>
   b8cb4:	ec41 0b10 	vmov	d0, r0, r1
   b8cb8:	b003      	add	sp, #12
   b8cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8cbc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b8cc0:	4311      	orrs	r1, r2
   b8cc2:	d124      	bne.n	b8d0e <rint+0xd6>
   b8cc4:	ec43 2b10 	vmov	d0, r2, r3
   b8cc8:	b003      	add	sp, #12
   b8cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8ccc:	2933      	cmp	r1, #51	; 0x33
   b8cce:	dd08      	ble.n	b8ce2 <rint+0xaa>
   b8cd0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b8cd4:	d1f6      	bne.n	b8cc4 <rint+0x8c>
   b8cd6:	4619      	mov	r1, r3
   b8cd8:	f7fb f9a8 	bl	b402c <__adddf3>
   b8cdc:	ec41 0b10 	vmov	d0, r0, r1
   b8ce0:	e7f2      	b.n	b8cc8 <rint+0x90>
   b8ce2:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b8ce6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b8cea:	fa21 f10c 	lsr.w	r1, r1, ip
   b8cee:	420a      	tst	r2, r1
   b8cf0:	d0e8      	beq.n	b8cc4 <rint+0x8c>
   b8cf2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b8cf6:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b8cfa:	d0c8      	beq.n	b8c8e <rint+0x56>
   b8cfc:	ea20 0303 	bic.w	r3, r0, r3
   b8d00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b8d04:	fa40 fc0c 	asr.w	ip, r0, ip
   b8d08:	ea43 000c 	orr.w	r0, r3, ip
   b8d0c:	e7bf      	b.n	b8c8e <rint+0x56>
   b8d0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b8d12:	4318      	orrs	r0, r3
   b8d14:	4a14      	ldr	r2, [pc, #80]	; (b8d68 <rint+0x130>)
   b8d16:	4243      	negs	r3, r0
   b8d18:	4303      	orrs	r3, r0
   b8d1a:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b8d1e:	0b1b      	lsrs	r3, r3, #12
   b8d20:	0c62      	lsrs	r2, r4, #17
   b8d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b8d26:	0452      	lsls	r2, r2, #17
   b8d28:	ea43 0702 	orr.w	r7, r3, r2
   b8d2c:	463b      	mov	r3, r7
   b8d2e:	e9de 6700 	ldrd	r6, r7, [lr]
   b8d32:	ee10 2a10 	vmov	r2, s0
   b8d36:	4630      	mov	r0, r6
   b8d38:	4639      	mov	r1, r7
   b8d3a:	f7fb f977 	bl	b402c <__adddf3>
   b8d3e:	e9cd 0100 	strd	r0, r1, [sp]
   b8d42:	4632      	mov	r2, r6
   b8d44:	463b      	mov	r3, r7
   b8d46:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8d4a:	f7fb f96d 	bl	b4028 <__aeabi_dsub>
   b8d4e:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b8d52:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8d56:	4602      	mov	r2, r0
   b8d58:	ea41 0304 	orr.w	r3, r1, r4
   b8d5c:	ec43 2b10 	vmov	d0, r2, r3
   b8d60:	b003      	add	sp, #12
   b8d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8d64:	000fffff 	.word	0x000fffff
   b8d68:	000ba1f8 	.word	0x000ba1f8
   b8d6c:	00000000 	.word	0x00000000

000b8d70 <scalbn>:
   b8d70:	b538      	push	{r3, r4, r5, lr}
   b8d72:	ec53 2b10 	vmov	r2, r3, d0
   b8d76:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b8d7a:	4604      	mov	r4, r0
   b8d7c:	469c      	mov	ip, r3
   b8d7e:	bb89      	cbnz	r1, b8de4 <scalbn+0x74>
   b8d80:	ee10 1a10 	vmov	r1, s0
   b8d84:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b8d88:	ea5c 0101 	orrs.w	r1, ip, r1
   b8d8c:	d029      	beq.n	b8de2 <scalbn+0x72>
   b8d8e:	4619      	mov	r1, r3
   b8d90:	2200      	movs	r2, #0
   b8d92:	4b3d      	ldr	r3, [pc, #244]	; (b8e88 <scalbn+0x118>)
   b8d94:	4d3d      	ldr	r5, [pc, #244]	; (b8e8c <scalbn+0x11c>)
   b8d96:	ee10 0a10 	vmov	r0, s0
   b8d9a:	f7fb fafd 	bl	b4398 <__aeabi_dmul>
   b8d9e:	42ac      	cmp	r4, r5
   b8da0:	4602      	mov	r2, r0
   b8da2:	460b      	mov	r3, r1
   b8da4:	db16      	blt.n	b8dd4 <scalbn+0x64>
   b8da6:	468c      	mov	ip, r1
   b8da8:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b8dac:	3936      	subs	r1, #54	; 0x36
   b8dae:	4421      	add	r1, r4
   b8db0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b8db4:	4281      	cmp	r1, r0
   b8db6:	dc21      	bgt.n	b8dfc <scalbn+0x8c>
   b8db8:	2900      	cmp	r1, #0
   b8dba:	dc47      	bgt.n	b8e4c <scalbn+0xdc>
   b8dbc:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b8dc0:	da34      	bge.n	b8e2c <scalbn+0xbc>
   b8dc2:	f24c 3150 	movw	r1, #50000	; 0xc350
   b8dc6:	428c      	cmp	r4, r1
   b8dc8:	dc18      	bgt.n	b8dfc <scalbn+0x8c>
   b8dca:	2b00      	cmp	r3, #0
   b8dcc:	a126      	add	r1, pc, #152	; (adr r1, b8e68 <scalbn+0xf8>)
   b8dce:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8dd2:	db44      	blt.n	b8e5e <scalbn+0xee>
   b8dd4:	a324      	add	r3, pc, #144	; (adr r3, b8e68 <scalbn+0xf8>)
   b8dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8dda:	f7fb fadd 	bl	b4398 <__aeabi_dmul>
   b8dde:	ec41 0b10 	vmov	d0, r0, r1
   b8de2:	bd38      	pop	{r3, r4, r5, pc}
   b8de4:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b8de8:	4281      	cmp	r1, r0
   b8dea:	d1e0      	bne.n	b8dae <scalbn+0x3e>
   b8dec:	ee10 0a10 	vmov	r0, s0
   b8df0:	4619      	mov	r1, r3
   b8df2:	f7fb f91b 	bl	b402c <__adddf3>
   b8df6:	ec41 0b10 	vmov	d0, r0, r1
   b8dfa:	bd38      	pop	{r3, r4, r5, pc}
   b8dfc:	2b00      	cmp	r3, #0
   b8dfe:	a11c      	add	r1, pc, #112	; (adr r1, b8e70 <scalbn+0x100>)
   b8e00:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8e04:	db07      	blt.n	b8e16 <scalbn+0xa6>
   b8e06:	a31a      	add	r3, pc, #104	; (adr r3, b8e70 <scalbn+0x100>)
   b8e08:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8e0c:	f7fb fac4 	bl	b4398 <__aeabi_dmul>
   b8e10:	ec41 0b10 	vmov	d0, r0, r1
   b8e14:	bd38      	pop	{r3, r4, r5, pc}
   b8e16:	a118      	add	r1, pc, #96	; (adr r1, b8e78 <scalbn+0x108>)
   b8e18:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8e1c:	a314      	add	r3, pc, #80	; (adr r3, b8e70 <scalbn+0x100>)
   b8e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8e22:	f7fb fab9 	bl	b4398 <__aeabi_dmul>
   b8e26:	ec41 0b10 	vmov	d0, r0, r1
   b8e2a:	e7f3      	b.n	b8e14 <scalbn+0xa4>
   b8e2c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b8e30:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b8e34:	3136      	adds	r1, #54	; 0x36
   b8e36:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b8e3a:	4610      	mov	r0, r2
   b8e3c:	4619      	mov	r1, r3
   b8e3e:	2200      	movs	r2, #0
   b8e40:	4b13      	ldr	r3, [pc, #76]	; (b8e90 <scalbn+0x120>)
   b8e42:	f7fb faa9 	bl	b4398 <__aeabi_dmul>
   b8e46:	ec41 0b10 	vmov	d0, r0, r1
   b8e4a:	bd38      	pop	{r3, r4, r5, pc}
   b8e4c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b8e50:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b8e54:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b8e58:	ec43 2b10 	vmov	d0, r2, r3
   b8e5c:	bd38      	pop	{r3, r4, r5, pc}
   b8e5e:	a108      	add	r1, pc, #32	; (adr r1, b8e80 <scalbn+0x110>)
   b8e60:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8e64:	e7b6      	b.n	b8dd4 <scalbn+0x64>
   b8e66:	bf00      	nop
   b8e68:	c2f8f359 	.word	0xc2f8f359
   b8e6c:	01a56e1f 	.word	0x01a56e1f
   b8e70:	8800759c 	.word	0x8800759c
   b8e74:	7e37e43c 	.word	0x7e37e43c
   b8e78:	8800759c 	.word	0x8800759c
   b8e7c:	fe37e43c 	.word	0xfe37e43c
   b8e80:	c2f8f359 	.word	0xc2f8f359
   b8e84:	81a56e1f 	.word	0x81a56e1f
   b8e88:	43500000 	.word	0x43500000
   b8e8c:	ffff3cb0 	.word	0xffff3cb0
   b8e90:	3c900000 	.word	0x3c900000

000b8e94 <atexit>:
   b8e94:	2300      	movs	r3, #0
   b8e96:	4601      	mov	r1, r0
   b8e98:	461a      	mov	r2, r3
   b8e9a:	4618      	mov	r0, r3
   b8e9c:	f000 b86a 	b.w	b8f74 <__register_exitproc>

000b8ea0 <memcpy>:
   b8ea0:	440a      	add	r2, r1
   b8ea2:	4291      	cmp	r1, r2
   b8ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8ea8:	d100      	bne.n	b8eac <memcpy+0xc>
   b8eaa:	4770      	bx	lr
   b8eac:	b510      	push	{r4, lr}
   b8eae:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8eb6:	4291      	cmp	r1, r2
   b8eb8:	d1f9      	bne.n	b8eae <memcpy+0xe>
   b8eba:	bd10      	pop	{r4, pc}

000b8ebc <memset>:
   b8ebc:	4402      	add	r2, r0
   b8ebe:	4603      	mov	r3, r0
   b8ec0:	4293      	cmp	r3, r2
   b8ec2:	d100      	bne.n	b8ec6 <memset+0xa>
   b8ec4:	4770      	bx	lr
   b8ec6:	f803 1b01 	strb.w	r1, [r3], #1
   b8eca:	e7f9      	b.n	b8ec0 <memset+0x4>

000b8ecc <srand>:
   b8ecc:	b538      	push	{r3, r4, r5, lr}
   b8ece:	4b10      	ldr	r3, [pc, #64]	; (b8f10 <srand+0x44>)
   b8ed0:	681d      	ldr	r5, [r3, #0]
   b8ed2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8ed4:	4604      	mov	r4, r0
   b8ed6:	b9b3      	cbnz	r3, b8f06 <srand+0x3a>
   b8ed8:	2018      	movs	r0, #24
   b8eda:	f7fd fb4f 	bl	b657c <malloc>
   b8ede:	4602      	mov	r2, r0
   b8ee0:	63a8      	str	r0, [r5, #56]	; 0x38
   b8ee2:	b920      	cbnz	r0, b8eee <srand+0x22>
   b8ee4:	4b0b      	ldr	r3, [pc, #44]	; (b8f14 <srand+0x48>)
   b8ee6:	480c      	ldr	r0, [pc, #48]	; (b8f18 <srand+0x4c>)
   b8ee8:	2142      	movs	r1, #66	; 0x42
   b8eea:	f7fd fb7f 	bl	b65ec <__assert_func>
   b8eee:	490b      	ldr	r1, [pc, #44]	; (b8f1c <srand+0x50>)
   b8ef0:	4b0b      	ldr	r3, [pc, #44]	; (b8f20 <srand+0x54>)
   b8ef2:	e9c0 1300 	strd	r1, r3, [r0]
   b8ef6:	4b0b      	ldr	r3, [pc, #44]	; (b8f24 <srand+0x58>)
   b8ef8:	6083      	str	r3, [r0, #8]
   b8efa:	230b      	movs	r3, #11
   b8efc:	8183      	strh	r3, [r0, #12]
   b8efe:	2100      	movs	r1, #0
   b8f00:	2001      	movs	r0, #1
   b8f02:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8f06:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8f08:	2200      	movs	r2, #0
   b8f0a:	611c      	str	r4, [r3, #16]
   b8f0c:	615a      	str	r2, [r3, #20]
   b8f0e:	bd38      	pop	{r3, r4, r5, pc}
   b8f10:	2003e5a0 	.word	0x2003e5a0
   b8f14:	000ba208 	.word	0x000ba208
   b8f18:	000ba21f 	.word	0x000ba21f
   b8f1c:	abcd330e 	.word	0xabcd330e
   b8f20:	e66d1234 	.word	0xe66d1234
   b8f24:	0005deec 	.word	0x0005deec

000b8f28 <strcpy>:
   b8f28:	4603      	mov	r3, r0
   b8f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8f2e:	f803 2b01 	strb.w	r2, [r3], #1
   b8f32:	2a00      	cmp	r2, #0
   b8f34:	d1f9      	bne.n	b8f2a <strcpy+0x2>
   b8f36:	4770      	bx	lr

000b8f38 <strdup>:
   b8f38:	4b02      	ldr	r3, [pc, #8]	; (b8f44 <strdup+0xc>)
   b8f3a:	4601      	mov	r1, r0
   b8f3c:	6818      	ldr	r0, [r3, #0]
   b8f3e:	f000 b803 	b.w	b8f48 <_strdup_r>
   b8f42:	bf00      	nop
   b8f44:	2003e5a0 	.word	0x2003e5a0

000b8f48 <_strdup_r>:
   b8f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8f4a:	4604      	mov	r4, r0
   b8f4c:	4608      	mov	r0, r1
   b8f4e:	460d      	mov	r5, r1
   b8f50:	f7fc f868 	bl	b5024 <strlen>
   b8f54:	1c42      	adds	r2, r0, #1
   b8f56:	4611      	mov	r1, r2
   b8f58:	4620      	mov	r0, r4
   b8f5a:	9201      	str	r2, [sp, #4]
   b8f5c:	f7fd fb36 	bl	b65cc <_malloc_r>
   b8f60:	4604      	mov	r4, r0
   b8f62:	b118      	cbz	r0, b8f6c <_strdup_r+0x24>
   b8f64:	9a01      	ldr	r2, [sp, #4]
   b8f66:	4629      	mov	r1, r5
   b8f68:	f7ff ff9a 	bl	b8ea0 <memcpy>
   b8f6c:	4620      	mov	r0, r4
   b8f6e:	b003      	add	sp, #12
   b8f70:	bd30      	pop	{r4, r5, pc}
	...

000b8f74 <__register_exitproc>:
   b8f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8f78:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9034 <__register_exitproc+0xc0>
   b8f7c:	4606      	mov	r6, r0
   b8f7e:	f8d8 0000 	ldr.w	r0, [r8]
   b8f82:	461f      	mov	r7, r3
   b8f84:	460d      	mov	r5, r1
   b8f86:	4691      	mov	r9, r2
   b8f88:	f000 f856 	bl	b9038 <__retarget_lock_acquire_recursive>
   b8f8c:	4b25      	ldr	r3, [pc, #148]	; (b9024 <__register_exitproc+0xb0>)
   b8f8e:	681c      	ldr	r4, [r3, #0]
   b8f90:	b934      	cbnz	r4, b8fa0 <__register_exitproc+0x2c>
   b8f92:	4c25      	ldr	r4, [pc, #148]	; (b9028 <__register_exitproc+0xb4>)
   b8f94:	601c      	str	r4, [r3, #0]
   b8f96:	4b25      	ldr	r3, [pc, #148]	; (b902c <__register_exitproc+0xb8>)
   b8f98:	b113      	cbz	r3, b8fa0 <__register_exitproc+0x2c>
   b8f9a:	681b      	ldr	r3, [r3, #0]
   b8f9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8fa0:	6863      	ldr	r3, [r4, #4]
   b8fa2:	2b1f      	cmp	r3, #31
   b8fa4:	dd07      	ble.n	b8fb6 <__register_exitproc+0x42>
   b8fa6:	f8d8 0000 	ldr.w	r0, [r8]
   b8faa:	f000 f847 	bl	b903c <__retarget_lock_release_recursive>
   b8fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8fb6:	b34e      	cbz	r6, b900c <__register_exitproc+0x98>
   b8fb8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8fbc:	b988      	cbnz	r0, b8fe2 <__register_exitproc+0x6e>
   b8fbe:	4b1c      	ldr	r3, [pc, #112]	; (b9030 <__register_exitproc+0xbc>)
   b8fc0:	b923      	cbnz	r3, b8fcc <__register_exitproc+0x58>
   b8fc2:	f8d8 0000 	ldr.w	r0, [r8]
   b8fc6:	f000 f838 	bl	b903a <__retarget_lock_release>
   b8fca:	e7f0      	b.n	b8fae <__register_exitproc+0x3a>
   b8fcc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8fd0:	f7fd fad4 	bl	b657c <malloc>
   b8fd4:	2800      	cmp	r0, #0
   b8fd6:	d0f4      	beq.n	b8fc2 <__register_exitproc+0x4e>
   b8fd8:	2300      	movs	r3, #0
   b8fda:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8fde:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8fe2:	6863      	ldr	r3, [r4, #4]
   b8fe4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8fe8:	2201      	movs	r2, #1
   b8fea:	409a      	lsls	r2, r3
   b8fec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8ff0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8ff4:	4313      	orrs	r3, r2
   b8ff6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8ffa:	2e02      	cmp	r6, #2
   b8ffc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9000:	bf02      	ittt	eq
   b9002:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9006:	4313      	orreq	r3, r2
   b9008:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b900c:	6863      	ldr	r3, [r4, #4]
   b900e:	f8d8 0000 	ldr.w	r0, [r8]
   b9012:	1c5a      	adds	r2, r3, #1
   b9014:	3302      	adds	r3, #2
   b9016:	6062      	str	r2, [r4, #4]
   b9018:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b901c:	f000 f80e 	bl	b903c <__retarget_lock_release_recursive>
   b9020:	2000      	movs	r0, #0
   b9022:	e7c6      	b.n	b8fb2 <__register_exitproc+0x3e>
   b9024:	2003e7e8 	.word	0x2003e7e8
   b9028:	2003e75c 	.word	0x2003e75c
   b902c:	00000000 	.word	0x00000000
   b9030:	000b657d 	.word	0x000b657d
   b9034:	2003e604 	.word	0x2003e604

000b9038 <__retarget_lock_acquire_recursive>:
   b9038:	4770      	bx	lr

000b903a <__retarget_lock_release>:
   b903a:	4770      	bx	lr

000b903c <__retarget_lock_release_recursive>:
   b903c:	4770      	bx	lr

000b903e <link_code_end>:
	...

000b9040 <dynalib_user>:
   b9040:	5035 000b 5071 000b 5099 000b 509d 000b     5P..qP...P...P..
   b9050:	0000 0000 4e4f 4c00 6769 7468 0073 464f     ....ON.Lights.OF
   b9060:	0046 654c 6576 006c 6142 7474 7b00 7422     F.Level.Batt.{"t
   b9070:	6d65 2270 203a 2c00 2220 7568 226d 203a     emp": ., "hum": 
   b9080:	2c00 2220 7270 7365 7573 6572 3a22 0020     ., "pressure": .
   b9090:	202c 6122 746c 7469 6475 2265 203a 7d00     , "altitude": .}
   b90a0:	4200 454d 6144 6174                          .BMEData.

000b90a9 <_ZL12sevensegment>:
   b90a9:	100a 0d2e 1e01 0000 0000 0000 0000 0000     ................
	...
   b90c1:	0000 fc78 0302 0303 0203 78fc 0000 0000     ..x........x....
   b90d1:	0000 0000 7eff 0000 8302 8383 0283 78fc     .....~.........x
   b90e1:	0000 8302 8383 0283 78fc ff7e 8000 8080     .........x~.....
   b90f1:	0080 7eff fc78 8302 8383 0283 0000 fc78     ...~x.........x.
   b9101:	8302 8383 0283 0000 0200 0303 0303 0203     ................
   b9111:	78fc fc78 8302 8383 0283 78fc fc78 8302     .xx........xx...
   b9121:	8383 0283 78fc 0000 0000 3c18 183c 0000     .....x.....<<...
   b9131:	0000 6000 f0f0 0060 0000 0000 0000 0000     ...`..`.........
   b9141:	0000 0000 3f1e c040 c0c0 40c0 1e3f 0000     .....?@....@?...
   b9151:	0000 0000 0000 7eff 3e1c c141 c1c1 41c1     .......~.>A....A
   b9161:	0000 0000 c141 c1c1 41c1 1c3e 0000 0101     ....A....A>.....
   b9171:	0101 0101 7eff 0000 c141 c1c1 41c1 1c3e     .....~..A....A>.
   b9181:	3e1c c141 c1c1 41c1 1c3e 0000 0000 0000     .>A....A>.......
   b9191:	0000 7eff 3e1c c141 c1c1 41c1 1c3e 0000     ...~.>A....A>...
   b91a1:	c141 c1c1 41c1 1c3e 0000 0000 3c18 183c     A....A>......<<.
	...

000b91b3 <_ZL15fontlargenumber>:
   b91b3:	300c 0b30 2001 c000 7cf8 3e3e f8fc 00c0     .00.. ...|>>....
   b91c3:	0000 0000 e080 fe78 00fe 0000 0000 f000     ......x.........
   b91d3:	3c7c 3e3e fcfe 00e0 0000 7c00 3e3e fe3e     |<>>.......|>>>.
   b91e3:	c0f8 0000 0000 0000 0000 f800 fefe 0000     ................
   b91f3:	0000 fe00 3efe 3e3e 3e3e 0000 0000 0000     .....>>>>>......
   b9203:	f080 3efc 3e3e 00fc 0000 3e00 3e3e 3e3e     ...>>>.....>>>>>
   b9213:	3e3e fefe 0000 0000 f8c0 3efe fc7e 00e0     >>.........>~...
   b9223:	0000 0000 fce0 3e7e f8fe 00c0 0000 0000     ......~>........
   b9233:	0000 e0c0 00c0 0000 0000 fff0 000f 0000     ................
   b9243:	fff9 f0ff 0000 0000 0307 ff00 00ff 0000     ................
   b9253:	0000 0100 0000 0000 ff00 00ff 0000 0000     ................
   b9263:	0000 0000 ffff 0000 0000 0000 e000 1fff     ................
   b9273:	ffff 0000 0000 ff00 00ff 0000 0000 0000     ................
   b9283:	0000 e000 3fff 0000 0000 0000 0000 0000     .....?..........
   b9293:	0000 0000 fcc0 037f 0000 0000 ffff 0000     ................
   b92a3:	ff00 00ff 0000 fe00 03ff 0000 ff00 f0ff     ................
   b92b3:	0000 0000 0000 7f3f 003f 0000 0000 ffff     ......?.?.......
   b92c3:	0000 ffe0 001f ffff 0000 0000 0000 ff00     ................
   b92d3:	00ff 0000 0000 0000 0000 e000 1ffe 0001     ................
   b92e3:	0000 0000 f8f8 fffc 00c7 0000 0000 c000     ................
   b92f3:	3ffe 0003 ffff 0000 0000 3f00 3e3f fc7e     .?.........??>~.
   b9303:	e0f8 0000 0000 ff00 80ff 7cf0 f87c 00f0     ...........||...
   b9313:	0000 0000 0000 f880 07ff 0000 0000 0000     ................
   b9323:	9f01 f8ff 1ffe 0001 0000 ff00 c0ff 0000     ................
   b9333:	ff80 ffff 0000 0000 0000 0000 0000 0000     ................
   b9343:	0000 ffff fcc0 037f 0000 ffff 0000 0000     ................
   b9353:	0000 ff00 00ff 0000 0000 0000 e000 0ffe     ................
   b9363:	0001 0000 0000 0000 0000 0100 ff0f 00f8     ................
   b9373:	0000 fff8 e0e7 e0e0 ffff e0e0 00e0 0000     ................
   b9383:	0000 0000 ff07 00fe 0000 ff00 ffff 0003     ................
   b9393:	0100 ffff 0000 0000 f000 0fff 0000 0000     ................
   b93a3:	0000 c000 3ffc 0303 ff1f c0fc 0000 0000     .....?..........
   b93b3:	1f0f 3e3e 010f ffff 0000 0000 0000 8000     ..>>............
   b93c3:	0000 0000 0000 ff07 07ff 0000 fc00 07ff     ................
   b93d3:	0000 0000 0000 ff00 00ff 0000 0000 e000     ................
   b93e3:	0ffe 0000 0000 0000 0000 0000 0000 0000     ................
   b93f3:	ffc0 007f 0000 0303 0303 0303 ffff 0303     ................
   b9403:	0003 0000 0000 0000 ffc0 007f 0000 0f00     ................
   b9413:	ffff 0080 8000 7fff 0000 0000 fffe 0003     ................
   b9423:	0000 0000 0000 ff00 80ff 0000 8000 ffff     ................
	...
   b943b:	fc80 07ff 0000 0000 0000 ffff 00ff 0000     ................
   b944b:	0000 0300 3f1f 7c7c 1f3f 0003 0000 0000     .....?||?.......
   b945b:	7c7c 7f7c 7c7f 7c7c 0000 7f00 7c7f 7c7c     |||..|||.....|||
   b946b:	7c7c 007c 0000 3f00 7c7e 7e7c 071f 0000     |||....?~||~....
	...
   b9483:	7f7f 0000 0000 1f00 7c3e 3e7c 071f 0000     ........>||>....
   b9493:	0000 0000 1f03 7c7f 3f7c 0007 0000 0000     .......||?......
   b94a3:	7f7f 0000 0000 0000 0000 0100 3f1f 7c7e     .............?~|
   b94b3:	3f7e 011f 0000 0000 7c3e 7e7c 0f3f 0001     ~?......>||~?...
   b94c3:	0000 0000 0000 0100 0000 0000 0000          ..............

000b94d1 <_ZL7font5x7>:
   b94d1:	0805 ff00 4b0c 0000 0000 3e00 4f5b 3e5b     .....K.....>[O[>
   b94e1:	6b3e 6b4f 1c3e 7c3e 1c3e 3c18 3c7e 1c18     >kOk>.>|>..<~<..
   b94f1:	7d57 1c57 5e1c 5e7f 001c 3c18 0018 e7ff     W}W..^.^...<....
   b9501:	e7c3 00ff 2418 0018 e7ff e7db 30ff 3a48     .....$.......0H:
   b9511:	0e06 2926 2979 4026 057f 0705 7f40 2505     ..&)y)&@....@..%
   b9521:	5a3f e73c 5a3c 3e7f 1c1c 0808 1c1c 7f3e     ?Z<.<Z.>......>.
   b9531:	2214 227f 5f14 005f 5f5f 0906 017f 007f     .".".__.__......
   b9541:	8966 6a95 6060 6060 9460 ffa2 94a2 0408     f..j`````.......
   b9551:	047e 1008 7e20 1020 0808 1c2a 0808 2a1c     ~... ~ ...*....*
   b9561:	0808 101e 1010 0c10 0c1e 0c1e 3830 383e     ............08>8
   b9571:	0630 3e0e 060e 0000 0000 0000 5f00 0000     0..>........._..
   b9581:	0700 0700 1400 147f 147f 2a24 2a7f 2312     ..........$*.*.#
   b9591:	0813 6264 4936 2056 0050 0708 0003 1c00     ..db6IV P.......
   b95a1:	4122 0000 2241 001c 1c2a 1c7f 082a 3e08     "A..A"..*...*..>
   b95b1:	0808 8000 3070 0800 0808 0808 0000 6060     ....p0........``
   b95c1:	2000 0810 0204 513e 4549 003e 7f42 0040     . ....>QIE>.B.@.
   b95d1:	4972 4949 2146 4941 334d 1418 7f12 2710     rIIIF!AIM3.....'
   b95e1:	4545 3945 4a3c 4949 4131 1121 0709 4936     EEE9<JII1A!...6I
   b95f1:	4949 4636 4949 1e29 0000 0014 0000 3440     II6FII).......@4
   b9601:	0000 0800 2214 1441 1414 1414 4100 1422     ....."A......A".
   b9611:	0208 5901 0609 413e 595d 7c4e 1112 7c12     ...Y..>A]YN|...|
   b9621:	497f 4949 3e36 4141 2241 417f 4141 7f3e     .III6>AAA".AAA>.
   b9631:	4949 4149 097f 0909 3e01 4141 7351 087f     IIIA.....>AAQs..
   b9641:	0808 007f 7f41 0041 4020 3f41 7f01 1408     ....A.A. @A?....
   b9651:	4122 407f 4040 7f40 1c02 7f02 047f 1008     "A.@@@@.........
   b9661:	3e7f 4141 3e41 097f 0909 3e06 5141 5e21     .>AAA>.....>AQ!^
   b9671:	097f 2919 2646 4949 3249 0103 017f 3f03     ...)F&III2.....?
   b9681:	4040 3f40 201f 2040 3f1f 3840 3f40 1463     @@@?. @ .?@8@?c.
   b9691:	1408 0363 7804 0304 5961 4d49 0043 417f     ..c..x..aYIMC..A
   b96a1:	4141 0402 1008 0020 4141 7f41 0204 0201     AA.... .AAA.....
   b96b1:	4004 4040 4040 0300 0807 2000 5454 4078     .@@@@@..... TTx@
   b96c1:	287f 4444 3838 4444 2844 4438 2844 387f     .(DD88DDD(8DD(.8
   b96d1:	5454 1854 0800 097e 1802 a4a4 789c 087f     TTT...~......x..
   b96e1:	0404 0078 7d44 0040 4020 3d40 7f00 2810     ..x.D}@. @@=...(
   b96f1:	0044 4100 407f 7c00 7804 7804 087c 0404     D..A.@.|.x.x|...
   b9701:	3878 4444 3844 18fc 2424 1818 2424 fc18     x8DDD8..$$..$$..
   b9711:	087c 0404 4808 5454 2454 0404 443f 3c24     |....HTTT$..?D$<
   b9721:	4040 7c20 201c 2040 3c1c 3040 3c40 2844     @@ |. @ .<@0@<D(
   b9731:	2810 4c44 9090 7c90 6444 4c54 0044 3608     .(DL...|DdTLD..6
   b9741:	0041 0000 0077 0000 3641 0008 0102 0402     A...w...A6......
   b9751:	3c02 2326 3c26 a11e 61a1 3a12 4040 7a20     .<&#&<...a.:@@ z
   b9761:	5438 5554 2159 5555 4179 5421 7854 2141     8TTUY!UUyA!TTxA!
   b9771:	5455 4078 5420 7955 0c40 521e 1272 5539     UTx@ TUy@..Rr.9U
   b9781:	5555 3959 5454 5954 5539 5454 0058 4500     UUY9TTTY9UTTX..E
   b9791:	417c 0200 7d45 0042 4501 407c 29f0 2924     |A..E}B..E|@.)$)
   b97a1:	f0f0 2528 f028 547c 4555 2000 5454 547c     ..(%(.|TUE. TT|T
   b97b1:	0a7c 7f09 3249 4949 3249 4832 4848 3232     |...I2III22HHH22
   b97c1:	484a 3048 413a 2141 3a7a 4042 7820 9d00     JHH0:AA!z:B@ x..
   b97d1:	a0a0 397d 4444 3944 403d 4040 3c3d ff24     ..}9DDD9=@@@=<$.
   b97e1:	2424 7e48 4349 2b66 fc2f 2b2f 09ff f629     $$H~ICf+/./+..).
   b97f1:	c020 7e88 0309 5420 7954 0041 4400 417d      ..~.. TTyA..D}A
   b9801:	4830 4a48 3832 4040 7a22 7a00 0a0a 7d72     0HHJ28@@"z.z..r}
   b9811:	190d 7d31 2926 2f29 2628 2929 2629 4830     ..1}&))/(&)))&0H
   b9821:	404d 3820 0808 0808 0808 0808 2f38 c810     M@ 8........8/..
   b9831:	baac 102f 3428 00fa 7b00 0000 1408 142a     ../.(4...{....*.
   b9841:	2222 2a14 0814 00aa 0055 aaaa aa55 aa55     "".*....U...U.U.
   b9851:	0000 ff00 1000 1010 00ff 1414 ff14 1000     ................
   b9861:	ff10 ff00 1010 10f0 14f0 1414 00fc 1414     ................
   b9871:	00f7 00ff ff00 ff00 1414 04f4 14fc 1714     ................
   b9881:	1f10 1010 101f 141f 1414 001f 1010 f010     ................
   b9891:	0000 0000 101f 1010 1f10 1010 1010 10f0     ................
   b98a1:	0000 ff00 1010 1010 1010 1010 ff10 0010     ................
   b98b1:	0000 14ff 0000 00ff 00ff 1f00 1710 0000     ................
   b98c1:	04fc 14f4 1714 1710 1414 04f4 00f4 ff00     ................
   b98d1:	f700 1414 1414 1414 f714 f700 1414 1714     ................
   b98e1:	1014 1f10 1f10 1414 f414 1014 f010 f010     ................
   b98f1:	0000 101f 001f 0000 141f 0000 fc00 0014     ................
   b9901:	f000 f010 1010 10ff 14ff 1414 14ff 1010     ................
   b9911:	1f10 0000 0000 10f0 ffff ffff f0ff f0f0     ................
   b9921:	f0f0 ffff 00ff 0000 0000 ffff 0f0f 0f0f     ................
   b9931:	380f 4444 4438 2a7c 3e2a 7e14 0202 0606     .8DD8D|**>.~....
   b9941:	7e02 7e02 6302 4955 6341 4438 3c44 4004     .~.~.cUIAc8DD<.@
   b9951:	207e 201e 0206 027e 9902 e7a5 99a5 2a1c     ~ . ..~........*
   b9961:	2a49 4c1c 0172 4c72 4a30 4d4d 3030 7848     I*.Lr.rL0JMM00Hx
   b9971:	3048 62bc 465a 3e3d 4949 0049 017e 0101     H0.bZF=>III.~...
   b9981:	2a7e 2a2a 2a2a 4444 445f 4044 4a51 4044     ~*****DD_DD@QJD@
   b9991:	4440 514a 0040 ff00 0301 80e0 00ff 0800     @DJQ@...........
   b99a1:	6b08 086b 1236 2436 0636 090f 060f 0000     .kk.6.6$6.......
   b99b1:	1818 0000 1000 0010 4030 01ff 0001 011f     ........0@......
   b99c1:	1e01 1900 171d 0012 3c3c 3c3c 0000 0000     ........<<<<....
	...

000b99d2 <_ZL8font8x16>:
   b99d2:	1008 6020 3802 0000 0000 0000 0000 0000     .. `.8..........
   b99e2:	fe00 0000 0000 0000 000e 000e 0000 d000     ................
   b99f2:	90be bed0 0090 1c00 ff62 80c2 0000 120c     ........b.......
   b9a02:	4c92 88b0 0006 7c80 b262 c01c 0000 0000     .L.....|b.......
   b9a12:	0e0e 0000 0000 e000 0418 0202 0000 0200     ................
   b9a22:	0402 e018 0000 2400 7e18 2418 0000 8080     .......$.~.$....
   b9a32:	f080 8080 0080 0000 0000 0000 0000 8000     ................
   b9a42:	8080 0080 0000 0000 0000 0000 0000 0000     ................
   b9a52:	6080 0618 0000 04f8 32c2 f80c 0000 0400     .`.......2......
   b9a62:	fe04 0000 0000 0200 4282 1c22 0000 0200     .........B".....
   b9a72:	2222 dc22 0000 a0c0 8498 80fe 0080 1e00     """.............
   b9a82:	1212 c222 0000 44f8 2222 c022 0000 0200     .."....D""".....
   b9a92:	c202 0a32 0006 8c00 2252 8c52 0000 423c     ..2.....R"R...<B
   b9aa2:	4242 f826 0000 0000 3030 0000 0000 0000     BB&.....00......
   b9ab2:	3030 0000 0000 8080 4040 2020 0010 4040     00......@@  ..@@
   b9ac2:	4040 4040 0000 2010 4020 8040 0080 0200     @@@@...  @@.....
   b9ad2:	4282 1c22 0000 0000 0000 0000 0000 0000     .B".............
   b9ae2:	0500 0000 0000 0000 0000 0000 0000 0700     ................
   b9af2:	0000 0007 0000 0400 0f04 0304 0000 0204     ................
   b9b02:	0301 0404 0003 0403 0404 0305 0004 0000     ................
   b9b12:	0000 0000 0000 0300 0806 1010 0000 1000     ................
   b9b22:	0810 0306 0000 0000 0000 0000 0000 0000     ................
   b9b32:	0700 0000 0000 0000 0e16 0000 0000 0000     ................
	...
   b9b4a:	0606 0000 0000 0204 0001 0000 0000 0301     ................
   b9b5a:	0404 0102 0000 0400 0704 0404 0000 0700     ................
   b9b6a:	0404 0404 0000 0400 0404 0304 0000 0000     ................
   b9b7a:	0000 0007 0000 0400 0404 0304 0000 0201     ................
   b9b8a:	0404 0304 0000 0000 0007 0000 0000 0300     ................
   b9b9a:	0404 0304 0000 0400 0404 0102 0000 0000     ................
   b9baa:	0606 0000 0000 0000 0e16 0000 0000 0000     ................
   b9bba:	0101 0202 0004 0101 0101 0101 0000 0204     ................
   b9bca:	0102 0001 0000 0000 0005 0000 0000 04f8     ................
   b9bda:	8a72 84fa 0078 c000 0638 c038 0000 fe00     r...x...8.8.....
   b9bea:	2222 dc22 0000 04f8 0202 0202 0000 02fe     """.............
   b9bfa:	0202 f804 0000 fe00 2222 2222 0000 fe00     ........""""....
   b9c0a:	2222 2222 0000 04f8 0202 e222 0000 20fe     """"......".... 
   b9c1a:	2020 fe20 0000 0200 fe02 0202 0000 0000        .............
   b9c2a:	0200 fe02 0000 40fe 08b0 0204 0000 fe00     .......@........
   b9c3a:	0000 0000 0000 0cfe 8070 0c70 00fe 0cfe     ........p.p.....
   b9c4a:	c030 fe00 0000 04f8 0202 f804 0000 42fe     0..............B
   b9c5a:	4242 1c22 0000 04f8 0202 f804 0000 fe00     BB".............
   b9c6a:	4242 1ca2 0000 1c00 4222 8042 0000 0202     BB......"BB.....
   b9c7a:	fe02 0202 0002 00fe 0000 fe00 0000 3806     ...............8
   b9c8a:	00c0 38c0 0006 c03e 0ef0 c0f0 003e 0600     ...8..>.....>...
   b9c9a:	6098 0698 0000 0600 e018 0618 0000 0202     .`..............
   b9caa:	32c2 060a 0000 0000 02fe 0202 0002 0600     .2..............
   b9cba:	6018 0080 0000 0202 0202 00fe 0000 3040     .`............@0
   b9cca:	0c0c 4030 0000 0000 0000 0000 0000 0201     ..0@............
   b9cda:	0404 0004 0000 0106 0101 0101 0006 0700     ................
   b9cea:	0404 0304 0000 0201 0404 0404 0000 0407     ................
   b9cfa:	0404 0102 0000 0700 0404 0404 0000 0700     ................
   b9d0a:	0000 0000 0000 0201 0404 0704 0000 0007     ................
   b9d1a:	0000 0700 0000 0400 0704 0404 0000 0400     ................
   b9d2a:	0404 0304 0000 0007 0100 0402 0000 0700     ................
   b9d3a:	0404 0404 0000 0007 0100 0000 0007 0007     ................
   b9d4a:	0000 0703 0000 0201 0404 0102 0000 0007     ................
   b9d5a:	0000 0000 0000 0201 0c04 1112 0010 0700     ................
   b9d6a:	0000 0601 0000 0400 0404 0304 0000 0000     ................
   b9d7a:	0700 0000 0000 0403 0404 0304 0000 0000     ................
   b9d8a:	0601 0001 0000 0700 0000 0700 0000 0600     ................
   b9d9a:	0001 0601 0000 0000 0700 0000 0000 0506     ................
   b9daa:	0404 0404 0000 0000 101f 1010 0010 0000     ................
   b9dba:	0000 0201 0004 1010 1010 001f 0000 0000     ................
   b9dca:	0000 0000 0000 0808 0808 0808 0000 0000     ................
   b9dda:	0402 0000 0000 e000 1010 f010 0000 fe00     ................
   b9dea:	1020 e010 0000 e000 1010 1010 0000 e000      ...............
   b9dfa:	1010 fe10 0000 e000 9090 e090 0000 2000     ............... 
   b9e0a:	22fc 2222 0002 e000 1010 f010 0000 fe00     ."""............
   b9e1a:	1020 e010 0000 1010 00f2 0000 0000 1000      ...............
   b9e2a:	1010 00f2 0000 fe00 4080 1020 0000 0200     .........@ .....
   b9e3a:	fe02 0000 0000 20f0 f010 1020 00f0 f000     ....... .. .....
   b9e4a:	1020 e010 0000 e000 1010 e010 0000 f000      ...............
   b9e5a:	1020 e010 0000 e000 1010 f010 0000 f000      ...............
   b9e6a:	1020 7010 0000 6000 9090 2090 0000 2000      ..p...`... ... 
   b9e7a:	fc20 2020 0020 f000 0000 f000 0000 7000      .   ..........p
   b9e8a:	0080 7080 0000 00f0 30c0 00c0 00f0 3000     ...p.....0.....0
   b9e9a:	c0c0 0030 0000 3000 00c0 7080 0000 1000     ..0....0...p....
   b9eaa:	9010 3050 0000 8000 7e80 0202 0000 0000     ..P0.....~......
   b9eba:	fe00 0000 0000 0200 7e02 8080 0000 8000     .........~......
   b9eca:	0080 0000 0080 0000 0000 0000 0000 0000     ................
   b9eda:	0000 0000 0000 0300 0404 0702 0000 0700     ................
   b9eea:	0404 0304 0000 0300 0404 0404 0000 0300     ................
   b9efa:	0404 0702 0000 0300 0404 0404 0000 0000     ................
   b9f0a:	0007 0000 0000 3300 2424 1f22 0000 0700     .......3$$".....
   b9f1a:	0000 0700 0000 0000 0407 0004 0000 2020     ..............  
   b9f2a:	2020 001f 0000 0700 0100 0402 0000 0000       ..............
   b9f3a:	0700 0404 0000 0007 0700 0000 0007 0700     ................
   b9f4a:	0000 0700 0000 0300 0404 0304 0000 3f00     ...............?
   b9f5a:	0404 0304 0000 0300 0404 3f02 0000 0700     ...........?....
   b9f6a:	0000 0000 0000 0200 0404 0304 0000 0000     ................
   b9f7a:	0300 0404 0004 0300 0404 0702 0000 0000     ................
   b9f8a:	0403 0003 0000 0601 0001 0601 0001 0600     ................
   b9f9a:	0101 0006 0000 2020 0e31 0003 0000 0600     ......  1.......
   b9faa:	0405 0404 0000 0000 1f00 1010 0000 0000     ................
   b9fba:	0700 0000 0000 1000 1f10 0000 0000 0001     ................
   b9fca:	0100 0101 0000 0000 0000 0000 0000          ..............

000b9fd8 <_ZTV9MicroOLED>:
	...
   b9fe0:	53b1 000b 53b3 000b 585d 000b 6f89 000b     .S...S..]X...o..
   b9ff0:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   ba000:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   ba010:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   ba020:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   ba030:	7525 003e                                   %u>.

000ba034 <_ZTVN8particle11SPISettingsE>:
	...
   ba03c:	58e5 000b 58b9 000b 58bb 000b               .X...X...X..

000ba048 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba050:	6681 000b 6687 000b 66c5 000b 6695 000b     .f...f...f...f..
   ba060:	6683 000b                                   .f..

000ba064 <_ZTVN5spark13EthernetClassE>:
	...
   ba06c:	6c0f 000b 6c05 000b 6bfb 000b 6bf1 000b     .l...l...k...k..
   ba07c:	6be5 000b 6bd9 000b 6e65 000b 6e6d 000b     .k...k..en..mn..
   ba08c:	6bcd 000b 6bc5 000b 6bbb 000b 6bb1 000b     .k...k...k...k..
   ba09c:	6e9d 000b                                   .n..

000ba0a0 <_ZTV7TwoWire>:
	...
   ba0a8:	6c2d 000b 6c77 000b 6c4f 000b 6c2f 000b     -l..wl..Ol../l..
   ba0b8:	6c57 000b 6c5f 000b 6c67 000b 6c6f 000b     Wl.._l..gl..ol..

000ba0c8 <_ZTV9IPAddress>:
	...
   ba0d0:	6d33 000b 6d23 000b 6d25 000b 7061 0070     3m..#m..%m..app.

000ba0e0 <_ZTVN5spark12NetworkClassE>:
	...
   ba0e8:	6e25 000b 6e2f 000b 6e39 000b 6e43 000b     %n../n..9n..Cn..
   ba0f8:	6e4d 000b 6e59 000b 6e65 000b 6e6d 000b     Mn..Yn..en..mn..
   ba108:	6e75 000b 6e81 000b 6e89 000b 6e93 000b     un...n...n...n..
   ba118:	6e9d 000b 616e 006e 6e69 0066 766f 0066     .n..nan.inf.ovf.
   ba128:	002e                                        ..

000ba12a <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ba12a:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   ba13a:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   ba14a:	6d69 0065 0000                              ime...

000ba150 <_ZTV11USARTSerial>:
	...
   ba158:	7795 000b 7801 000b 77d9 000b 6f89 000b     .w...x...w...o..
   ba168:	77a9 000b 77c5 000b 77b7 000b 77d3 000b     .w...w...w...w..
   ba178:	7797 000b 779b 000b                         .w...w..

000ba180 <_ZTV9USBSerial>:
	...
   ba188:	783f 000b 78a7 000b 787d 000b 6f89 000b     ?x...x..}x...o..
   ba198:	786f 000b 7841 000b 7851 000b 78a1 000b     ox..Ax..Qx...x..
   ba1a8:	7861 000b 7839 000b                         ax..9x..

000ba1b0 <_ZTVN5spark9WiFiClassE>:
	...
   ba1b8:	7997 000b 798d 000b 7983 000b 7939 000b     .y...y...y..9y..
   ba1c8:	7977 000b 796b 000b 6e65 000b 6e6d 000b     wy..ky..en..mn..
   ba1d8:	795f 000b 7957 000b 794d 000b 7943 000b     _y..Wy..My..Cy..
   ba1e8:	6e9d 000b                                   .n..

000ba1ec <_ZSt7nothrow>:
	...

000ba1f8 <TWO52>:
   ba1f8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   ba208:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   ba218:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   ba228:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   ba238:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   ba248:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   ba258:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   ba268:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000ba278 <link_const_data_end>:
   ba278:	000b5385 	.word	0x000b5385
   ba27c:	000b5ac5 	.word	0x000b5ac5
   ba280:	000b6671 	.word	0x000b6671
   ba284:	000b6c19 	.word	0x000b6c19
   ba288:	000b6e15 	.word	0x000b6e15
   ba28c:	000b6f75 	.word	0x000b6f75
   ba290:	000b724d 	.word	0x000b724d
   ba294:	000b775d 	.word	0x000b775d
   ba298:	000b7781 	.word	0x000b7781
   ba29c:	000b79a1 	.word	0x000b79a1
